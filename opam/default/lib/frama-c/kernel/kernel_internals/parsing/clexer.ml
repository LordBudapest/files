# 50 "src/kernel_internals/parsing/clexer.mll"
 
open Cparser
module H = Hashtbl
module E = Errorloc

let currentLoc () = E.currentLoc ()

let parse_error ?(loc=currentLoc()) msg =
  E.parse_error ~loc msg

(* Convert char into Int64 *)
let int64_of_char c = Int64.of_int (Char.code c)

let one_line_ghost = ref false
let is_oneline_ghost () = !one_line_ghost
let enter_oneline_ghost () = one_line_ghost := true
let exit_oneline_ghost () = one_line_ghost := false

let ghost_code = ref false
let is_ghost_code () = !ghost_code
let enter_ghost_code () = ghost_code := true
let exit_ghost_code () = ghost_code := false

let ghost_annot = ref false
let ghost_annot_start = ref Cil_datatype.Location.unknown
let is_ghost_annot () = !ghost_annot
let get_ghost_annot_start () = !ghost_annot_start
let enter_ghost_annot () =
  ghost_annot := true;
  ghost_annot_start:= currentLoc()
let exit_ghost_annot () =
  ghost_annot := false;
  ghost_annot_start := Cil_datatype.Location.unknown

let add_comment c = Cabshelper.Comments.add (currentLoc()) c




(*
** Keyword hashtable
*)

let lexicon = H.create 211
let add key builder = H.add lexicon key builder
let remove key = H.remove lexicon key
let is_c_keyword s = Hashtbl.mem lexicon s

(* Search for a keyword, default to variable name, as opposed to type *)
let scan_ident id =
  let here = currentLoc () in
  try (H.find lexicon id) here
  with Not_found -> IDENT id

let valid key builder =
  add key builder

let unsupported key =
  let msg f k = Format.fprintf f "%s is currently unsupported by Frama-C." k in
  add key (fun loc -> Kernel.abort ~source:(fst loc) "%a" msg key)

let warning_C11 key builder =
  let warning () = Kernel.(warning ~wkey:wkey_c11 "%s is a C11 keyword" key) in
  add key (fun loc -> warning () ; builder loc)

let thread_keyword () =
  let wkey = Kernel.wkey_conditional_feature in
  let s = "__thread is a GCC extension, use a GCC-based machdep to enable it" in
  let warning () = Kernel.warning ~wkey "%s" s ; IDENT "__thread" in
  add "__thread" (fun loc -> if Machine.gccMode () then THREAD loc else warning ())

let filename_keyword () =
  let convert acc c = int64_of_char c :: acc in
  let path (loc : Cil_types.location) = (fst loc).pos_path in
  let filename loc = Filepath.Normalized.to_pretty_string (path loc) in
  let ints loc = List.rev (String.fold_left convert [] (filename loc)) in
  add "__FC_FILENAME__" (fun loc -> CST_STRING (ints loc, loc))

let init_lexicon () =
  H.clear lexicon ;
  Logic_env.reset_typenames () ;
  Logic_env.builtin_types_as_typenames () ;
  valid "auto" (fun loc -> AUTO loc) ;
  valid "const" (fun loc -> CONST loc) ;
  valid "__const" (fun loc -> CONST loc) ;
  valid "__const__" (fun loc -> CONST loc) ;
  valid "static" (fun loc -> STATIC loc) ;
  valid "extern" (fun loc -> EXTERN loc) ;
  valid "long" (fun loc -> LONG loc) ;
  valid "short" (fun loc -> SHORT loc) ;
  valid "register" (fun loc -> REGISTER loc) ;
  valid "signed" (fun loc -> SIGNED loc) ;
  valid "__signed" (fun loc -> SIGNED loc) ;
  valid "unsigned" (fun loc -> UNSIGNED loc) ;
  valid "volatile" (fun loc -> VOLATILE loc) ;
  valid "__volatile" (fun loc -> VOLATILE loc) ;
  (* WW: see /usr/include/sys/cdefs.h for why __signed and __volatile
   * are accepted GCC-isms *)
  valid "char" (fun loc -> CHAR loc) ;
  valid "_Bool" (fun loc -> BOOL loc) ;
  valid "int" (fun loc -> INT loc) ;
  valid "float" (fun loc -> FLOAT loc) ;
  valid "double" (fun loc -> DOUBLE loc) ;
  valid "void" (fun loc -> VOID loc) ;
  valid "enum" (fun loc -> ENUM loc) ;
  valid "struct" (fun loc -> STRUCT loc) ;
  valid "typedef" (fun loc -> TYPEDEF loc) ;
  valid "union" (fun loc -> UNION loc) ;
  valid "break" (fun loc -> BREAK loc) ;
  valid "continue" (fun loc -> CONTINUE loc) ;
  valid "goto" (fun loc -> GOTO loc) ;
  valid "return" (fun loc -> RETURN loc) ;
  valid "switch" (fun loc -> SWITCH loc) ;
  valid "case" (fun loc -> CASE loc) ;
  valid "default" (fun loc -> DEFAULT loc) ;
  valid "while" (fun loc -> WHILE loc) ;
  valid "do" (fun loc -> DO loc) ;
  valid "for" (fun loc -> FOR loc) ;
  valid "if" (fun loc -> IF loc) ;
  valid "else" (fun _ -> ELSE) ;
  (*** Implementation specific keywords ***)
  valid "__signed__" (fun loc -> SIGNED loc) ;
  valid "__inline__" (fun loc -> INLINE loc) ;
  valid "inline" (fun loc -> INLINE loc) ;
  valid "__inline" (fun loc -> INLINE loc) ;
  warning_C11 "_Noreturn" (fun loc -> NORETURN loc) ;
  warning_C11 "_Static_assert" (fun loc -> STATIC_ASSERT loc) ;
  valid "__attribute__" (fun loc -> ATTRIBUTE loc) ;
  valid "__attribute" (fun loc -> ATTRIBUTE loc) ;
  valid "_Nullable" (fun loc -> NOP_ATTRIBUTE loc) ;
  valid "__blockattribute__" (fun _ -> BLOCKATTRIBUTE) ;
  valid "__blockattribute" (fun _ -> BLOCKATTRIBUTE) ;
  valid "__asm__" (fun loc -> ASM loc) ;
  valid "asm" (fun loc -> ASM loc) ;
  valid "__typeof__" (fun loc -> TYPEOF loc) ;
  valid "__typeof" (fun loc -> TYPEOF loc) ;
  valid "typeof" (fun loc -> TYPEOF loc) ;
  valid "__alignof" (fun loc -> ALIGNOF loc) ;
  valid "__alignof__" (fun loc -> ALIGNOF loc) ;
  valid "__volatile__" (fun loc -> VOLATILE loc) ;
  valid "__volatile" (fun loc -> VOLATILE loc) ;
  valid "__FUNCTION__" (fun loc -> FUNCTION__ loc) ;
  valid "__func__" (fun loc -> FUNCTION__ loc) ; (* ISO 6.4.2.2 *)
  valid "__PRETTY_FUNCTION__" (fun loc -> PRETTY_FUNCTION__ loc) ;
  valid "__label__" (fun _ -> LABEL__) ;
  (*** weimer: GCC arcana ***)
  valid "__restrict" (fun loc -> RESTRICT loc) ;
  valid "restrict" (fun loc -> RESTRICT loc) ;
  (**** MS VC ***)
  valid "__int64" (fun _ -> INT64 (currentLoc ())) ;
  valid "__int32" (fun loc -> INT loc) ;
  valid "_cdecl" ( fun _ -> MSATTR ("_cdecl", currentLoc ())) ;
  valid "__cdecl" (fun _ -> MSATTR ("__cdecl", currentLoc ())) ;
  valid "_stdcall" (fun _ -> MSATTR ("_stdcall", currentLoc ())) ;
  valid "__stdcall" (fun _ -> MSATTR ("__stdcall", currentLoc ())) ;
  valid "_fastcall" (fun _ -> MSATTR ("_fastcall", currentLoc ())) ;
  valid "__fastcall" (fun _ -> MSATTR ("__fastcall", currentLoc ())) ;
  valid "__w64" (fun _ -> MSATTR("__w64", currentLoc ())) ;
  valid "__declspec" (fun loc -> DECLSPEC loc) ;
  (* !! we turn forceinline into inline *)
  valid "__forceinline" (fun loc -> INLINE loc) ;
  (* Some files produced by 'GCC -E' expect this type to be defined *)
  valid "__builtin_va_list" (fun _ -> NAMED_TYPE "__builtin_va_list") ;
  valid "__builtin_va_arg" (fun loc -> BUILTIN_VA_ARG loc) ;
  valid "__builtin_types_compatible_p" (fun loc -> BUILTIN_TYPES_COMPAT loc) ;
  valid "__builtin_offsetof" (fun loc -> BUILTIN_OFFSETOF loc) ;
  warning_C11 "_Thread_local" (fun loc -> THREAD_LOCAL loc) ;
  (* We recognize __thread for GCC machdeps *)
  thread_keyword () ;
  filename_keyword () ;
  (* The following C11/GNU extension tokens are not yet supported, so we
   provide some helpful error messages. Usage of 'fatal' instead of 'error'
   below prevents duplicate error messages due to parsing errors. *)
  unsupported "_Alignas" ;
  unsupported "_Alignof" ;
  unsupported "_Complex" ;
  unsupported "_Decimal32" ;
  unsupported "_Decimal64" ;
  warning_C11 "_Generic" (fun loc -> GENERIC loc) ;
  unsupported "_Imaginary" ;
  unsupported "__int128" ;
  unsupported "__uint128_t"



(* Mark an identifier as a type name. The old mapping is preserved and will
 * be reinstated when we exit this context *)
let add_type name =
  add name (fun _ -> NAMED_TYPE name) ;
  Logic_env.add_typename name

let remove_type name =
  remove name ; Logic_env.remove_typename name



let context : string list list ref = ref [ [] ]

let push_context _ = context := [] :: !context

let pop_context _ =
  match !context with
  | [] -> Kernel.fatal "Empty context stack"
  | con :: sub -> context := sub ; List.iter remove_type con

(* Mark an identifier as a variable name. The old mapping is preserved and
 * will be reinstated when we exit this context  *)
let add_identifier name =
  match !context with
  | [] -> Kernel.fatal "Empty context stack"
  | con :: sub ->
    context := (name :: con) :: sub ;
    add name (fun _ -> IDENT name) ;
    Logic_env.hide_typename name



let typedef_decl = ref false
let is_typedef () = !typedef_decl
let set_typedef () = typedef_decl := true
let reset_typedef () = typedef_decl := false



(*
** Buffer processor
*)

let init ~filename lexer =
  init_lexicon () ; E.startParsing filename lexer

let finish () =
  E.finishParsing () ; Logic_env.reset_typenames ()


(*** escape character management ***)
let scan_escape = function
  | 'n' -> int64_of_char '\n'
  | 'r' -> int64_of_char '\r'
  | 't' -> int64_of_char '\t'
  | 'b' -> int64_of_char '\b'
  | 'f' -> int64_of_char '\012'  (* ASCII code 12 *)
  | 'v' -> int64_of_char '\011'  (* ASCII code 11 *)
  | 'a' -> int64_of_char '\007'  (* ASCII code 7 *)
  | 'e' | 'E' -> int64_of_char '\027'  (* ASCII code 27. This is a GCC extension *)
  | '\'' -> int64_of_char '\''
  | '"' -> int64_of_char '"'     (* '"' *)
  | '?' -> int64_of_char '?'
  | '(' -> int64_of_char '('
  | '{' -> int64_of_char '{'
  | '[' -> int64_of_char '['
  | '%' -> int64_of_char '%'
  | '\\' -> int64_of_char '\\'
  | other -> parse_error "Unrecognized escape sequence: \\%c" other

let scan_hex_escape str =
  let radix = Int64.of_int 16 in
  let the_value = ref Int64.zero in
  (* start at character 2 to skip the \x *)
  for i = 2 to (String.length str) - 1 do
    let thisDigit = Cabshelper.valueOfDigit (String.get str i) in
    (* the_value := !the_value * 16 + thisDigit *)
    the_value := Int64.add (Int64.mul !the_value radix) thisDigit
  done ;
  !the_value

let scan_oct_escape str =
  let radix = Int64.of_int 8 in
  let the_value = ref Int64.zero in
  (* start at character 1 to skip the \x *)
  for i = 1 to (String.length str) - 1 do
    let thisDigit = Cabshelper.valueOfDigit (String.get str i) in
    (* the_value := !the_value * 8 + thisDigit *)
    the_value := Int64.add (Int64.mul !the_value radix) thisDigit
  done ;
  !the_value

let lex_hex_escape remainder lexbuf =
  let prefix = scan_hex_escape (Lexing.lexeme lexbuf) in
  prefix :: remainder lexbuf

let lex_oct_escape remainder lexbuf =
  let prefix = scan_oct_escape (Lexing.lexeme lexbuf) in
  prefix :: remainder lexbuf

let lex_simple_escape remainder lexbuf =
  let lexchar = Lexing.lexeme_char lexbuf 1 in
  let prefix = scan_escape lexchar in
  prefix :: remainder lexbuf

let lex_unescaped remainder lexbuf =
  let prefix = int64_of_char (Lexing.lexeme_char lexbuf 0) in
  prefix :: remainder lexbuf

let lex_comment remainder buffer lexbuf =
  let s = Lexing.lexeme lexbuf in
  if s = "\n" then E.newline() ;
  Option.iter (fun b -> Buffer.add_string b s) buffer ;
  remainder buffer lexbuf

(* We ignore the last line if it does not contain "\n" as it means that
  it directly precedes the "else" and thus contains only whitespaces *)
let rec iter_comments ends_with_n f = function
  | [] -> ()
  | [ _ ] when not ends_with_n -> ()
  | x :: l -> f x ; iter_comments ends_with_n f l

let do_ghost_else_comments register comments =
  let last = String.length comments in
  (* note that comments contains at least a blank *)
  let ends_with_n = '\n' = String.get comments (last - 1) in
  let comments = String.split_on_char '\n' comments in
  let comments = List.map String.trim comments in
  let print_comments = Kernel.PrintComments.get () in
  let do_comment s = register && print_comments && not (String.equal "" s) in
  let process_line s = E.newline () ; if do_comment s then add_comment s in
  iter_comments ends_with_n process_line comments

let do_lex_comment ?(first_string="") remainder lexbuf =
  if Kernel.PrintComments.get () then
    let b = Buffer.create 80 in
    let () = Buffer.add_string b first_string in
    let () = remainder (Some b) lexbuf in
    add_comment (Buffer.contents b)
  else remainder None lexbuf

let do_oneline_ghost ~first_string comment lexbuf initial =
  do_lex_comment ~first_string comment lexbuf ;
  E.newline () ;
  if is_oneline_ghost ()
  then (exit_oneline_ghost () ; RGHOST)
  else initial lexbuf



(* Pragmas get explicit end-of-line tokens.
 * Elsewhere they are silently discarded as whitespace. *)
let pragmaLine = ref false

let annot_char = ref '@'

(* prevent the C lexer interpretation of comments *)
let prevent _ x = annot_char := if x then '@' else '\000'
let () = Kernel.ReadAnnot.add_set_hook prevent

let annot_start_pos = ref Cabshelper.cabslu
let buf = Buffer.create 1024

let save_current_pos () =
  annot_start_pos := currentLoc ()

let annot_lex initial rule lexbuf =
  save_current_pos () ;
  Buffer.clear buf ;
  try rule lexbuf
  with Parsing.Parse_error ->
    let start = Lexing.lexeme_start_p lexbuf in
    let source = Cil_datatype.Position.of_lexing_pos start in
    Kernel.warning ~wkey:Kernel.wkey_annot_error ~source "skipping annotation" ;
    initial lexbuf

let make_annot ~one_line default lexbuf s =
  let start = snd !annot_start_pos in
  match Logic_lexer.annot (start, s) with
  (* error occured and annotation is discarded. Find a normal token. *)
  | None -> default lexbuf
  | Some (stop, token) ->
    lexbuf.Lexing.lex_curr_p <- Cil_datatype.Position.to_lexing_pos stop ;
    if one_line then E.newline () ;
    match token with
    | Logic_ptree.Adecl d -> DECL d
    | Logic_ptree.Aspec -> SPEC (start, s)
    (* At this point, we only have identified a function spec. Complete
       parsing of the annotation will only occur in the cparser.mly rule. *)
    | Logic_ptree.Acode_annot (loc,a) -> CODE_ANNOT (a, loc)
    | Logic_ptree.Aloop_annot (loc,a) -> LOOP_ANNOT (a,loc)
    | Logic_ptree.Aattribute_annot (loc,a) -> ATTRIBUTE_ANNOT (a, loc)

(* Initialize the pointer in Errormsg *)
let () =
  Lexerhack.add_type := add_type ;
  Lexerhack.push_context := push_context ;
  Lexerhack.pop_context := pop_context ;
  Lexerhack.add_identifier := add_identifier ;
  Lexerhack.is_typedef := is_typedef ;
  Lexerhack.set_typedef := set_typedef ;
  Lexerhack.reset_typedef := reset_typedef

# 391 "src/kernel_internals/parsing/clexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\177\255\178\255\091\000\192\000\185\255\186\255\187\255\
    \188\255\191\255\192\255\195\255\196\255\197\255\002\000\199\255\
    \035\000\067\000\093\000\070\000\094\000\091\000\072\000\169\000\
    \173\000\074\000\013\001\025\001\063\001\242\255\136\001\244\255\
    \223\001\076\000\247\255\249\255\074\001\213\000\093\001\208\255\
    \230\255\173\000\092\001\254\255\059\000\255\255\252\255\094\000\
    \253\255\248\255\001\000\032\000\038\000\035\000\069\000\251\255\
    \193\255\229\255\246\255\054\002\141\002\228\002\059\003\146\003\
    \233\003\064\004\151\004\238\004\069\005\156\005\243\005\074\006\
    \161\006\248\006\079\007\166\007\253\007\084\008\171\008\002\009\
    \089\009\176\009\007\010\094\010\181\010\012\011\241\255\243\255\
    \172\000\089\011\117\011\127\011\164\000\052\001\062\001\139\011\
    \161\011\168\000\156\011\158\011\173\011\183\000\077\001\076\001\
    \058\001\172\000\098\001\153\011\175\011\199\011\173\000\240\255\
    \004\012\014\012\043\012\053\012\212\001\082\012\130\002\092\012\
    \217\002\153\012\191\012\173\000\178\000\008\001\163\011\121\012\
    \005\013\229\012\038\013\048\003\071\013\135\003\238\255\168\000\
    \156\000\125\000\183\000\078\012\182\000\122\001\020\001\165\011\
    \239\255\007\001\162\000\131\000\198\000\205\000\234\255\220\255\
    \138\000\183\000\212\000\003\000\235\255\214\255\233\255\212\255\
    \213\255\232\255\231\255\203\255\228\255\204\255\227\255\226\255\
    \190\255\194\255\219\255\024\001\225\255\218\255\027\001\224\255\
    \221\255\189\255\115\013\202\013\033\014\120\014\207\014\042\001\
    \255\255\094\001\253\255\254\255\043\001\255\255\019\002\253\255\
    \254\255\044\001\255\255\065\015\249\255\250\255\053\001\252\255\
    \253\255\086\002\255\255\251\255\070\015\249\255\239\000\250\000\
    \080\015\009\004\255\255\053\001\124\001\065\001\175\011\253\255\
    \064\001\067\001\047\001\106\001\055\001\068\001\252\255\077\001\
    \073\001\086\001\099\001\096\004\129\015\086\001\120\001\203\001\
    \180\001\167\001\168\001\172\001\185\001\187\001\247\001\218\001\
    \219\001\233\001\242\001\248\001\246\001\254\001\251\255\006\002\
    \047\002\014\002\006\002\001\002\046\002\030\002\042\002\037\002\
    \040\002\072\002\094\002\089\002\091\002\093\002\102\002\109\002\
    \090\002\131\002\134\002\118\002\130\002\126\002\176\002\187\002\
    \187\002\187\002\185\002\181\002\191\002\224\002\219\002\201\002\
    \206\002\214\002\009\003\008\003\017\003\036\003\025\003\024\003\
    \014\003\018\003\047\003\041\003\041\003\055\003\058\003\085\003\
    \109\003\091\003\105\003\104\003\103\003\094\003\094\003\136\003\
    \124\003\140\003\143\003\126\003\165\003\160\003\162\003\124\013\
    \251\255\136\015\183\004\255\255\252\255\137\015\155\015\157\015\
    \164\015\253\255\005\013\076\015\080\015\026\004\253\255\254\255\
    \255\255\027\004\254\255\255\255\151\010\250\255\251\255\177\012\
    \255\255\252\255\058\005\209\015\247\015\145\005\253\255\147\010\
    \250\255\251\255\166\015\255\255\252\255\232\005\046\016\119\016\
    \063\006\253\255\094\004\252\255\253\255\169\003\164\003\161\003\
    \163\003\109\016\172\003\247\003\168\016\005\000\007\011\148\010\
    \011\011\196\016\185\011\064\012\196\011\065\012\067\012\206\012\
    \068\012\180\003\195\003\255\255\114\004\252\255\253\255\254\255\
    \021\004\255\255\022\004\255\255\181\004\253\255\222\003\216\003\
    \214\003\241\003\193\006\006\000\024\007\250\003\247\003\009\004\
    \255\255\115\004\253\255\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\076\000\076\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\057\000\255\255\
    \038\000\040\000\039\000\055\000\053\000\054\000\046\000\045\000\
    \044\000\050\000\071\000\019\000\019\000\255\255\076\000\255\255\
    \076\000\049\000\255\255\255\255\005\000\078\000\048\000\255\255\
    \255\255\002\000\000\000\255\255\001\000\255\255\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\076\000\076\000\076\000\076\000\076\000\
    \076\000\010\000\076\000\076\000\076\000\076\000\073\000\076\000\
    \076\000\076\000\076\000\074\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\075\000\255\255\255\255\
    \255\255\255\255\255\255\015\000\255\255\019\000\019\000\019\000\
    \018\000\255\255\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\255\255\019\000\019\000\019\000\019\000\255\255\255\255\
    \255\255\015\000\255\255\015\000\255\255\015\000\255\255\015\000\
    \255\255\255\255\017\000\255\255\017\000\017\000\017\000\255\255\
    \255\255\255\255\015\000\255\255\015\000\255\255\255\255\017\000\
    \017\000\017\000\255\255\016\000\255\255\016\000\016\000\016\000\
    \255\255\016\000\016\000\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\032\000\255\255\255\255\033\000\255\255\
    \255\255\255\255\076\000\076\000\076\000\076\000\072\000\001\000\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\002\000\255\255\255\255\255\255\255\255\006\000\255\255\
    \255\255\001\000\255\255\255\255\255\255\255\255\006\000\006\000\
    \002\000\001\000\255\255\255\255\002\000\002\000\002\000\255\255\
    \002\000\002\000\002\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\005\000\
    \255\255\255\255\002\000\003\000\001\000\002\000\255\255\255\255\
    \255\255\255\255\005\000\255\255\255\255\002\000\003\000\001\000\
    \002\000\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\255\255\001\000\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\039\000\000\000\
    \000\000\046\000\043\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\186\000\000\000\000\000\255\255\000\000\191\000\000\000\
    \000\000\255\255\000\000\196\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\000\000\205\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\056\001\
    \000\000\061\001\255\255\000\000\000\000\061\001\061\001\061\001\
    \061\001\000\000\067\001\067\001\067\001\070\001\000\000\000\000\
    \000\000\074\001\000\000\000\000\077\001\000\000\000\000\081\001\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\088\001\
    \000\000\000\000\092\001\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\111\001\111\001\
    \111\001\111\001\111\001\111\001\111\001\111\001\111\001\111\001\
    \111\001\255\255\255\255\000\000\125\001\000\000\000\000\000\000\
    \255\255\000\000\255\255\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\146\001\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\036\000\035\000\049\000\036\000\036\000\050\000\108\001\
    \140\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\025\000\029\000\034\000\156\000\033\000\020\000\031\000\
    \008\000\007\000\022\000\024\000\005\000\023\000\026\000\038\000\
    \028\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\014\000\006\000\018\000\016\000\017\000\015\000\
    \177\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\030\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\010\000\037\000\009\000\019\000\032\000\
    \176\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\021\000\011\000\013\000\003\000\
    \173\000\174\000\169\000\167\000\165\000\162\000\058\000\151\000\
    \052\000\057\000\056\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\053\000\054\000\168\000\
    \164\000\171\000\170\000\166\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\045\000\255\255\
    \045\000\055\000\003\000\152\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\160\000\163\000\
    \157\000\048\000\110\000\048\000\139\000\139\000\105\000\049\000\
    \101\000\106\000\050\000\138\000\003\000\091\000\161\000\159\000\
    \134\000\134\000\158\000\134\000\148\000\047\000\144\000\144\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\144\000\150\000\090\000\134\000\136\000\153\000\
    \002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\123\000\090\000\134\000\137\000\003\000\
    \154\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\178\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\149\000\051\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\091\000\
    \155\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\036\000\135\000\172\000\036\000\036\000\
    \175\000\184\000\189\000\194\000\144\000\134\000\090\000\203\000\
    \145\000\223\000\091\000\220\000\036\000\094\000\255\255\255\255\
    \091\000\144\000\036\000\219\000\091\000\091\000\093\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\027\000\
    \027\000\090\000\091\000\091\000\144\000\134\000\090\000\090\000\
    \108\000\088\000\092\000\090\000\090\000\095\000\255\255\042\000\
    \188\000\144\000\107\000\094\000\041\000\216\000\093\000\215\000\
    \091\000\090\000\090\000\106\000\093\000\215\000\215\000\089\000\
    \101\000\090\000\040\000\215\000\044\000\092\000\215\000\090\000\
    \109\000\088\000\101\000\090\000\090\000\221\000\101\000\090\000\
    \092\000\222\000\086\000\095\000\003\000\255\255\224\000\087\000\
    \225\000\090\000\090\000\106\000\093\000\215\000\215\000\089\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\101\000\226\000\227\000\049\001\146\000\090\000\
    \217\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\140\000\036\001\211\000\147\000\003\000\
    \218\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\115\000\029\001\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\015\001\006\001\005\001\001\001\192\000\252\000\249\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\060\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\248\000\241\000\247\000\193\000\059\000\240\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\242\000\255\255\255\255\187\000\201\000\
    \243\000\244\000\201\000\201\000\245\000\246\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \201\000\246\000\246\000\250\000\251\000\246\000\201\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\253\000\254\000\255\000\000\001\003\000\246\000\068\000\
    \003\000\003\000\003\000\066\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\067\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\117\000\002\001\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\001\
    \004\001\246\000\246\000\007\001\008\001\009\001\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \010\001\011\001\012\001\013\001\003\000\014\001\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\061\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
    \119\000\119\000\119\000\192\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\246\000\016\001\
    \017\001\018\001\019\001\020\001\021\001\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\022\001\
    \023\001\024\001\025\001\003\000\026\001\062\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \130\000\130\000\027\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\028\001\246\000\030\001\
    \031\001\032\001\033\001\034\001\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\035\001\246\000\
    \037\001\038\001\003\000\039\001\003\000\003\000\003\000\003\000\
    \003\000\003\000\063\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\040\001\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\041\001\042\001\043\001\044\001\
    \045\001\046\001\047\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\048\001\246\000\050\001\
    \051\001\003\000\052\001\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\064\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\053\001\054\001\
    \246\000\102\001\209\000\103\001\104\001\209\000\209\000\105\001\
    \121\001\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\209\000\072\001\075\001\110\001\122\001\
    \123\001\209\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\129\001\131\001\135\001\136\001\
    \003\000\137\001\065\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\138\001\142\001\100\001\
    \099\001\228\000\143\001\100\001\228\000\228\000\144\001\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\228\000\000\000\126\001\148\001\100\001\000\000\
    \228\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\128\001\000\000\100\001\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\133\001\000\000\
    \058\001\000\000\133\001\058\001\058\001\101\001\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\058\001\000\000\000\000\000\000\133\001\000\000\058\001\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\133\001\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\076\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\071\001\255\255\134\001\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \071\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\085\001\085\001\085\001\085\001\085\001\085\001\
    \085\001\085\001\127\001\147\001\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \069\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\086\001\086\001\086\001\086\001\086\001\086\001\086\001\
    \086\001\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\070\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \096\001\096\001\096\001\096\001\096\001\096\001\096\001\096\001\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\097\001\
    \097\001\097\001\097\001\097\001\097\001\097\001\097\001\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\072\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\140\001\000\000\000\000\140\001\140\001\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\140\001\000\000\000\000\000\000\000\000\
    \000\000\140\001\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \073\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\139\001\000\000\000\000\
    \000\000\140\001\000\000\000\000\140\001\140\001\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\140\001\000\000\000\000\000\000\000\000\000\000\
    \140\001\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\074\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\139\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\141\001\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \075\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\077\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\078\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\079\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\080\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\081\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\082\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\083\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\108\001\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\080\001\091\001\000\000\000\000\084\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\090\001\
    \112\001\000\000\000\000\079\001\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\108\001\000\000\000\000\085\000\113\001\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\112\001\
    \000\000\000\000\000\000\003\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\121\000\
    \000\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\122\000\122\000\089\001\255\255\000\000\000\000\078\001\
    \000\000\000\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \120\000\000\000\120\000\000\000\000\000\119\000\119\000\119\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\119\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\091\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \000\000\000\000\000\000\108\001\112\000\111\000\000\000\091\000\
    \000\000\000\000\091\000\111\000\091\000\000\000\113\001\091\000\
    \090\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\027\000\027\000\091\000\000\000\091\000\090\000\000\000\
    \106\000\090\000\000\000\090\000\112\000\111\000\090\000\000\000\
    \103\000\000\000\102\000\111\000\000\000\099\000\106\000\000\000\
    \090\000\000\000\090\000\101\000\090\000\091\000\098\000\107\000\
    \134\000\000\000\144\000\106\000\000\000\000\000\090\000\000\000\
    \106\000\090\000\101\000\090\000\215\000\097\000\090\000\255\255\
    \104\000\000\000\097\000\255\255\090\000\100\000\106\000\135\000\
    \000\000\145\000\090\000\101\000\090\000\112\001\098\000\000\000\
    \134\000\102\000\144\000\216\000\000\000\000\000\000\000\000\000\
    \112\001\000\000\101\000\000\000\215\000\118\001\000\000\000\000\
    \000\000\000\000\000\000\000\000\090\000\000\000\000\000\118\000\
    \000\000\118\000\000\000\106\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\117\000\117\000\117\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \000\000\000\000\108\001\108\001\000\000\108\001\108\001\000\000\
    \000\000\000\000\000\000\114\000\111\000\000\000\116\000\000\000\
    \116\000\000\000\111\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\115\000\115\000\117\001\
    \000\000\000\000\000\000\114\000\111\000\000\000\000\000\000\000\
    \000\000\000\000\111\000\111\000\000\000\000\000\139\000\139\000\
    \000\000\111\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\117\000\119\000\119\000\119\000\119\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\000\000\000\000\
    \111\000\000\000\142\000\111\000\112\001\112\001\111\000\112\001\
    \112\001\111\000\111\000\141\000\133\000\000\000\133\000\000\000\
    \111\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\000\000\000\000\000\000\119\001\140\000\
    \111\000\255\255\143\000\000\000\000\000\000\000\111\000\000\000\
    \000\000\000\000\111\000\141\000\255\255\000\000\000\000\000\000\
    \111\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\000\000\000\000\000\000\000\000\000\000\
    \108\001\000\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \000\000\082\001\082\001\082\001\082\001\082\001\082\001\082\001\
    \082\001\000\000\000\000\000\000\000\000\128\000\000\000\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\000\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\000\000\000\000\
    \000\000\083\001\000\000\125\000\000\000\000\000\255\255\127\000\
    \131\000\255\255\131\000\000\000\124\000\130\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\000\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\000\000\060\001\
    \123\000\083\001\112\001\126\000\000\000\000\000\000\000\127\000\
    \000\000\000\000\000\000\120\001\124\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\129\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \000\000\068\001\000\000\000\000\000\000\000\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\111\000\000\000\000\000\000\000\
    \000\000\000\000\111\000\000\000\000\000\129\000\000\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\000\000\000\000\000\000\000\000\058\001\059\001\000\000\
    \058\001\058\001\000\000\000\000\111\000\111\000\000\000\000\000\
    \000\000\000\000\111\000\111\000\000\000\000\000\058\001\003\000\
    \000\000\000\000\000\000\000\000\058\001\000\000\057\001\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\111\000\000\000\000\000\
    \000\000\255\255\000\000\111\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\000\000\
    \000\000\000\000\003\000\000\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\179\000\003\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\003\000\000\000\003\000\003\000\003\000\003\000\180\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\255\255\000\000\000\000\000\000\
    \003\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \181\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\182\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\201\000\202\000\000\000\201\000\201\000\209\000\
    \210\000\000\000\209\000\209\000\000\000\255\255\000\000\000\000\
    \255\255\255\255\000\000\201\000\255\255\000\000\000\000\000\000\
    \209\000\201\000\000\000\197\000\000\000\000\000\209\000\000\000\
    \000\000\200\000\199\000\000\000\000\000\000\000\060\001\000\000\
    \198\000\000\000\066\001\000\000\000\000\000\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\228\000\000\000\000\000\228\000\228\000\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\228\000\213\000\000\000\000\000\000\000\
    \000\000\228\000\000\000\000\000\255\255\212\000\255\255\255\255\
    \068\001\255\255\060\001\060\001\068\001\255\255\000\000\000\000\
    \255\255\000\000\207\000\000\000\000\000\000\000\206\000\063\001\
    \063\001\211\000\000\000\000\000\214\000\066\001\000\000\060\001\
    \000\000\000\000\000\000\000\000\000\000\212\000\065\001\000\000\
    \238\000\000\000\063\001\000\000\064\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\064\001\000\000\231\000\093\001\093\001\
    \093\001\093\001\093\001\093\001\093\001\093\001\000\000\000\000\
    \000\000\000\000\234\000\000\000\062\001\062\001\000\000\000\000\
    \230\000\000\000\237\000\000\000\000\000\229\000\000\000\000\000\
    \235\000\000\000\000\000\232\000\236\000\000\000\233\000\062\001\
    \239\000\062\001\000\000\000\000\000\000\000\000\094\001\000\000\
    \062\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
    \084\001\084\001\084\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\084\001\084\001\084\001\084\001\084\001\084\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\094\001\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\084\001\
    \084\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
    \084\001\000\000\084\001\084\001\084\001\084\001\084\001\084\001\
    \084\001\084\001\084\001\084\001\084\001\084\001\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \084\001\084\001\084\001\084\001\084\001\084\001\095\001\095\001\
    \095\001\095\001\095\001\095\001\095\001\095\001\095\001\095\001\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\001\
    \095\001\095\001\095\001\095\001\095\001\000\000\108\001\108\001\
    \000\000\108\001\108\001\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\108\001\
    \255\255\255\255\000\000\000\000\000\000\108\001\000\000\095\001\
    \095\001\095\001\095\001\095\001\095\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\107\001\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\095\001\
    \095\001\095\001\095\001\095\001\095\001\095\001\095\001\095\001\
    \095\001\108\001\108\001\000\000\108\001\108\001\000\000\000\000\
    \095\001\095\001\095\001\095\001\095\001\095\001\000\000\000\000\
    \000\000\000\000\108\001\000\000\000\000\000\000\000\000\000\000\
    \108\001\109\001\000\000\000\000\000\000\113\001\108\001\000\000\
    \113\001\113\001\106\001\000\000\000\000\000\000\000\000\107\001\
    \095\001\095\001\095\001\095\001\095\001\095\001\113\001\000\000\
    \000\000\000\000\000\000\000\000\113\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\115\001\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\109\001\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\106\001\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \116\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\114\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\050\000\000\000\000\000\050\000\109\001\
    \139\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \017\000\017\000\018\000\019\000\020\000\022\000\033\000\025\000\
    \051\000\033\000\033\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\052\000\053\000\018\000\
    \021\000\018\000\018\000\020\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\044\000\041\000\
    \044\000\054\000\003\000\025\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\023\000\021\000\
    \024\000\047\000\092\000\047\000\088\000\088\000\097\000\037\000\
    \105\000\110\000\037\000\123\000\004\000\101\000\023\000\023\000\
    \136\000\137\000\024\000\138\000\140\000\041\000\146\000\147\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\148\000\149\000\101\000\135\000\124\000\152\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\124\000\101\000\135\000\124\000\004\000\
    \153\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\026\000\037\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\027\000\
    \154\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\036\000\125\000\171\000\036\000\036\000\
    \174\000\183\000\188\000\193\000\145\000\125\000\027\000\198\000\
    \142\000\206\000\093\000\207\000\036\000\027\000\042\000\038\000\
    \104\000\142\000\036\000\211\000\094\000\028\000\027\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\093\000\103\000\102\000\145\000\125\000\027\000\104\000\
    \093\000\028\000\027\000\094\000\028\000\027\000\042\000\038\000\
    \185\000\142\000\094\000\028\000\038\000\213\000\027\000\217\000\
    \106\000\103\000\102\000\094\000\028\000\216\000\213\000\028\000\
    \103\000\093\000\038\000\218\000\042\000\093\000\219\000\104\000\
    \093\000\028\000\102\000\094\000\028\000\220\000\104\000\106\000\
    \028\000\221\000\030\000\028\000\030\000\041\000\223\000\030\000\
    \224\000\103\000\102\000\094\000\028\000\216\000\213\000\028\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\102\000\225\000\226\000\229\000\141\000\106\000\
    \212\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\141\000\230\000\212\000\141\000\030\000\
    \212\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\032\000\116\000\116\000\116\000\116\000\
    \116\000\116\000\116\000\116\000\116\000\116\000\231\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\232\000\233\000\234\000\235\000\190\000\236\000\237\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\238\000\239\000\240\000\190\000\032\000\239\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\059\000\241\000\042\000\038\000\185\000\201\000\
    \242\000\243\000\201\000\201\000\244\000\245\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \201\000\247\000\248\000\249\000\250\000\251\000\201\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\252\000\253\000\254\000\255\000\059\000\000\001\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\060\000\118\000\118\000\118\000\118\000\118\000\118\000\
    \118\000\118\000\118\000\118\000\001\001\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\002\001\
    \003\001\004\001\005\001\006\001\007\001\008\001\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \009\001\010\001\011\001\012\001\060\000\013\001\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
    \061\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
    \120\000\120\000\120\000\190\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\014\001\015\001\
    \016\001\017\001\018\001\019\001\020\001\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\021\001\
    \022\001\023\001\024\001\061\000\025\001\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\062\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
    \131\000\131\000\026\001\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\027\001\028\001\029\001\
    \030\001\031\001\032\001\033\001\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\034\001\035\001\
    \036\001\037\001\062\000\038\001\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\063\000\133\000\
    \133\000\133\000\133\000\133\000\133\000\133\000\133\000\133\000\
    \133\000\039\001\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\040\001\041\001\042\001\043\001\
    \044\001\045\001\046\001\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\047\001\048\001\049\001\
    \050\001\063\000\051\001\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\064\000\052\001\053\001\
    \054\001\101\001\209\000\102\001\103\001\209\000\209\000\104\001\
    \106\001\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\209\000\069\001\073\001\107\001\121\001\
    \122\001\209\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\128\001\130\001\134\001\135\001\
    \064\000\136\001\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\065\000\137\001\141\001\098\001\
    \098\001\227\000\142\001\098\001\227\000\227\000\143\001\255\255\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\227\000\255\255\124\001\145\001\098\001\255\255\
    \227\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\255\255\124\001\255\255\098\001\065\000\
    \255\255\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\066\000\255\255\255\255\132\001\255\255\
    \058\001\255\255\132\001\058\001\058\001\098\001\255\255\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\058\001\255\255\255\255\255\255\132\001\255\255\058\001\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\255\255\255\255\255\255\132\001\066\000\255\255\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\067\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\069\001\073\001\132\001\255\255\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\255\255\255\255\255\255\255\255\067\000\255\255\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\068\000\082\001\082\001\082\001\082\001\082\001\082\001\
    \082\001\082\001\124\001\145\001\255\255\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \255\255\255\255\255\255\255\255\068\000\255\255\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \069\000\085\001\085\001\085\001\085\001\085\001\085\001\085\001\
    \085\001\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\255\255\
    \255\255\255\255\255\255\069\000\255\255\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\070\000\
    \093\001\093\001\093\001\093\001\093\001\093\001\093\001\093\001\
    \255\255\255\255\255\255\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\255\255\255\255\
    \255\255\255\255\070\000\255\255\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\071\000\096\001\
    \096\001\096\001\096\001\096\001\096\001\096\001\096\001\255\255\
    \255\255\255\255\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\255\255\255\255\255\255\
    \255\255\071\000\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\072\000\255\255\255\255\
    \255\255\255\255\138\001\255\255\255\255\138\001\138\001\255\255\
    \255\255\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\138\001\255\255\255\255\255\255\255\255\
    \255\255\138\001\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\255\255\255\255\255\255\255\255\
    \072\000\255\255\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\073\000\138\001\255\255\255\255\
    \255\255\140\001\255\255\255\255\140\001\140\001\255\255\255\255\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\140\001\255\255\255\255\255\255\255\255\255\255\
    \140\001\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\255\255\255\255\255\255\255\255\073\000\
    \255\255\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\074\000\140\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\140\001\255\255\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\255\255\255\255\255\255\255\255\074\000\255\255\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\075\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\255\255\255\255\255\255\255\255\075\000\255\255\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\076\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \255\255\255\255\255\255\255\255\076\000\255\255\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \077\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \255\255\255\255\255\255\077\000\255\255\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\078\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\255\255\255\255\
    \255\255\255\255\078\000\255\255\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\079\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\255\255\255\255\255\255\
    \255\255\079\000\255\255\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\080\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\255\255\255\255\255\255\255\255\
    \080\000\255\255\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\081\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\255\255\255\255\255\255\255\255\081\000\
    \255\255\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\082\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\255\255\255\255\255\255\255\255\082\000\255\255\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\083\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\111\001\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\076\001\087\001\255\255\255\255\083\000\255\255\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\084\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\087\001\
    \111\001\255\255\255\255\076\001\255\255\255\255\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \255\255\110\001\255\255\255\255\084\000\112\001\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \085\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\255\255\110\001\
    \255\255\255\255\255\255\255\255\255\255\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\112\001\
    \255\255\255\255\255\255\085\000\255\255\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\089\000\
    \255\255\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \089\000\089\000\089\000\087\001\111\001\255\255\255\255\076\001\
    \255\255\255\255\089\000\089\000\089\000\089\000\089\000\089\000\
    \090\000\255\255\090\000\255\255\255\255\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
    \091\000\095\000\089\000\089\000\089\000\089\000\089\000\089\000\
    \255\255\255\255\255\255\114\001\091\000\091\000\255\255\107\000\
    \255\255\255\255\098\000\091\000\099\000\255\255\116\001\096\000\
    \095\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\100\000\255\255\108\000\107\000\255\255\
    \095\000\098\000\255\255\099\000\091\000\091\000\096\000\255\255\
    \098\000\255\255\099\000\091\000\255\255\096\000\107\000\255\255\
    \095\000\255\255\100\000\099\000\108\000\109\000\096\000\095\000\
    \126\000\255\255\143\000\108\000\255\255\255\255\107\000\255\255\
    \095\000\098\000\100\000\099\000\214\000\098\000\096\000\110\001\
    \098\000\255\255\096\000\112\001\109\000\096\000\107\000\126\000\
    \255\255\143\000\100\000\099\000\108\000\114\001\096\000\255\255\
    \126\000\100\000\143\000\214\000\255\255\255\255\255\255\255\255\
    \116\001\255\255\100\000\255\255\214\000\114\001\255\255\255\255\
    \255\255\255\255\255\255\255\255\109\000\255\255\255\255\112\000\
    \255\255\112\000\255\255\109\000\112\000\112\000\112\000\112\000\
    \112\000\112\000\112\000\112\000\112\000\112\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \255\255\255\255\115\001\117\001\255\255\118\001\120\001\255\255\
    \255\255\255\255\255\255\113\000\113\000\255\255\114\000\255\255\
    \114\000\255\255\113\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\001\
    \255\255\255\255\255\255\113\000\113\000\255\255\255\255\255\255\
    \255\255\255\255\113\000\115\000\255\255\255\255\139\000\139\000\
    \255\255\115\000\117\000\117\000\117\000\117\000\117\000\117\000\
    \117\000\117\000\117\000\117\000\119\000\119\000\119\000\119\000\
    \119\000\119\000\119\000\119\000\119\000\119\000\255\255\255\255\
    \117\000\255\255\139\000\115\000\115\001\117\001\117\000\118\001\
    \120\001\115\000\119\000\139\000\127\000\255\255\127\000\255\255\
    \119\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
    \127\000\127\000\127\000\255\255\255\255\255\255\118\001\139\000\
    \117\000\114\001\139\000\255\255\255\255\255\255\117\000\255\255\
    \255\255\255\255\119\000\139\000\116\001\255\255\255\255\255\255\
    \119\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\121\000\255\255\255\255\255\255\255\255\255\255\
    \119\001\255\255\121\000\121\000\121\000\121\000\121\000\121\000\
    \255\255\079\001\079\001\079\001\079\001\079\001\079\001\079\001\
    \079\001\255\255\255\255\255\255\255\255\122\000\255\255\122\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
    \122\000\255\255\121\000\121\000\121\000\121\000\121\000\121\000\
    \122\000\122\000\122\000\122\000\122\000\122\000\255\255\255\255\
    \255\255\079\001\255\255\122\000\255\255\255\255\066\001\122\000\
    \129\000\066\001\129\000\255\255\122\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\129\000\129\000\129\000\129\000\255\255\
    \122\000\122\000\122\000\122\000\122\000\122\000\255\255\066\001\
    \122\000\079\001\119\001\122\000\255\255\255\255\255\255\122\000\
    \255\255\255\255\255\255\119\001\122\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\255\255\
    \115\001\117\001\255\255\118\001\120\001\255\255\128\000\128\000\
    \128\000\128\000\128\000\128\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\128\000\130\000\130\000\
    \130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
    \255\255\066\001\255\255\255\255\255\255\255\255\128\000\128\000\
    \128\000\128\000\128\000\128\000\130\000\255\255\255\255\255\255\
    \255\255\255\255\130\000\255\255\255\255\128\000\255\255\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \132\000\255\255\255\255\255\255\255\255\055\001\055\001\255\255\
    \055\001\055\001\255\255\255\255\130\000\132\000\255\255\255\255\
    \255\255\255\255\130\000\132\000\255\255\255\255\055\001\178\000\
    \255\255\255\255\255\255\255\255\055\001\255\255\055\001\255\255\
    \255\255\255\255\255\255\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\132\000\255\255\255\255\
    \255\255\079\001\255\255\132\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\119\001\255\255\
    \255\255\255\255\178\000\255\255\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\179\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\179\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\255\255\066\001\255\255\255\255\
    \255\255\255\255\255\255\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\255\255\255\255\255\255\
    \255\255\179\000\255\255\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\179\000\179\000\179\000\
    \179\000\179\000\179\000\179\000\179\000\180\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\055\001\255\255\255\255\255\255\
    \180\000\255\255\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
    \180\000\180\000\180\000\180\000\181\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\255\255\255\255\255\255\255\255\181\000\
    \255\255\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
    \181\000\181\000\181\000\182\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\255\255\255\255\255\255\255\255\182\000\255\255\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
    \182\000\182\000\195\000\195\000\255\255\195\000\195\000\204\000\
    \204\000\255\255\204\000\204\000\255\255\067\001\255\255\255\255\
    \067\001\068\001\255\255\195\000\068\001\255\255\255\255\255\255\
    \204\000\195\000\255\255\195\000\255\255\255\255\204\000\255\255\
    \255\255\195\000\195\000\255\255\255\255\255\255\067\001\255\255\
    \195\000\255\255\068\001\255\255\255\255\255\255\204\000\204\000\
    \204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
    \208\000\208\000\208\000\208\000\208\000\208\000\208\000\208\000\
    \208\000\208\000\228\000\255\255\255\255\228\000\228\000\255\255\
    \255\255\057\001\061\001\255\255\057\001\061\001\255\255\255\255\
    \255\255\255\255\255\255\228\000\208\000\255\255\255\255\255\255\
    \255\255\228\000\255\255\255\255\062\001\208\000\063\001\062\001\
    \067\001\063\001\057\001\061\001\068\001\064\001\255\255\255\255\
    \064\001\255\255\204\000\255\255\255\255\255\255\204\000\057\001\
    \061\001\208\000\255\255\255\255\208\000\062\001\255\255\063\001\
    \255\255\255\255\255\255\255\255\255\255\208\000\064\001\255\255\
    \228\000\255\255\062\001\255\255\063\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\064\001\255\255\228\000\090\001\090\001\
    \090\001\090\001\090\001\090\001\090\001\090\001\255\255\255\255\
    \255\255\255\255\228\000\255\255\057\001\061\001\255\255\255\255\
    \228\000\255\255\228\000\255\255\255\255\228\000\255\255\255\255\
    \228\000\255\255\255\255\228\000\228\000\255\255\228\000\062\001\
    \228\000\063\001\255\255\255\255\255\255\255\255\090\001\255\255\
    \064\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
    \083\001\083\001\083\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\083\001\083\001\083\001\083\001\083\001\083\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\090\001\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
    \084\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
    \084\001\255\255\083\001\083\001\083\001\083\001\083\001\083\001\
    \084\001\084\001\084\001\084\001\084\001\084\001\255\255\255\255\
    \255\255\195\000\255\255\255\255\255\255\255\255\204\000\255\255\
    \255\255\255\255\255\255\255\255\067\001\255\255\255\255\255\255\
    \068\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \084\001\084\001\084\001\084\001\084\001\084\001\094\001\094\001\
    \094\001\094\001\094\001\094\001\094\001\094\001\094\001\094\001\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\094\001\
    \094\001\094\001\094\001\094\001\094\001\255\255\105\001\105\001\
    \255\255\105\001\105\001\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\105\001\
    \057\001\061\001\255\255\255\255\255\255\105\001\255\255\094\001\
    \094\001\094\001\094\001\094\001\094\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\062\001\105\001\063\001\255\255\255\255\
    \255\255\255\255\255\255\255\255\064\001\255\255\090\001\095\001\
    \095\001\095\001\095\001\095\001\095\001\095\001\095\001\095\001\
    \095\001\108\001\108\001\255\255\108\001\108\001\255\255\255\255\
    \095\001\095\001\095\001\095\001\095\001\095\001\255\255\255\255\
    \255\255\255\255\108\001\255\255\255\255\255\255\255\255\255\255\
    \108\001\105\001\255\255\255\255\255\255\113\001\113\001\255\255\
    \113\001\113\001\105\001\255\255\255\255\255\255\255\255\108\001\
    \095\001\095\001\095\001\095\001\095\001\095\001\113\001\255\255\
    \255\255\255\255\255\255\255\255\113\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\113\001\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\108\001\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\108\001\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \113\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\113\001\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\113\001";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\
    \001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\227\000\255\255\228\000\227\000\227\000\228\000\228\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\227\000\255\255\228\000\255\255\255\255\255\255\
    \227\000\255\255\228\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\000\001\255";
}

let rec initial lexbuf =
   __ocaml_lex_initial_rec lexbuf 0
and __ocaml_lex_initial_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 504 "src/kernel_internals/parsing/clexer.mll"
                              suf
# 1925 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 505 "src/kernel_internals/parsing/clexer.mll"
    (
    do_lex_comment ~first_string:suf comment lexbuf ;
    initial lexbuf
    )
# 1932 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
let
# 510 "src/kernel_internals/parsing/clexer.mll"
                          c
# 1938 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 511 "src/kernel_internals/parsing/clexer.mll"
    (
    let first_string = String.make 1 c in
    if c = !annot_char
    then annot_lex initial annot_first_token lexbuf
    else (do_lex_comment ~first_string comment lexbuf ; initial lexbuf)
    )
# 1947 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 519 "src/kernel_internals/parsing/clexer.mll"
                              suf
# 1953 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 520 "src/kernel_internals/parsing/clexer.mll"
    (
    do_oneline_ghost ~first_string:suf onelinecomment lexbuf initial
    )
# 1959 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 524 "src/kernel_internals/parsing/clexer.mll"
                      c
# 1965 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2) in
# 525 "src/kernel_internals/parsing/clexer.mll"
    (
    let first_string = String.make 1 c in
    if c = !annot_char
    then annot_lex initial annot_one_line lexbuf
    else do_oneline_ghost ~first_string onelinecomment lexbuf initial
    )
# 1974 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 533 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_ghost_code () || is_oneline_ghost ()
    then GHOST (currentLoc())
    else parse_error "Use of \\ghost out of ghost code"
    )
# 1983 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 539 "src/kernel_internals/parsing/clexer.mll"
          (initial lexbuf)
# 1988 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 540 "src/kernel_internals/parsing/clexer.mll"
    (
    E.newline () ;
    if !pragmaLine then (pragmaLine := false ; PRAGMA_EOL)
    else if is_oneline_ghost () then (exit_oneline_ghost () ; RGHOST)
    else initial lexbuf
    )
# 1998 "src/kernel_internals/parsing/clexer.ml"

  | 7 ->
# 548 "src/kernel_internals/parsing/clexer.mll"
    (
    E.newline () ;
    initial lexbuf
    )
# 2006 "src/kernel_internals/parsing/clexer.ml"

  | 8 ->
# 553 "src/kernel_internals/parsing/clexer.mll"
         ( hash lexbuf )
# 2011 "src/kernel_internals/parsing/clexer.ml"

  | 9 ->
# 554 "src/kernel_internals/parsing/clexer.mll"
         ( hash lexbuf )
# 2016 "src/kernel_internals/parsing/clexer.ml"

  | 10 ->
# 555 "src/kernel_internals/parsing/clexer.mll"
              ( PRAGMA (currentLoc ()) )
# 2021 "src/kernel_internals/parsing/clexer.ml"

  | 11 ->
# 558 "src/kernel_internals/parsing/clexer.mll"
    (
    let start = Lexing.lexeme_start_p lexbuf in
    let content = chr lexbuf in
    let last = Lexing.lexeme_end_p lexbuf in
    CST_CHAR (content, Cil_datatype.Location.of_lexing_loc (start,last))
    )
# 2031 "src/kernel_internals/parsing/clexer.ml"

  | 12 ->
# 566 "src/kernel_internals/parsing/clexer.mll"
    (
    let start = Lexing.lexeme_start_p lexbuf in
    let content = chr lexbuf in
    let last = Lexing.lexeme_end_p lexbuf in
    CST_WCHAR (content, Cil_datatype.Location.of_lexing_loc (start,last))
    )
# 2041 "src/kernel_internals/parsing/clexer.ml"

  | 13 ->
# 574 "src/kernel_internals/parsing/clexer.mll"
    (
    let start = Lexing.lexeme_start_p lexbuf in
    let content = str lexbuf in
    let last = Lexing.lexeme_end_p lexbuf in
    CST_STRING (content, Cil_datatype.Location.of_lexing_loc (start,last))
    )
# 2051 "src/kernel_internals/parsing/clexer.ml"

  | 14 ->
# 582 "src/kernel_internals/parsing/clexer.mll"
    (
    let start = Lexing.lexeme_start_p lexbuf in
    let content = str lexbuf in
    let last = Lexing.lexeme_end_p lexbuf in
    CST_WSTRING(content, Cil_datatype.Location.of_lexing_loc (start,last))
    )
# 2061 "src/kernel_internals/parsing/clexer.ml"

  | 15 ->
# 589 "src/kernel_internals/parsing/clexer.mll"
              ( CST_FLOAT (Lexing.lexeme lexbuf, currentLoc ()) )
# 2066 "src/kernel_internals/parsing/clexer.ml"

  | 16 ->
# 592 "src/kernel_internals/parsing/clexer.mll"
              ( CST_INT (Lexing.lexeme lexbuf, currentLoc ()) )
# 2071 "src/kernel_internals/parsing/clexer.ml"

  | 17 ->
# 594 "src/kernel_internals/parsing/clexer.mll"
              ( CST_INT (Lexing.lexeme lexbuf, currentLoc ()) )
# 2076 "src/kernel_internals/parsing/clexer.ml"

  | 18 ->
# 595 "src/kernel_internals/parsing/clexer.mll"
              ( CST_INT (Lexing.lexeme lexbuf, currentLoc ()) )
# 2081 "src/kernel_internals/parsing/clexer.ml"

  | 19 ->
# 596 "src/kernel_internals/parsing/clexer.mll"
              ( CST_INT (Lexing.lexeme lexbuf, currentLoc ()) )
# 2086 "src/kernel_internals/parsing/clexer.ml"

  | 20 ->
# 597 "src/kernel_internals/parsing/clexer.mll"
              ( EOF )
# 2091 "src/kernel_internals/parsing/clexer.ml"

  | 21 ->
# 598 "src/kernel_internals/parsing/clexer.mll"
              ( ELLIPSIS )
# 2096 "src/kernel_internals/parsing/clexer.ml"

  | 22 ->
# 599 "src/kernel_internals/parsing/clexer.mll"
              ( PLUS_EQ )
# 2101 "src/kernel_internals/parsing/clexer.ml"

  | 23 ->
# 600 "src/kernel_internals/parsing/clexer.mll"
              ( MINUS_EQ )
# 2106 "src/kernel_internals/parsing/clexer.ml"

  | 24 ->
# 601 "src/kernel_internals/parsing/clexer.mll"
              ( STAR_EQ )
# 2111 "src/kernel_internals/parsing/clexer.ml"

  | 25 ->
# 602 "src/kernel_internals/parsing/clexer.mll"
              ( SLASH_EQ )
# 2116 "src/kernel_internals/parsing/clexer.ml"

  | 26 ->
# 603 "src/kernel_internals/parsing/clexer.mll"
              ( PERCENT_EQ )
# 2121 "src/kernel_internals/parsing/clexer.ml"

  | 27 ->
# 604 "src/kernel_internals/parsing/clexer.mll"
              ( PIPE_EQ )
# 2126 "src/kernel_internals/parsing/clexer.ml"

  | 28 ->
# 605 "src/kernel_internals/parsing/clexer.mll"
              ( AND_EQ )
# 2131 "src/kernel_internals/parsing/clexer.ml"

  | 29 ->
# 606 "src/kernel_internals/parsing/clexer.mll"
              ( CIRC_EQ )
# 2136 "src/kernel_internals/parsing/clexer.ml"

  | 30 ->
# 607 "src/kernel_internals/parsing/clexer.mll"
              ( INF_INF_EQ )
# 2141 "src/kernel_internals/parsing/clexer.ml"

  | 31 ->
# 608 "src/kernel_internals/parsing/clexer.mll"
              ( SUP_SUP_EQ )
# 2146 "src/kernel_internals/parsing/clexer.ml"

  | 32 ->
# 609 "src/kernel_internals/parsing/clexer.mll"
              ( INF_INF )
# 2151 "src/kernel_internals/parsing/clexer.ml"

  | 33 ->
# 610 "src/kernel_internals/parsing/clexer.mll"
              ( SUP_SUP )
# 2156 "src/kernel_internals/parsing/clexer.ml"

  | 34 ->
# 611 "src/kernel_internals/parsing/clexer.mll"
              ( EQ_EQ )
# 2161 "src/kernel_internals/parsing/clexer.ml"

  | 35 ->
# 612 "src/kernel_internals/parsing/clexer.mll"
              ( EXCLAM_EQ )
# 2166 "src/kernel_internals/parsing/clexer.ml"

  | 36 ->
# 613 "src/kernel_internals/parsing/clexer.mll"
              ( INF_EQ )
# 2171 "src/kernel_internals/parsing/clexer.ml"

  | 37 ->
# 614 "src/kernel_internals/parsing/clexer.mll"
              ( SUP_EQ )
# 2176 "src/kernel_internals/parsing/clexer.ml"

  | 38 ->
# 615 "src/kernel_internals/parsing/clexer.mll"
              ( EQ )
# 2181 "src/kernel_internals/parsing/clexer.ml"

  | 39 ->
# 616 "src/kernel_internals/parsing/clexer.mll"
              ( INF )
# 2186 "src/kernel_internals/parsing/clexer.ml"

  | 40 ->
# 617 "src/kernel_internals/parsing/clexer.mll"
              ( SUP )
# 2191 "src/kernel_internals/parsing/clexer.ml"

  | 41 ->
# 618 "src/kernel_internals/parsing/clexer.mll"
              ( PLUS_PLUS (currentLoc ()) )
# 2196 "src/kernel_internals/parsing/clexer.ml"

  | 42 ->
# 619 "src/kernel_internals/parsing/clexer.mll"
              ( MINUS_MINUS (currentLoc ()) )
# 2201 "src/kernel_internals/parsing/clexer.ml"

  | 43 ->
# 620 "src/kernel_internals/parsing/clexer.mll"
              ( ARROW )
# 2206 "src/kernel_internals/parsing/clexer.ml"

  | 44 ->
# 621 "src/kernel_internals/parsing/clexer.mll"
              ( PLUS (currentLoc ()) )
# 2211 "src/kernel_internals/parsing/clexer.ml"

  | 45 ->
# 622 "src/kernel_internals/parsing/clexer.mll"
              ( MINUS (currentLoc ()) )
# 2216 "src/kernel_internals/parsing/clexer.ml"

  | 46 ->
# 625 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_ghost_code ()
    then might_end_ghost lexbuf
    else STAR (currentLoc ())
    )
# 2225 "src/kernel_internals/parsing/clexer.ml"

  | 47 ->
let
# 631 "src/kernel_internals/parsing/clexer.mll"
                     c
# 2231 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 632 "src/kernel_internals/parsing/clexer.mll"
    (
    if c = !annot_char then
      if is_ghost_code () || is_oneline_ghost ()
      then (enter_ghost_annot () ; annot_lex initial annot_first_token lexbuf)
      else parse_error "This kind of annotation is valid only inside ghost code"
    else (lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 1 ; SLASH)
    )
# 2241 "src/kernel_internals/parsing/clexer.ml"

  | 48 ->
# 640 "src/kernel_internals/parsing/clexer.mll"
          ( SLASH )
# 2246 "src/kernel_internals/parsing/clexer.ml"

  | 49 ->
# 641 "src/kernel_internals/parsing/clexer.mll"
          ( PERCENT )
# 2251 "src/kernel_internals/parsing/clexer.ml"

  | 50 ->
# 642 "src/kernel_internals/parsing/clexer.mll"
          ( EXCLAM (currentLoc ()) )
# 2256 "src/kernel_internals/parsing/clexer.ml"

  | 51 ->
# 643 "src/kernel_internals/parsing/clexer.mll"
          ( AND_AND (currentLoc ()) )
# 2261 "src/kernel_internals/parsing/clexer.ml"

  | 52 ->
# 644 "src/kernel_internals/parsing/clexer.mll"
          ( PIPE_PIPE )
# 2266 "src/kernel_internals/parsing/clexer.ml"

  | 53 ->
# 645 "src/kernel_internals/parsing/clexer.mll"
          ( AND (currentLoc ()) )
# 2271 "src/kernel_internals/parsing/clexer.ml"

  | 54 ->
# 646 "src/kernel_internals/parsing/clexer.mll"
          ( PIPE )
# 2276 "src/kernel_internals/parsing/clexer.ml"

  | 55 ->
# 647 "src/kernel_internals/parsing/clexer.mll"
          ( CIRC )
# 2281 "src/kernel_internals/parsing/clexer.ml"

  | 56 ->
# 648 "src/kernel_internals/parsing/clexer.mll"
          ( QUEST )
# 2286 "src/kernel_internals/parsing/clexer.ml"

  | 57 ->
# 651 "src/kernel_internals/parsing/clexer.mll"
    (
    if Cabshelper.is_attr_test ()
    then (Cabshelper.pop_attr_test () ; COLON2)
    else COLON
    )
# 2295 "src/kernel_internals/parsing/clexer.ml"

  | 58 ->
# 657 "src/kernel_internals/parsing/clexer.mll"
              ( TILDE (currentLoc ()) )
# 2300 "src/kernel_internals/parsing/clexer.ml"

  | 59 ->
# 658 "src/kernel_internals/parsing/clexer.mll"
              ( LBRACE (currentLoc ()) )
# 2305 "src/kernel_internals/parsing/clexer.ml"

  | 60 ->
# 659 "src/kernel_internals/parsing/clexer.mll"
              ( RBRACE (currentLoc ()) )
# 2310 "src/kernel_internals/parsing/clexer.ml"

  | 61 ->
# 660 "src/kernel_internals/parsing/clexer.mll"
              ( LBRACE (currentLoc ()) )
# 2315 "src/kernel_internals/parsing/clexer.ml"

  | 62 ->
# 661 "src/kernel_internals/parsing/clexer.mll"
              ( RBRACE (currentLoc ()) )
# 2320 "src/kernel_internals/parsing/clexer.ml"

  | 63 ->
# 662 "src/kernel_internals/parsing/clexer.mll"
              ( LBRACKET )
# 2325 "src/kernel_internals/parsing/clexer.ml"

  | 64 ->
# 663 "src/kernel_internals/parsing/clexer.mll"
              ( RBRACKET )
# 2330 "src/kernel_internals/parsing/clexer.ml"

  | 65 ->
# 664 "src/kernel_internals/parsing/clexer.mll"
              ( LBRACKET )
# 2335 "src/kernel_internals/parsing/clexer.ml"

  | 66 ->
# 665 "src/kernel_internals/parsing/clexer.mll"
              ( RBRACKET )
# 2340 "src/kernel_internals/parsing/clexer.ml"

  | 67 ->
# 666 "src/kernel_internals/parsing/clexer.mll"
              ( LPAREN (currentLoc ()) )
# 2345 "src/kernel_internals/parsing/clexer.ml"

  | 68 ->
# 667 "src/kernel_internals/parsing/clexer.mll"
              ( RPAREN )
# 2350 "src/kernel_internals/parsing/clexer.ml"

  | 69 ->
# 668 "src/kernel_internals/parsing/clexer.mll"
              ( SEMICOLON (currentLoc ()) )
# 2355 "src/kernel_internals/parsing/clexer.ml"

  | 70 ->
# 669 "src/kernel_internals/parsing/clexer.mll"
              ( COMMA )
# 2360 "src/kernel_internals/parsing/clexer.ml"

  | 71 ->
# 670 "src/kernel_internals/parsing/clexer.mll"
              ( DOT )
# 2365 "src/kernel_internals/parsing/clexer.ml"

  | 72 ->
# 671 "src/kernel_internals/parsing/clexer.mll"
              ( SIZEOF (currentLoc ()) )
# 2370 "src/kernel_internals/parsing/clexer.ml"

  | 73 ->
# 672 "src/kernel_internals/parsing/clexer.mll"
              ( ASM (currentLoc ()) )
# 2375 "src/kernel_internals/parsing/clexer.ml"

  | 74 ->
# 675 "src/kernel_internals/parsing/clexer.mll"
               ( let _ = matchingpars 0 lexbuf in initial lexbuf )
# 2380 "src/kernel_internals/parsing/clexer.ml"

  | 75 ->
# 679 "src/kernel_internals/parsing/clexer.mll"
                    ( initial lexbuf )
# 2385 "src/kernel_internals/parsing/clexer.ml"

  | 76 ->
# 681 "src/kernel_internals/parsing/clexer.mll"
          ( scan_ident (Lexing.lexeme lexbuf) )
# 2390 "src/kernel_internals/parsing/clexer.ml"

  | 77 ->
# 684 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_oneline_ghost()
    then (exit_oneline_ghost () ; RGHOST)
    else EOF
    )
# 2399 "src/kernel_internals/parsing/clexer.ml"

  | 78 ->
let
# 690 "src/kernel_internals/parsing/clexer.mll"
         c
# 2405 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 691 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_ghost_code() && c = '@' then initial lexbuf
    else parse_error "Invalid symbol"
    )
# 2412 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_initial_rec lexbuf __ocaml_lex_state

and might_end_ghost lexbuf =
   __ocaml_lex_might_end_ghost_rec lexbuf 183
and __ocaml_lex_might_end_ghost_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 698 "src/kernel_internals/parsing/clexer.mll"
        ( exit_ghost_code() ; RGHOST )
# 2424 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 699 "src/kernel_internals/parsing/clexer.mll"
        ( STAR (currentLoc()) )
# 2429 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_might_end_ghost_rec lexbuf __ocaml_lex_state

and comment buffer lexbuf =
   __ocaml_lex_comment_rec buffer lexbuf 185
and __ocaml_lex_comment_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 703 "src/kernel_internals/parsing/clexer.mll"
         (  )
# 2441 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 704 "src/kernel_internals/parsing/clexer.mll"
         ( parse_error "Unterminated C comment" )
# 2446 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 705 "src/kernel_internals/parsing/clexer.mll"
         ( lex_comment comment buffer lexbuf )
# 2451 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec buffer lexbuf __ocaml_lex_state

and onelinecomment buffer lexbuf =
   __ocaml_lex_onelinecomment_rec buffer lexbuf 190
and __ocaml_lex_onelinecomment_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 710 "src/kernel_internals/parsing/clexer.mll"
    (
    (* end of multiline comment *)
    if is_ghost_code ()
    then lexbuf.Lexing.lex_curr_pos <- lexbuf.Lexing.lex_curr_pos - 2
    else lex_comment onelinecomment buffer lexbuf
    )
# 2468 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 716 "src/kernel_internals/parsing/clexer.mll"
               (  )
# 2473 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 717 "src/kernel_internals/parsing/clexer.mll"
               ( lex_comment onelinecomment buffer lexbuf )
# 2478 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_onelinecomment_rec buffer lexbuf __ocaml_lex_state

and matchingpars parsopen lexbuf =
   __ocaml_lex_matchingpars_rec parsopen lexbuf 195
and __ocaml_lex_matchingpars_rec parsopen lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 721 "src/kernel_internals/parsing/clexer.mll"
          ( E.newline (); matchingpars parsopen lexbuf )
# 2490 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 722 "src/kernel_internals/parsing/clexer.mll"
          ( matchingpars parsopen lexbuf )
# 2495 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 723 "src/kernel_internals/parsing/clexer.mll"
          ( matchingpars (parsopen + 1) lexbuf )
# 2500 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 724 "src/kernel_internals/parsing/clexer.mll"
          ( if parsopen > 1 then matchingpars (parsopen - 1) lexbuf )
# 2505 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 725 "src/kernel_internals/parsing/clexer.mll"
          ( do_lex_comment comment lexbuf ; matchingpars parsopen lexbuf )
# 2510 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 726 "src/kernel_internals/parsing/clexer.mll"
          ( let _ = str lexbuf in matchingpars parsopen lexbuf )
# 2515 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 727 "src/kernel_internals/parsing/clexer.mll"
          ( matchingpars parsopen lexbuf )
# 2520 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_matchingpars_rec parsopen lexbuf __ocaml_lex_state

and hash lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1); __ocaml_lex_hash_rec lexbuf 204
and __ocaml_lex_hash_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 732 "src/kernel_internals/parsing/clexer.mll"
         ( E.newline (); initial lexbuf)
# 2532 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 733 "src/kernel_internals/parsing/clexer.mll"
          ( hash lexbuf)
# 2537 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 737 "src/kernel_internals/parsing/clexer.mll"
    (
    let s = Lexing.lexeme lexbuf in
    let msg () = Kernel.warning "Bad line number in preprocessed file: %s" s in
    let lineno = try int_of_string s with Failure _ -> msg () ; -1 in
    E.setCurrentLine (lineno - 1) ;
    (* A file name may follow *)
    file lexbuf
    )
# 2549 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 747 "src/kernel_internals/parsing/clexer.mll"
           ( hash lexbuf )
# 2554 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
let
# 751 "src/kernel_internals/parsing/clexer.mll"
                                       pragmaName
# 2560 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 752 "src/kernel_internals/parsing/clexer.mll"
    (
    let here = currentLoc () in
    PRAGMA_LINE (pragmaName ^ pragma lexbuf, here)
    )
# 2567 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 757 "src/kernel_internals/parsing/clexer.mll"
              ( pragmaLine := true ; PRAGMA (currentLoc ()) )
# 2572 "src/kernel_internals/parsing/clexer.ml"

  | 6 ->
# 758 "src/kernel_internals/parsing/clexer.mll"
              ( endline lexbuf )
# 2577 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_hash_rec lexbuf __ocaml_lex_state

and file lexbuf =
   __ocaml_lex_file_rec lexbuf 311
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 762 "src/kernel_internals/parsing/clexer.mll"
          ( E.newline () ; initial lexbuf )
# 2589 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 763 "src/kernel_internals/parsing/clexer.mll"
          ( file lexbuf )
# 2594 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 767 "src/kernel_internals/parsing/clexer.mll"
                                 d
# 2600 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -3) in
# 768 "src/kernel_internals/parsing/clexer.mll"
    (
    E.setCurrentWorkingDirectory d ;
    endline lexbuf
    )
# 2607 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 773 "src/kernel_internals/parsing/clexer.mll"
                                          f
# 2613 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 774 "src/kernel_internals/parsing/clexer.mll"
    (
    let unescape = Str.regexp_string "\\\"" in
    let f = Str.global_replace unescape "\"" f in
    E.setCurrentFile f ;
    endline lexbuf
    )
# 2622 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 781 "src/kernel_internals/parsing/clexer.mll"
      ( endline lexbuf )
# 2627 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
   __ocaml_lex_endline_rec lexbuf 325
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 785 "src/kernel_internals/parsing/clexer.mll"
          ( E.newline () ; initial lexbuf )
# 2639 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 786 "src/kernel_internals/parsing/clexer.mll"
          ( EOF )
# 2644 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 787 "src/kernel_internals/parsing/clexer.mll"
          ( endline lexbuf )
# 2649 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and pragma lexbuf =
   __ocaml_lex_pragma_rec lexbuf 329
and __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 791 "src/kernel_internals/parsing/clexer.mll"
          ( E.newline () ; "" )
# 2661 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 792 "src/kernel_internals/parsing/clexer.mll"
          ( let cur = Lexing.lexeme lexbuf in cur ^ (pragma lexbuf) )
# 2666 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_pragma_rec lexbuf __ocaml_lex_state

and str lexbuf =
   __ocaml_lex_str_rec lexbuf 332
and __ocaml_lex_str_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 797 "src/kernel_internals/parsing/clexer.mll"
                ( [] )
# 2678 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 798 "src/kernel_internals/parsing/clexer.mll"
                ( lex_hex_escape str lexbuf )
# 2683 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 799 "src/kernel_internals/parsing/clexer.mll"
                ( lex_oct_escape str lexbuf )
# 2688 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 800 "src/kernel_internals/parsing/clexer.mll"
                ( lex_simple_escape str lexbuf )
# 2693 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 801 "src/kernel_internals/parsing/clexer.mll"
                ( parse_error "unterminated string" )
# 2698 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 802 "src/kernel_internals/parsing/clexer.mll"
                ( lex_unescaped str lexbuf )
# 2703 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_str_rec lexbuf __ocaml_lex_state

and chr lexbuf =
   __ocaml_lex_chr_rec lexbuf 343
and __ocaml_lex_chr_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 806 "src/kernel_internals/parsing/clexer.mll"
                ( [] )
# 2715 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 807 "src/kernel_internals/parsing/clexer.mll"
                ( lex_hex_escape chr lexbuf )
# 2720 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 808 "src/kernel_internals/parsing/clexer.mll"
                ( lex_oct_escape chr lexbuf )
# 2725 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 809 "src/kernel_internals/parsing/clexer.mll"
                ( lex_simple_escape chr lexbuf )
# 2730 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 810 "src/kernel_internals/parsing/clexer.mll"
                ( parse_error "unterminated char" )
# 2735 "src/kernel_internals/parsing/clexer.ml"

  | 5 ->
# 811 "src/kernel_internals/parsing/clexer.mll"
                ( lex_unescaped chr lexbuf )
# 2740 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_chr_rec lexbuf __ocaml_lex_state

and annot_first_token lexbuf =
   __ocaml_lex_annot_first_token_rec lexbuf 354
and __ocaml_lex_annot_first_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 815 "src/kernel_internals/parsing/clexer.mll"
                                                     comments
# 2753 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 5) (lexbuf.Lexing.lex_curr_pos + -4) in
# 816 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_oneline_ghost () then parse_error "nested ghost code" ;
    Buffer.clear buf ;
    let loc = currentLoc () in
    do_ghost_else_comments true comments ;
    enter_ghost_code () ;
    LGHOST_ELSE (loc)
    )
# 2764 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 826 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_oneline_ghost () then parse_error "nested ghost code" ;
    Buffer.clear buf ;
    enter_ghost_code () ;
    LGHOST
    )
# 2774 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 833 "src/kernel_internals/parsing/clexer.mll"
                         c
# 2780 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 833 "src/kernel_internals/parsing/clexer.mll"
                           ( Buffer.add_char buf c ; annot_first_token lexbuf )
# 2784 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 834 "src/kernel_internals/parsing/clexer.mll"
         ( E.newline() ; Buffer.add_char buf '\n' ; annot_first_token lexbuf )
# 2789 "src/kernel_internals/parsing/clexer.ml"

  | 4 ->
# 835 "src/kernel_internals/parsing/clexer.mll"
         ( annot_token lexbuf )
# 2794 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_first_token_rec lexbuf __ocaml_lex_state

and annot_token lexbuf =
   __ocaml_lex_annot_token_rec lexbuf 380
and __ocaml_lex_annot_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 840 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_ghost_annot ()
    then begin
      let loc = (fst (get_ghost_annot_start()), snd (currentLoc())) in
      parse_error ~loc "Ghost multi-line annotation not terminated"
    end;
    let s = Buffer.contents buf in
    make_annot ~one_line:false initial lexbuf s
    )
# 2814 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 850 "src/kernel_internals/parsing/clexer.mll"
         ( parse_error "Unterminated annotation" )
# 2819 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
# 851 "src/kernel_internals/parsing/clexer.mll"
         ( E.newline() ; Buffer.add_char buf '\n' ; annot_token lexbuf )
# 2824 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
let
# 852 "src/kernel_internals/parsing/clexer.mll"
         c
# 2830 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 853 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_ghost_annot () && c = !annot_char
    then might_end_ghost_annot lexbuf
    else (Buffer.add_char buf c ; annot_token lexbuf)
    )
# 2838 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_token_rec lexbuf __ocaml_lex_state

and might_end_ghost_annot lexbuf =
   __ocaml_lex_might_end_ghost_annot_rec lexbuf 386
and __ocaml_lex_might_end_ghost_annot_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 861 "src/kernel_internals/parsing/clexer.mll"
        ( exit_ghost_annot ();
          let s = Buffer.contents buf in
          make_annot ~one_line:false initial lexbuf s )
# 2852 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 864 "src/kernel_internals/parsing/clexer.mll"
       ( Buffer.add_char buf !annot_char; annot_token lexbuf )
# 2857 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_might_end_ghost_annot_rec lexbuf __ocaml_lex_state

and annot_one_line lexbuf =
   __ocaml_lex_annot_one_line_rec lexbuf 388
and __ocaml_lex_annot_one_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 868 "src/kernel_internals/parsing/clexer.mll"
                                comments
# 2870 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 5) (lexbuf.Lexing.lex_curr_pos + -4) in
# 869 "src/kernel_internals/parsing/clexer.mll"
    (
    do_ghost_else_comments false comments ;
    if is_oneline_ghost () then parse_error "nested ghost code" ;
    enter_oneline_ghost () ;
    LGHOST_ELSE (currentLoc ())
    )
# 2879 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 877 "src/kernel_internals/parsing/clexer.mll"
    (
    if is_oneline_ghost () then parse_error "nested ghost code" ;
    enter_oneline_ghost () ;
    LGHOST
    )
# 2888 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 883 "src/kernel_internals/parsing/clexer.mll"
                         c
# 2894 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 883 "src/kernel_internals/parsing/clexer.mll"
                           ( Buffer.add_char buf c ; annot_one_line lexbuf )
# 2898 "src/kernel_internals/parsing/clexer.ml"

  | 3 ->
# 884 "src/kernel_internals/parsing/clexer.mll"
       ( annot_one_line_logic lexbuf )
# 2903 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_one_line_rec lexbuf __ocaml_lex_state

and annot_one_line_logic lexbuf =
   __ocaml_lex_annot_one_line_logic_rec lexbuf 401
and __ocaml_lex_annot_one_line_logic_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 888 "src/kernel_internals/parsing/clexer.mll"
            ( make_annot ~one_line:true initial lexbuf (Buffer.contents buf) )
# 2915 "src/kernel_internals/parsing/clexer.ml"

  | 1 ->
# 889 "src/kernel_internals/parsing/clexer.mll"
            ( parse_error "Invalid C file: should end with a newline" )
# 2920 "src/kernel_internals/parsing/clexer.ml"

  | 2 ->
let
# 890 "src/kernel_internals/parsing/clexer.mll"
         c
# 2926 "src/kernel_internals/parsing/clexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 890 "src/kernel_internals/parsing/clexer.mll"
            ( Buffer.add_char buf c ; annot_one_line_logic lexbuf )
# 2930 "src/kernel_internals/parsing/clexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_annot_one_line_logic_rec lexbuf __ocaml_lex_state

;;

# 894 "src/kernel_internals/parsing/clexer.mll"
 
  (* Catch the exceptions raised by the lexer itself *)
  let initial lexbuf =
    try initial lexbuf
    with Failure _ -> raise Parsing.Parse_error

# 2944 "src/kernel_internals/parsing/clexer.ml"
