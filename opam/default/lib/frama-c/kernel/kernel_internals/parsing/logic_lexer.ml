# 25 "src/kernel_internals/parsing/logic_lexer.mll"
 

  open Logic_parser
  open Lexing

  type state = Normal | Test

  let state_stack = Stack.create ()

  let () = Stack.push Normal state_stack

  let get_state () = try Stack.top state_stack with Stack.Empty -> Normal

  let pop_state () = try ignore (Stack.pop state_stack) with Stack.Empty -> ()

  exception Error of (int * int) * string

  let ext_acsl_spec = ref false

  let loc lexbuf = (lexeme_start lexbuf, lexeme_end lexbuf)

  let lex_error lexbuf s =
    raise (Error (loc lexbuf, "lexical error, " ^ s))

  let find_utf8 =
    let h = Hashtbl.create 97 in
    List.iter (fun (i,t) -> Hashtbl.add h i t)
      [ Utf8_logic.forall, FORALL;
        Utf8_logic.exists, EXISTS;
        Utf8_logic.eq, EQ;
        Utf8_logic.neq, NE;
        Utf8_logic.le, LE;
        Utf8_logic.ge, GE;
        Utf8_logic.implies,IMPLIES;
        Utf8_logic.iff, IFF;
        Utf8_logic.conj, AND;
        Utf8_logic.disj, OR;
        Utf8_logic.neg, NOT;
        Utf8_logic.x_or, HATHAT;
        Utf8_logic.minus, MINUS;
        Utf8_logic.boolean, BOOLEAN;
        Utf8_logic.integer, INTEGER;
        Utf8_logic.real, REAL;
        Utf8_logic.inset, IN;
        Utf8_logic.pi, PI;
      ];

    fun s -> try Hashtbl.find h s
    with Not_found -> IDENTIFIER s

  let all_digits s =
    let is_digit =
      function
      | '0'..'9' | 'a'..'f' | 'A'..'F' -> ()
      | _ -> raise Exit
    in
    try String.iter is_digit s; true with Exit -> false

  let is_ucn s =
    if String.length s <= 2 || s.[0] <> '\\' then false else begin
      match s.[1] with
      | 'U' -> String.length s = 10 && all_digits (String.sub s 2 8)
      | 'u' -> String.length s = 6 && all_digits (String.sub s 2 4)
      | _ -> false
    end

  let int_of_digit chr =
    match chr with
    | '0'..'9' -> (Char.code chr) - (Char.code '0')
    | 'a'..'f' -> (Char.code chr) - (Char.code 'a') + 10
    | 'A'..'F' -> (Char.code chr) - (Char.code 'A') + 10
    | _ -> assert false

  (* assumes is_ucn s *)
  let unicode_char s =
    let code = ref 0 in
    let add_digit c = code := 16 * !code + int_of_digit c in
    String.iter add_digit (String.sub s 2 (String.length s - 2));
    let c = Utf8_logic.from_unichar !code in
    find_utf8 c

  let extension ~plugin name =
    try
      (* extension_from will raise Not_found or fatal, if extension does not
         exist or if there are ambiguities between extension names and the
         plugin is not provided. *)
      let plugin = Logic_env.extension_from ?plugin name in
      match Logic_env.extension_category ~plugin name with
      | Cil_types.Ext_contract -> Some (EXT_CONTRACT (name, plugin))
      | Cil_types.Ext_global ->
          if Logic_env.is_extension_block ~plugin name
          then Some (EXT_GLOBAL_BLOCK (name, plugin))
          else Some (EXT_GLOBAL (name, plugin))
      | Cil_types.Ext_code_annot _ -> Some (EXT_CODE_ANNOT (name, plugin))
    with Not_found ->
      (* We need to distinguish here which token was parsed (with or without
         plugin) to help the parser (cf. ext_loader rule). *)
      match plugin with
      | None ->
        begin
          try
            (* importer_from will raise Not_found or fatal, if extension does not
              exist or if there are ambiguities between extension names and the
              plugin is not provided. *)
            let plugin = Logic_env.importer_from name in
            Some (EXT_LOADER (name, plugin))
          with Not_found -> None
        end
      | Some plugin ->
        if Logic_env.is_importer ~plugin name then
          Some (EXT_LOADER_PLUGIN (name, plugin))
        else None
  [@@alert "-acsl_extension_from"]

  let identifier, is_acsl_keyword =
    let all_kw = Hashtbl.create 37 in
    let type_kw = Hashtbl.create 3 in
    let ext_acsl_kw kw s _ = if !ext_acsl_spec then kw else IDENTIFIER s in
    List.iter
      (fun (i,t) -> Hashtbl.add all_kw i t;)
      [
        "admit", (fun _ -> ADMIT);
        "allocates", (fun _ -> ALLOCATES);
        "assert", (fun _ -> ASSERT);
        "assigns", (fun _ -> ASSIGNS);
        "assumes", (fun _ -> ASSUMES);
        "at", ext_acsl_kw EXT_SPEC_AT "at";
        "axiom", (fun _ -> AXIOM);
        "axiomatic", (fun _ -> AXIOMATIC);
        "behavior", (fun _ -> BEHAVIOR);
        "behaviors", (fun _ -> BEHAVIORS);
        "_Bool", (fun _ -> BOOL);
        "breaks", (fun _ -> BREAKS);
        "case", (fun _ -> CASE);
        "char", (fun _ -> CHAR);
        "check", (fun _ -> CHECK);
        "complete", (fun _ -> COMPLETE);
        "const", (fun _ -> CONST);
        "continues", (fun _ -> CONTINUES);
        "contract", ext_acsl_kw EXT_SPEC_CONTRACT "contract";
        "decreases", (fun _ -> DECREASES);
        "disjoint", (fun _ -> DISJOINT);
        "double", (fun _ -> DOUBLE);
        "else", (fun _ -> ELSE);
        "ensures", (fun _ -> ENSURES);
        "enum", (fun _ -> ENUM);
        "exits", (fun _ -> EXITS);
        "frees", (fun _ -> FREES);
        "function", ext_acsl_kw EXT_SPEC_FUNCTION "function";
        "float", (fun _ -> FLOAT);
        "for", (fun _ -> FOR);
        "global", (fun _ -> GLOBAL);
        "if", (fun _ -> IF);
        "import", (fun _ -> IMPORT);
        "inductive", (fun _ -> INDUCTIVE);
        "include", ext_acsl_kw EXT_SPEC_INCLUDE "include";
        "int", (fun _ -> INT);
        "invariant", (fun _ -> INVARIANT);
        "label", (fun _ -> LABEL);
        "lemma", (fun _ -> LEMMA);
        "let", ext_acsl_kw EXT_SPEC_LET "let";
        (* ACSL extension for external spec file *)
        "logic", (fun _ -> LOGIC);
        "long", (fun _ -> LONG);
        "loop", (fun _ -> LOOP);
        "model", (fun _ -> MODEL);
        (* ACSL extension for model fields *)
        "module", (fun _ -> if !ext_acsl_spec then EXT_SPEC_MODULE else MODULE);
        (* ACSL extension for external spec file *)
        "predicate", (fun _ -> PREDICATE);
        "reads", (fun _ -> READS);
        "requires", (fun _ -> REQUIRES);
        "returns", (fun _ -> RETURNS);
        "short", (fun _ -> SHORT);
        "signed", (fun _ -> SIGNED);
        "sizeof", (fun _ -> SIZEOF);
        "struct", (fun _ -> STRUCT);
        "terminates", (fun _ -> TERMINATES);
        "type", (fun _ -> TYPE);
        "union", (fun _ -> UNION);
        "unsigned", (fun _ -> UNSIGNED);
        "variant", (fun _ -> VARIANT);
        "void", (fun _ -> VOID);
        "volatile", (fun _ -> VOLATILE);
        "writes", (fun _ -> WRITES);
        "__FC_FILENAME__",
        (fun loc ->
           let filename =
             Filepath.(Normalized.to_pretty_string (fst loc).pos_path)
           in
           STRING_LITERAL (false,filename));
      ];
    List.iter (fun (x, y) -> Hashtbl.add type_kw x y)
      ["integer", INTEGER; "real", REAL; "boolean", BOOLEAN; ];
    (fun ~plugin s loc ->
      try
        (Hashtbl.find all_kw s)
        loc
      with Not_found ->
        match extension ~plugin s with
        | None ->
          if Logic_env.typename_status s then TYPENAME s
          else
            (try Hashtbl.find type_kw s
             with Not_found -> IDENTIFIER s)
        | Some lex -> lex
    ),
    (fun s -> Hashtbl.mem all_kw s || Hashtbl.mem type_kw s)

  let bs_identifier =
    let h = Hashtbl.create 97 in
    List.iter (fun (i,t) -> Hashtbl.add h i t)
      [
        "\\allocation", ALLOCATION;
        "\\allocable", ALLOCABLE;
        "\\automatic", AUTOMATIC;
        "\\as", AS;
        "\\at", AT;
        "\\base_addr", BASE_ADDR;
        "\\block_length", BLOCK_LENGTH;
        "\\dynamic", DYNAMIC;
        "\\empty", EMPTY;
        "\\exists", EXISTS;
        "\\false", FALSE;
        "\\forall", FORALL;
        "\\freeable", FREEABLE;
        "\\fresh", FRESH;
        "\\from", FROM;
        "\\ghost", BSGHOST;
        "\\initialized", INITIALIZED;
        "\\dangling", DANGLING;
        "\\in", IN;
        "\\inter", INTER;
        "\\lambda", LAMBDA;
        "\\let", LET;
        "\\nothing", NOTHING;
        "\\null", NULL;
        "\\offset", OFFSET;
        "\\old", OLD;
        "\\pi", PI;
        "\\register", REGISTER;
        "\\result", RESULT;
        "\\separated", SEPARATED;
        "\\static", STATIC;
        "\\true", TRUE;
        "\\type", BSTYPE;
        "\\typeof", TYPEOF;
        "\\unallocated", UNALLOCATED;
        "\\union", BSUNION;
        "\\object_pointer", OBJECT_POINTER;
        "\\valid", VALID;
        "\\valid_read", VALID_READ;
        "\\valid_index", VALID_INDEX;
        "\\valid_range", VALID_RANGE;
        "\\valid_function", VALID_FUNCTION;
        "\\with", WITH;
      ];
    fun lexbuf ->
      let s = lexeme lexbuf in
      if is_ucn s then unicode_char s else begin
        try Hashtbl.find h s with Not_found ->
          if Logic_env.typename_status s then TYPENAME s
          else IDENTIFIER s
      end

  let longident lexbuf =
    let s = lexeme lexbuf in LONGIDENT s

  (* Update lexer buffer. *)
  let update_line_pos lexbuf line =
    let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <-
      { pos with
	Lexing.pos_lnum = line;
	Lexing.pos_bol = pos.Lexing.pos_cnum;
      }

  let update_file_pos lexbuf file =
   let pos = lexbuf.Lexing.lex_curr_p in
    lexbuf.Lexing.lex_curr_p <- { pos with Lexing.pos_fname = file }

  let hack_merge_tokens current next =
    match (current,next) with
    | CHECK, REQUIRES -> true, CHECK_REQUIRES
    | CHECK, ENSURES -> true, CHECK_ENSURES
    | CHECK, EXITS -> true, CHECK_EXITS
    | CHECK, RETURNS -> true, CHECK_RETURNS
    | CHECK, BREAKS -> true, CHECK_BREAKS
    | CHECK, CONTINUES -> true, CHECK_CONTINUES
    | CHECK, LOOP -> true, CHECK_LOOP
    | CHECK, INVARIANT -> true, CHECK_INVARIANT
    | CHECK, LEMMA -> true, CHECK_LEMMA
    | ADMIT, REQUIRES -> true, ADMIT_REQUIRES
    | ADMIT, ENSURES -> true, ADMIT_ENSURES
    | ADMIT, EXITS -> true, ADMIT_EXITS
    | ADMIT, RETURNS -> true, ADMIT_RETURNS
    | ADMIT, BREAKS -> true, ADMIT_BREAKS
    | ADMIT, CONTINUES -> true, ADMIT_CONTINUES
    | ADMIT, LOOP -> true, ADMIT_LOOP
    | ADMIT, INVARIANT -> true, ADMIT_INVARIANT
    | ADMIT, LEMMA -> true, ADMIT_LEMMA
    | _ -> false, current

  let check_ext_plugin source plugin tok =
    match tok with
    | IDENTIFIER s ->
      if Plugin.is_present plugin then
        Kernel.warning ~once:true ~wkey:Kernel.wkey_extension_unknown ~source
          "Ignoring unregistered extension '%s' of plug-in %s" s plugin
      else
        Kernel.warning ~once:true ~wkey:Kernel.wkey_plugin_not_loaded ~source
          "Ignoring extension '%s' for unloaded plug-in %s" s plugin;
      IDENTIFIER_EXT s
    | EXT_CODE_ANNOT (s, _)
    | EXT_GLOBAL (s, _)
    | EXT_GLOBAL_BLOCK (s, _)
    | EXT_CONTRACT (s, _) ->
      if String.equal plugin "kernel" then
        Kernel.abort ~source
          "Extension '%s' from frama-c's kernel should not be used with the \
           syntax \\kernel::%s" s s;
      tok
    | _ -> raise Parsing.Parse_error

  let check_ext_importer source plugin tok =
    match tok with
    | IDENTIFIER s ->
      if Plugin.is_present plugin then
        Kernel.warning ~once:true ~wkey:Kernel.wkey_extension_unknown ~source
          "Ignoring unregistered module importer extension '%s' of plug-in %s"
          s plugin
      else
        Kernel.warning ~once:true ~wkey:Kernel.wkey_plugin_not_loaded ~source
          "Ignoring module importer extension '%s' for unloaded plug-in %s" s plugin;
      IDENTIFIER_LOADER s
    | EXT_LOADER_PLUGIN (s, _) ->
      if String.equal plugin "kernel" then
        Kernel.abort ~source
          "Module importer extension '%s' from frama-c's kernel should not be \
           used with the syntax \\kernel::%s" s s;
      tok
    | _ -> raise Parsing.Parse_error

# 346 "src/kernel_internals/parsing/logic_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\186\255\187\255\000\000\193\255\133\000\195\255\196\255\
    \197\255\198\255\197\000\206\255\208\255\166\000\215\255\203\000\
    \222\255\223\255\225\255\226\255\201\000\170\000\226\000\220\000\
    \223\000\205\000\234\255\001\001\223\000\004\001\252\000\034\001\
    \107\001\196\001\254\001\238\000\239\000\254\255\028\001\250\255\
    \089\001\252\255\253\255\213\255\251\255\073\002\229\000\131\002\
    \206\002\249\255\063\003\002\003\230\000\059\003\162\003\255\003\
    \083\004\173\004\245\255\091\001\051\004\238\255\235\255\092\001\
    \004\005\031\003\246\000\033\005\241\000\103\005\126\005\164\005\
    \053\003\234\005\029\001\071\005\016\006\202\005\051\006\063\003\
    \237\255\082\006\134\003\092\006\014\005\153\006\121\006\188\006\
    \043\005\030\001\032\001\033\001\219\006\229\006\236\255\249\006\
    \004\007\033\007\043\007\072\007\082\007\111\007\246\000\123\007\
    \152\007\162\007\191\007\217\255\233\000\233\255\190\255\009\001\
    \250\000\250\000\232\255\251\000\230\255\224\255\252\000\231\255\
    \229\255\191\255\228\255\199\255\220\255\211\255\189\255\202\255\
    \192\255\231\000\251\255\252\255\224\007\253\255\075\001\041\008\
    \064\008\188\001\254\255\250\007\251\255\210\000\240\007\254\255\
    \255\255\207\000\217\000\252\255\135\001\252\255\098\005\254\255\
    \255\255\253\255\154\005\226\005\003\006\133\001\253\255\254\255\
    \255\255\122\002\252\255\253\255\016\001\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\067\000\255\255\061\000\255\255\255\255\
    \255\255\255\255\051\000\255\255\255\255\045\000\255\255\034\000\
    \255\255\255\255\255\255\255\255\028\000\046\000\043\000\039\000\
    \050\000\055\000\255\255\069\000\036\000\069\000\015\000\015\000\
    \011\000\011\000\069\000\041\000\048\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\008\000\255\255\255\255\
    \007\000\255\255\255\255\255\255\255\255\255\255\255\255\009\000\
    \009\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \018\000\255\255\016\000\014\000\255\255\255\255\255\255\012\000\
    \255\255\255\255\012\000\255\255\255\255\255\255\018\000\255\255\
    \255\255\018\000\255\255\018\000\255\255\255\255\255\255\018\000\
    \255\255\013\000\013\000\014\000\018\000\255\255\255\255\255\255\
    \018\000\255\255\018\000\255\255\018\000\255\255\037\000\018\000\
    \255\255\018\000\255\255\255\255\054\000\255\255\255\255\255\255\
    \052\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\255\255\001\000\255\255\
    \000\000\001\000\255\255\255\255\255\255\004\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\255\255";
  Lexing.lex_default =
   "\003\000\000\000\000\000\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\050\000\255\255\060\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \040\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\050\000\060\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\060\000\060\000\000\000\000\000\050\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\130\000\000\000\000\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\000\000\140\000\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\149\000\000\000\154\000\000\000\
    \000\000\000\000\154\000\154\000\154\000\158\000\000\000\000\000\
    \000\000\162\000\000\000\000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\038\000\037\000\001\000\038\000\038\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \038\000\020\000\027\000\026\000\019\000\011\000\022\000\029\000\
    \009\000\008\000\035\000\014\000\018\000\023\000\028\000\036\000\
    \031\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\015\000\016\000\024\000\025\000\010\000\017\000\
    \038\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\033\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\005\000\034\000\004\000\013\000\032\000\
    \001\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\007\000\021\000\006\000\012\000\001\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
    \002\000\128\000\127\000\126\000\125\000\124\000\123\000\121\000\
    \120\000\118\000\108\000\255\255\111\000\102\000\255\255\103\000\
    \103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\039\000\117\000\110\000\112\000\044\000\040\000\047\000\
    \053\000\089\000\089\000\062\000\107\000\038\000\122\000\109\000\
    \038\000\038\000\064\000\255\255\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\115\000\113\000\
    \114\000\116\000\119\000\145\000\038\000\146\000\147\000\166\000\
    \000\000\065\000\066\000\132\000\000\000\000\000\000\000\000\000\
    \066\000\000\000\000\000\066\000\043\000\000\000\089\000\089\000\
    \064\000\066\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\038\000\063\000\000\000\000\000\
    \059\000\065\000\066\000\042\000\068\000\255\255\255\255\065\000\
    \066\000\074\000\090\000\066\000\090\000\091\000\066\000\000\000\
    \000\000\066\000\074\000\090\000\000\000\090\000\091\000\066\000\
    \000\000\000\000\069\000\137\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\000\000\068\000\000\000\000\000\065\000\
    \000\000\074\000\090\000\000\000\090\000\091\000\066\000\160\000\
    \151\000\152\000\074\000\090\000\151\000\090\000\091\000\066\000\
    \000\000\000\000\069\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\052\000\000\000\151\000\
    \000\000\150\000\000\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\050\000\131\000\
    \000\000\000\000\000\000\051\000\138\000\138\000\138\000\138\000\
    \138\000\138\000\138\000\138\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\052\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\
    \000\000\000\000\000\000\032\000\000\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\041\000\000\000\255\255\255\255\045\000\000\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\046\000\165\000\159\000\000\000\255\255\
    \000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\164\000\000\000\000\000\000\000\
    \045\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
    \000\000\000\000\048\000\000\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \049\000\000\000\000\000\000\000\255\255\000\000\000\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\255\255\000\000\000\000\000\000\048\000\000\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\255\255\093\000\000\000\093\000\000\000\000\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\000\000\000\000\000\000\000\000\000\000\059\000\000\000\
    \084\000\062\000\084\000\054\000\000\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\000\000\163\000\000\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\000\000\000\000\
    \000\000\000\000\055\000\063\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \000\000\000\000\000\000\057\000\000\000\057\000\057\000\057\000\
    \057\000\057\000\000\000\000\000\057\000\057\000\000\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\000\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\255\255\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\000\000\000\000\000\000\000\000\000\000\056\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\052\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\061\000\000\000\000\000\000\000\055\000\000\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\056\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\000\000\000\000\059\000\
    \000\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
    \000\000\000\000\056\000\000\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\057\000\000\000\
    \057\000\057\000\057\000\057\000\057\000\000\000\058\000\057\000\
    \057\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\000\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\094\000\255\255\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \080\000\095\000\080\000\000\000\000\000\000\000\000\000\064\000\
    \080\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\000\000\065\000\000\000\
    \080\000\095\000\080\000\255\255\000\000\091\000\255\255\000\000\
    \080\000\000\000\082\000\000\000\082\000\000\000\091\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\000\000\000\000\000\000\153\000\000\000\065\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\070\000\091\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \000\000\000\000\000\000\000\000\153\000\000\000\155\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\000\000\000\000\000\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\000\000\000\000\
    \000\000\000\000\073\000\000\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\000\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\255\255\000\000\000\000\255\255\000\000\
    \074\000\000\000\000\000\000\000\072\000\079\000\155\000\079\000\
    \000\000\074\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\156\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\000\000\255\255\000\000\000\000\255\255\
    \074\000\000\000\000\000\000\000\072\000\000\000\000\000\000\000\
    \000\000\074\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\000\000\153\000\000\000\000\000\
    \000\000\000\000\000\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\075\000\000\000\000\000\000\000\155\000\000\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\000\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\000\000\
    \000\000\000\000\075\000\000\000\000\000\000\000\000\000\155\000\
    \077\000\000\000\255\255\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\000\000\000\000\000\000\
    \000\000\076\000\076\000\076\000\076\000\076\000\076\000\080\000\
    \000\000\080\000\000\000\000\000\000\000\000\000\000\000\080\000\
    \077\000\000\000\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\080\000\080\000\
    \080\000\080\000\255\255\000\000\000\000\000\000\080\000\080\000\
    \080\000\000\000\080\000\000\000\088\000\000\000\088\000\000\000\
    \080\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\000\000\000\000\000\000\080\000\000\000\
    \080\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
    \080\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
    \080\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\086\000\000\000\000\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\000\000\000\000\
    \000\000\000\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \080\000\000\000\080\000\255\255\000\000\000\000\000\000\000\000\
    \080\000\086\000\000\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\080\000\
    \080\000\080\000\080\000\000\000\101\000\000\000\101\000\080\000\
    \080\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\000\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\000\000\080\000\
    \000\000\080\000\000\000\000\000\000\000\000\000\000\000\080\000\
    \080\000\097\000\080\000\000\000\099\000\000\000\099\000\000\000\
    \080\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\000\000\000\000\000\000\
    \080\000\097\000\080\000\000\000\000\000\000\000\000\000\080\000\
    \080\000\080\000\000\000\000\000\000\000\000\000\000\000\080\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\000\000\000\000\000\000\080\000\
    \000\000\080\000\000\000\000\000\000\000\000\000\080\000\080\000\
    \080\000\000\000\000\000\000\000\000\000\000\000\080\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\000\000\000\000\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\000\000\080\000\000\000\
    \080\000\000\000\000\000\000\000\000\000\000\000\080\000\080\000\
    \104\000\080\000\000\000\106\000\000\000\106\000\000\000\080\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\000\000\000\000\000\000\080\000\
    \104\000\080\000\000\000\000\000\000\000\000\000\080\000\080\000\
    \080\000\000\000\000\000\000\000\000\000\000\000\080\000\105\000\
    \105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\133\000\143\000\144\000\000\000\080\000\133\000\
    \080\000\000\000\000\000\000\000\000\000\000\000\080\000\000\000\
    \134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
    \000\000\000\000\143\000\000\000\000\000\000\000\000\000\133\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\142\000\142\000\000\000\000\000\000\000\000\000\
    \135\000\000\000\000\000\000\000\133\000\000\000\000\000\000\000\
    \000\000\133\000\133\000\000\000\000\000\000\000\133\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\
    \000\000\000\000\133\000\000\000\133\000\000\000\133\000\000\000\
    \135\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\000\000\000\000\000\000\141\000\000\000\
    \000\000\000\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\136\000\136\000\136\000\136\000\136\000\136\000\000\000\
    \000\000\000\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\136\000\136\000\136\000\136\000\136\000\136\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
    \000\000\005\000\010\000\010\000\013\000\015\000\020\000\021\000\
    \022\000\023\000\025\000\027\000\024\000\028\000\029\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\036\000\023\000\024\000\024\000\035\000\036\000\046\000\
    \052\000\068\000\068\000\027\000\102\000\038\000\021\000\108\000\
    \038\000\038\000\030\000\029\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\111\000\112\000\
    \113\000\115\000\118\000\141\000\038\000\145\000\146\000\164\000\
    \255\255\030\000\066\000\129\000\255\255\255\255\255\255\255\255\
    \030\000\255\255\255\255\066\000\035\000\255\255\089\000\089\000\
    \031\000\030\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\038\000\027\000\255\255\255\255\
    \029\000\030\000\066\000\040\000\031\000\059\000\063\000\031\000\
    \030\000\074\000\089\000\066\000\090\000\091\000\031\000\255\255\
    \255\255\030\000\074\000\089\000\255\255\090\000\091\000\031\000\
    \255\255\255\255\031\000\134\000\134\000\134\000\134\000\134\000\
    \134\000\134\000\134\000\255\255\031\000\255\255\255\255\031\000\
    \255\255\074\000\089\000\255\255\090\000\091\000\031\000\157\000\
    \148\000\148\000\074\000\089\000\148\000\090\000\091\000\031\000\
    \255\255\255\255\031\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\148\000\
    \255\255\148\000\255\255\255\255\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\255\255\255\255\
    \255\255\255\255\032\000\255\255\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\033\000\129\000\
    \255\255\255\255\255\255\033\000\137\000\137\000\137\000\137\000\
    \137\000\137\000\137\000\137\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\027\000\255\255\255\255\029\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\255\255\
    \255\255\255\255\255\255\033\000\255\255\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\040\000\255\255\059\000\063\000\034\000\255\255\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\161\000\157\000\255\255\148\000\
    \255\255\255\255\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\161\000\255\255\255\255\255\255\
    \045\000\255\255\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\255\255\255\255\
    \255\255\255\255\047\000\255\255\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\255\255\255\255\255\255\051\000\255\255\255\255\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\051\000\255\255\255\255\255\255\048\000\255\255\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\050\000\065\000\255\255\065\000\255\255\255\255\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\255\255\255\255\255\255\255\255\255\255\051\000\255\255\
    \072\000\050\000\072\000\053\000\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\255\255\161\000\255\255\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\255\255\255\255\
    \255\255\255\255\053\000\050\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \255\255\255\255\255\255\054\000\255\255\054\000\054\000\054\000\
    \054\000\054\000\255\255\255\255\054\000\054\000\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\255\255\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\051\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\255\255\255\255\255\255\255\255\255\255\055\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\255\255\255\255\255\255\060\000\255\255\050\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\060\000\255\255\255\255\255\255\055\000\255\255\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\056\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\255\255\255\255\060\000\
    \255\255\255\255\255\255\255\255\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \255\255\255\255\056\000\255\255\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\057\000\255\255\
    \057\000\057\000\057\000\057\000\057\000\255\255\057\000\057\000\
    \057\000\255\255\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \255\255\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\255\255\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\064\000\060\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \064\000\064\000\064\000\255\255\255\255\255\255\255\255\067\000\
    \064\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\088\000\088\000\088\000\088\000\088\000\
    \088\000\088\000\088\000\088\000\088\000\255\255\067\000\255\255\
    \064\000\064\000\064\000\150\000\255\255\067\000\150\000\255\255\
    \064\000\255\255\075\000\255\255\075\000\255\255\067\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\255\255\255\255\255\255\150\000\255\255\067\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\067\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\069\000\067\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\255\255\255\255\154\000\255\255\255\255\154\000\255\255\
    \069\000\069\000\069\000\069\000\069\000\069\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \255\255\255\255\255\255\255\255\154\000\255\255\150\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\255\255\255\255\255\255\
    \069\000\069\000\069\000\069\000\069\000\069\000\255\255\255\255\
    \255\255\255\255\071\000\255\255\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\255\255\070\000\
    \070\000\070\000\070\000\070\000\070\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\155\000\255\255\255\255\155\000\255\255\
    \071\000\255\255\255\255\255\255\071\000\077\000\154\000\077\000\
    \255\255\071\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\155\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\255\255\156\000\255\255\255\255\156\000\
    \071\000\255\255\255\255\255\255\071\000\255\255\255\255\255\255\
    \255\255\071\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\255\255\156\000\255\255\255\255\
    \255\255\255\255\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\073\000\255\255\255\255\255\255\155\000\255\255\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\076\000\076\000\076\000\076\000\076\000\076\000\255\255\
    \255\255\255\255\073\000\255\255\255\255\255\255\255\255\156\000\
    \076\000\255\255\150\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\255\255\255\255\255\255\
    \255\255\076\000\076\000\076\000\076\000\076\000\076\000\078\000\
    \255\255\078\000\255\255\255\255\255\255\255\255\255\255\078\000\
    \076\000\255\255\081\000\081\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\081\000\078\000\
    \081\000\078\000\154\000\255\255\255\255\255\255\081\000\078\000\
    \083\000\255\255\083\000\255\255\086\000\255\255\086\000\255\255\
    \083\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\255\255\255\255\255\255\081\000\255\255\
    \081\000\255\255\255\255\255\255\255\255\255\255\081\000\255\255\
    \083\000\255\255\083\000\255\255\255\255\255\255\255\255\255\255\
    \083\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\085\000\085\000\085\000\085\000\085\000\085\000\
    \255\255\255\255\155\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\085\000\255\255\255\255\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\255\255\255\255\
    \255\255\255\255\085\000\085\000\085\000\085\000\085\000\085\000\
    \087\000\255\255\087\000\156\000\255\255\255\255\255\255\255\255\
    \087\000\085\000\255\255\092\000\092\000\092\000\092\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\093\000\093\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\092\000\
    \087\000\092\000\087\000\255\255\095\000\255\255\095\000\092\000\
    \087\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\255\255\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\255\255\092\000\
    \255\255\092\000\255\255\255\255\255\255\255\255\255\255\092\000\
    \096\000\096\000\096\000\255\255\097\000\255\255\097\000\255\255\
    \096\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
    \097\000\097\000\097\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\255\255\255\255\255\255\
    \096\000\096\000\096\000\255\255\255\255\255\255\255\255\098\000\
    \096\000\098\000\255\255\255\255\255\255\255\255\255\255\098\000\
    \099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\099\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\255\255\255\255\255\255\098\000\
    \255\255\098\000\255\255\255\255\255\255\255\255\100\000\098\000\
    \100\000\255\255\255\255\255\255\255\255\255\255\100\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\255\255\255\255\103\000\103\000\103\000\103\000\103\000\
    \103\000\103\000\103\000\103\000\103\000\255\255\100\000\255\255\
    \100\000\255\255\255\255\255\255\255\255\255\255\100\000\103\000\
    \103\000\103\000\255\255\104\000\255\255\104\000\255\255\103\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\255\255\255\255\255\255\103\000\
    \103\000\103\000\255\255\255\255\255\255\255\255\105\000\103\000\
    \105\000\255\255\255\255\255\255\255\255\255\255\105\000\106\000\
    \106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
    \106\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\132\000\139\000\139\000\255\255\105\000\132\000\
    \105\000\255\255\255\255\255\255\255\255\255\255\105\000\255\255\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\132\000\
    \255\255\255\255\139\000\255\255\255\255\255\255\255\255\132\000\
    \142\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
    \142\000\142\000\139\000\139\000\139\000\139\000\139\000\139\000\
    \139\000\139\000\139\000\139\000\255\255\255\255\255\255\255\255\
    \132\000\255\255\255\255\255\255\132\000\255\255\255\255\255\255\
    \255\255\132\000\132\000\255\255\255\255\255\255\132\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\132\000\255\255\
    \255\255\255\255\132\000\255\255\132\000\255\255\132\000\255\255\
    \132\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
    \135\000\135\000\135\000\255\255\255\255\255\255\139\000\255\255\
    \255\255\255\255\135\000\135\000\135\000\135\000\135\000\135\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\136\000\136\000\136\000\136\000\136\000\136\000\255\255\
    \255\255\255\255\135\000\135\000\135\000\135\000\135\000\135\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\136\000\136\000\136\000\136\000\136\000\136\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\139\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\075\000\000\000\000\000\
    \000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\018\000\021\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\001\000\000\000\000\000\000\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\000\000\000\000\000\000\000\000\007\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\000\000\000\000\
    \000\000\000\000\007\000\000\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\033\000\255\255\255\255\255\255\000\000\
    \033\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\255\255\255\255\255\255\255\255\034\000\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\255\255\255\255\
    \255\255\255\255\045\000\255\255\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_code =
   "\255\001\255\255\002\255\255\004\255\003\255\255\000\004\255\000\
    \003\255\000\002\255\000\001\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 5 (-1); __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 405 "src/kernel_internals/parsing/logic_lexer.mll"
           ( token lexbuf )
# 1174 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 406 "src/kernel_internals/parsing/logic_lexer.mll"
         ( Lexing.new_line lexbuf; token lexbuf )
# 1179 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 407 "src/kernel_internals/parsing/logic_lexer.mll"
                      ( Lexing.new_line lexbuf; token lexbuf )
# 1184 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 408 "src/kernel_internals/parsing/logic_lexer.mll"
                     ( token lexbuf )
# 1189 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 409 "src/kernel_internals/parsing/logic_lexer.mll"
         ( lex_error lexbuf "unexpected block-comment closing" )
# 1194 "src/kernel_internals/parsing/logic_lexer.ml"

  | 5 ->
# 410 "src/kernel_internals/parsing/logic_lexer.mll"
         ( if !ext_acsl_spec
           then comment lexbuf
           else lex_error lexbuf "unexpected block-comment opening"
         )
# 1202 "src/kernel_internals/parsing/logic_lexer.ml"

  | 6 ->
let
# 414 "src/kernel_internals/parsing/logic_lexer.mll"
                         plugin
# 1208 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
and
# 414 "src/kernel_internals/parsing/logic_lexer.mll"
                                                      name
# 1213 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 2) (lexbuf.Lexing.lex_curr_pos + -1) in
# 414 "src/kernel_internals/parsing/logic_lexer.mll"
                                                                (
     let loc = Lexing.(lexeme_start_p lexbuf, lexeme_end_p lexbuf) in
     let cabsloc = Cil_datatype.Location.of_lexing_loc loc in
     let tok = identifier ~plugin:(Some plugin) name cabsloc in
     check_ext_importer (fst cabsloc) plugin tok
     )
# 1222 "src/kernel_internals/parsing/logic_lexer.ml"

  | 7 ->
let
# 420 "src/kernel_internals/parsing/logic_lexer.mll"
                         plugin
# 1228 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
and
# 420 "src/kernel_internals/parsing/logic_lexer.mll"
                                                      name
# 1233 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 2) lexbuf.Lexing.lex_curr_pos in
# 420 "src/kernel_internals/parsing/logic_lexer.mll"
                                                            (
     let loc = Lexing.(lexeme_start_p lexbuf, lexeme_end_p lexbuf) in
     let cabsloc = Cil_datatype.Location.of_lexing_loc loc in
     let tok = identifier ~plugin:(Some plugin) name cabsloc in
     check_ext_plugin (fst cabsloc) plugin tok
     )
# 1242 "src/kernel_internals/parsing/logic_lexer.ml"

  | 8 ->
# 426 "src/kernel_internals/parsing/logic_lexer.mll"
                     ( bs_identifier lexbuf )
# 1247 "src/kernel_internals/parsing/logic_lexer.ml"

  | 9 ->
# 427 "src/kernel_internals/parsing/logic_lexer.mll"
                                              ( longident lexbuf )
# 1252 "src/kernel_internals/parsing/logic_lexer.ml"

  | 10 ->
# 428 "src/kernel_internals/parsing/logic_lexer.mll"
                                              ( longident lexbuf )
# 1257 "src/kernel_internals/parsing/logic_lexer.ml"

  | 11 ->
# 429 "src/kernel_internals/parsing/logic_lexer.mll"
                      (
      let loc = Lexing.(lexeme_start_p lexbuf, lexeme_end_p lexbuf) in
      let cabsloc = Cil_datatype.Location.of_lexing_loc loc in
      let s = lexeme lexbuf in
      let curr_tok = identifier ~plugin:None s cabsloc in
      if curr_tok = CHECK || curr_tok = ADMIT then begin
        let next_tok =
          token { lexbuf with refill_buff = lexbuf.refill_buff }
        in
        let (eat_next, tok) = hack_merge_tokens curr_tok next_tok in
        if eat_next then ignore (token lexbuf);
        tok
      end else curr_tok
    )
# 1275 "src/kernel_internals/parsing/logic_lexer.ml"

  | 12 ->
# 444 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( INT_CONSTANT (lexeme lexbuf) )
# 1280 "src/kernel_internals/parsing/logic_lexer.ml"

  | 13 ->
# 445 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( INT_CONSTANT (lexeme lexbuf) )
# 1285 "src/kernel_internals/parsing/logic_lexer.ml"

  | 14 ->
# 446 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( INT_CONSTANT (lexeme lexbuf) )
# 1290 "src/kernel_internals/parsing/logic_lexer.ml"

  | 15 ->
# 447 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( INT_CONSTANT (lexeme lexbuf) )
# 1295 "src/kernel_internals/parsing/logic_lexer.ml"

  | 16 ->
# 448 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( INT_CONSTANT (lexeme lexbuf) )
# 1300 "src/kernel_internals/parsing/logic_lexer.ml"

  | 17 ->
let
# 449 "src/kernel_internals/parsing/logic_lexer.mll"
                 prelude
# 1306 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 449 "src/kernel_internals/parsing/logic_lexer.mll"
                                                                   content
# 1311 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_curr_pos + -1) in
# 450 "src/kernel_internals/parsing/logic_lexer.mll"
      (
        let b = Buffer.create 5 in
        Buffer.add_string b prelude;
        let lbf = Lexing.from_string content in
        INT_CONSTANT (chr b lbf ^ "'")
      )
# 1320 "src/kernel_internals/parsing/logic_lexer.ml"

  | 18 ->
# 463 "src/kernel_internals/parsing/logic_lexer.mll"
      ( FLOAT_CONSTANT (lexeme lexbuf) )
# 1325 "src/kernel_internals/parsing/logic_lexer.ml"

  | 19 ->
let
# 466 "src/kernel_internals/parsing/logic_lexer.mll"
            n
# 1331 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -2) in
# 466 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - 2;
                              INT_CONSTANT n )
# 1336 "src/kernel_internals/parsing/logic_lexer.ml"

  | 20 ->
let
# 469 "src/kernel_internals/parsing/logic_lexer.mll"
                prelude
# 1342 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 469 "src/kernel_internals/parsing/logic_lexer.mll"
                                                                content
# 1347 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) (lexbuf.Lexing.lex_curr_pos + -1) in
# 470 "src/kernel_internals/parsing/logic_lexer.mll"
      ( STRING_LITERAL (prelude.[0] = 'L',content) )
# 1351 "src/kernel_internals/parsing/logic_lexer.ml"

  | 21 ->
# 471 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( hash lexbuf )
# 1356 "src/kernel_internals/parsing/logic_lexer.ml"

  | 22 ->
# 472 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( IMPLIES )
# 1361 "src/kernel_internals/parsing/logic_lexer.ml"

  | 23 ->
# 473 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( IFF )
# 1366 "src/kernel_internals/parsing/logic_lexer.ml"

  | 24 ->
# 474 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( BIMPLIES )
# 1371 "src/kernel_internals/parsing/logic_lexer.ml"

  | 25 ->
# 475 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( BIFF )
# 1376 "src/kernel_internals/parsing/logic_lexer.ml"

  | 26 ->
# 476 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( AND )
# 1381 "src/kernel_internals/parsing/logic_lexer.ml"

  | 27 ->
# 477 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( OR )
# 1386 "src/kernel_internals/parsing/logic_lexer.ml"

  | 28 ->
# 478 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( NOT )
# 1391 "src/kernel_internals/parsing/logic_lexer.ml"

  | 29 ->
# 479 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOLLAR )
# 1396 "src/kernel_internals/parsing/logic_lexer.ml"

  | 30 ->
# 480 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( COMMA )
# 1401 "src/kernel_internals/parsing/logic_lexer.ml"

  | 31 ->
# 481 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( ARROW )
# 1406 "src/kernel_internals/parsing/logic_lexer.ml"

  | 32 ->
# 482 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Test state_stack; QUESTION )
# 1411 "src/kernel_internals/parsing/logic_lexer.ml"

  | 33 ->
# 483 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( SEMICOLON )
# 1416 "src/kernel_internals/parsing/logic_lexer.ml"

  | 34 ->
# 484 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( match get_state() with
                                  Normal  -> COLON
                                | Test -> pop_state(); COLON2
                            )
# 1424 "src/kernel_internals/parsing/logic_lexer.ml"

  | 35 ->
# 488 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( COLONCOLON )
# 1429 "src/kernel_internals/parsing/logic_lexer.ml"

  | 36 ->
# 489 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOT )
# 1434 "src/kernel_internals/parsing/logic_lexer.ml"

  | 37 ->
# 490 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOTDOT )
# 1439 "src/kernel_internals/parsing/logic_lexer.ml"

  | 38 ->
# 491 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( DOTDOTDOT )
# 1444 "src/kernel_internals/parsing/logic_lexer.ml"

  | 39 ->
# 492 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( MINUS )
# 1449 "src/kernel_internals/parsing/logic_lexer.ml"

  | 40 ->
# 493 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PLUS )
# 1454 "src/kernel_internals/parsing/logic_lexer.ml"

  | 41 ->
# 494 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( STAR )
# 1459 "src/kernel_internals/parsing/logic_lexer.ml"

  | 42 ->
# 495 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( STARHAT )
# 1464 "src/kernel_internals/parsing/logic_lexer.ml"

  | 43 ->
# 496 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( AMP )
# 1469 "src/kernel_internals/parsing/logic_lexer.ml"

  | 44 ->
# 497 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( HATHAT )
# 1474 "src/kernel_internals/parsing/logic_lexer.ml"

  | 45 ->
# 498 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( HAT )
# 1479 "src/kernel_internals/parsing/logic_lexer.ml"

  | 46 ->
# 499 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PIPE )
# 1484 "src/kernel_internals/parsing/logic_lexer.ml"

  | 47 ->
# 500 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( TILDE )
# 1489 "src/kernel_internals/parsing/logic_lexer.ml"

  | 48 ->
# 501 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( SLASH )
# 1494 "src/kernel_internals/parsing/logic_lexer.ml"

  | 49 ->
# 502 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( PERCENT )
# 1499 "src/kernel_internals/parsing/logic_lexer.ml"

  | 50 ->
# 503 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LT )
# 1504 "src/kernel_internals/parsing/logic_lexer.ml"

  | 51 ->
# 504 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GT )
# 1509 "src/kernel_internals/parsing/logic_lexer.ml"

  | 52 ->
# 505 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LE )
# 1514 "src/kernel_internals/parsing/logic_lexer.ml"

  | 53 ->
# 506 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GE )
# 1519 "src/kernel_internals/parsing/logic_lexer.ml"

  | 54 ->
# 507 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EQ )
# 1524 "src/kernel_internals/parsing/logic_lexer.ml"

  | 55 ->
# 508 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EQUAL )
# 1529 "src/kernel_internals/parsing/logic_lexer.ml"

  | 56 ->
# 509 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( NE )
# 1534 "src/kernel_internals/parsing/logic_lexer.ml"

  | 57 ->
# 510 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LPAR )
# 1539 "src/kernel_internals/parsing/logic_lexer.ml"

  | 58 ->
# 511 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RPAR )
# 1544 "src/kernel_internals/parsing/logic_lexer.ml"

  | 59 ->
# 512 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LBRACE )
# 1549 "src/kernel_internals/parsing/logic_lexer.ml"

  | 60 ->
# 513 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RBRACE )
# 1554 "src/kernel_internals/parsing/logic_lexer.ml"

  | 61 ->
# 514 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LSQUARE )
# 1559 "src/kernel_internals/parsing/logic_lexer.ml"

  | 62 ->
# 515 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RSQUARE )
# 1564 "src/kernel_internals/parsing/logic_lexer.ml"

  | 63 ->
# 516 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( Stack.push Normal state_stack; LSQUAREPIPE )
# 1569 "src/kernel_internals/parsing/logic_lexer.ml"

  | 64 ->
# 517 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( pop_state(); RSQUAREPIPE )
# 1574 "src/kernel_internals/parsing/logic_lexer.ml"

  | 65 ->
# 518 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( LTLT )
# 1579 "src/kernel_internals/parsing/logic_lexer.ml"

  | 66 ->
# 519 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( GTGT )
# 1584 "src/kernel_internals/parsing/logic_lexer.ml"

  | 67 ->
let
# 520 "src/kernel_internals/parsing/logic_lexer.mll"
                 c
# 1590 "src/kernel_internals/parsing/logic_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 520 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( find_utf8 c )
# 1594 "src/kernel_internals/parsing/logic_lexer.ml"

  | 68 ->
# 521 "src/kernel_internals/parsing/logic_lexer.mll"
                            ( EOF )
# 1599 "src/kernel_internals/parsing/logic_lexer.ml"

  | 69 ->
# 522 "src/kernel_internals/parsing/logic_lexer.mll"
        ( lex_error lexbuf ("illegal character " ^ lexeme lexbuf) )
# 1604 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and chr buffer lexbuf =
   __ocaml_lex_chr_rec buffer lexbuf 129
and __ocaml_lex_chr_rec buffer lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 526 "src/kernel_internals/parsing/logic_lexer.mll"
      ( let s = lexeme lexbuf in
        let real_s = String.sub s 2 (String.length s - 2) in
        let rec add_one_char s =
          let l = String.length s in
          if l = 0 then ()
          else
          let h = int_of_digit s.[0] in
          let c,s =
            if l = 1 then (h,"")
            else
              (16*h + int_of_digit s.[1],
               String.sub s 2 (String.length s - 2))
          in
          Buffer.add_char buffer (Char.chr c); add_one_char s
        in add_one_char real_s; chr buffer lexbuf
      )
# 1631 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 543 "src/kernel_internals/parsing/logic_lexer.mll"
      ( let s = lexeme lexbuf in
        let real_s = String.sub s 1 (String.length s - 1) in
        let rec value i s =
          if s = "" then i
          else value (8*i+int_of_digit s.[0])
            (String.sub s 1 (String.length s -1))
        in let c = value 0 real_s in
        Buffer.add_char buffer (Char.chr c); chr buffer lexbuf
      )
# 1644 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 553 "src/kernel_internals/parsing/logic_lexer.mll"
      ( Buffer.add_char buffer
          (match (lexeme lexbuf).[1] with
               'a' -> '\007'
             | 'b' -> '\b'
             | 'f' -> '\012'
             | 'n' -> '\n'
             | 'r' -> '\r'
             | 't' -> '\t'
             | 'v' -> '\011' (* no '\v' in OCaml 😞 *)
             | '\'' -> '\''
             | '"' -> '"'
             | '?' -> '?'
             | '\\' -> '\\'
             | _ -> (* escape regex does not allow anything else *) assert false
          ); chr buffer lexbuf)
# 1663 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 568 "src/kernel_internals/parsing/logic_lexer.mll"
        ( Buffer.contents buffer )
# 1668 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 569 "src/kernel_internals/parsing/logic_lexer.mll"
       ( Buffer.add_string buffer (lexeme lexbuf); chr buffer lexbuf )
# 1673 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_chr_rec buffer lexbuf __ocaml_lex_state

and hash lexbuf =
   __ocaml_lex_hash_rec lexbuf 139
and __ocaml_lex_hash_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 572 "src/kernel_internals/parsing/logic_lexer.mll"
        ( Lexing.new_line lexbuf; token lexbuf)
# 1685 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 573 "src/kernel_internals/parsing/logic_lexer.mll"
             ( hash lexbuf)
# 1690 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 574 "src/kernel_internals/parsing/logic_lexer.mll"
              ( (* We are seeing a line number. This is the number for the
                   * next line *)
                 let s = Lexing.lexeme lexbuf in
                 let lineno =
                   try
                     int_of_string s
                   with Failure _ ->
                     (* the int is too big. *)
                     Kernel.warning
                       ~source:(Cil_datatype.Position.of_lexing_pos lexbuf.lex_start_p)
                       "Bad line number in preprocessed file: %s"  s;
                     (-1)
                 in
                 update_line_pos lexbuf (lineno - 1);
                  (* A file name may follow *)
		  file lexbuf )
# 1710 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 590 "src/kernel_internals/parsing/logic_lexer.mll"
                ( hash lexbuf )
# 1715 "src/kernel_internals/parsing/logic_lexer.ml"

  | 4 ->
# 591 "src/kernel_internals/parsing/logic_lexer.mll"
            ( endline lexbuf)
# 1720 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_hash_rec lexbuf __ocaml_lex_state

and file lexbuf =
   __ocaml_lex_file_rec lexbuf 148
and __ocaml_lex_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 594 "src/kernel_internals/parsing/logic_lexer.mll"
                      ( Lexing.new_line lexbuf; token lexbuf)
# 1732 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 595 "src/kernel_internals/parsing/logic_lexer.mll"
                  ( file lexbuf)
# 1737 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 596 "src/kernel_internals/parsing/logic_lexer.mll"
                                        (
    let n = Lexing.lexeme lexbuf in
    let n1 = String.sub n 1
        ((String.length n) - 2) in
    let unescape = Str.regexp_string "\\\"" in
    let n1 = Str.global_replace unescape "\"" n1 in
    update_file_pos lexbuf n1;
    endline lexbuf
  )
# 1750 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 606 "src/kernel_internals/parsing/logic_lexer.mll"
      ( endline lexbuf)
# 1755 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_file_rec lexbuf __ocaml_lex_state

and endline lexbuf =
   __ocaml_lex_endline_rec lexbuf 157
and __ocaml_lex_endline_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 609 "src/kernel_internals/parsing/logic_lexer.mll"
                ( Lexing.new_line lexbuf; token lexbuf)
# 1767 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 610 "src/kernel_internals/parsing/logic_lexer.mll"
                                ( EOF )
# 1772 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 611 "src/kernel_internals/parsing/logic_lexer.mll"
      ( endline lexbuf)
# 1777 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_endline_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 161
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 614 "src/kernel_internals/parsing/logic_lexer.mll"
         ( Lexing.new_line lexbuf; comment lexbuf)
# 1789 "src/kernel_internals/parsing/logic_lexer.ml"

  | 1 ->
# 615 "src/kernel_internals/parsing/logic_lexer.mll"
         ( token lexbuf)
# 1794 "src/kernel_internals/parsing/logic_lexer.ml"

  | 2 ->
# 616 "src/kernel_internals/parsing/logic_lexer.mll"
         ( lex_error lexbuf "non-terminating block-comment" )
# 1799 "src/kernel_internals/parsing/logic_lexer.ml"

  | 3 ->
# 617 "src/kernel_internals/parsing/logic_lexer.mll"
         ( comment lexbuf)
# 1804 "src/kernel_internals/parsing/logic_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

# 619 "src/kernel_internals/parsing/logic_lexer.mll"
 
  (* When Ocaml 4.11+ becomes mandatory, we can probably replace this with
     Lexing.set_position. *)
  let set_initial_position dest_lexbuf src_pos =
    dest_lexbuf.Lexing.lex_curr_p <- src_pos;
    dest_lexbuf.lex_abs_pos <- src_pos.pos_cnum

  let parse_from_position f (pos, s : Filepath.position * string) =
    let open Current_loc.Operators in
    let lb = from_string s in
    let get_loc () = Cil_datatype.Position.of_lexing_pos lb.Lexing.lex_curr_p in
    let<> UpdatedCurrentLoc = (pos, pos) in
    let warn = Kernel.warning ~wkey:Kernel.wkey_annot_error in
    set_initial_position lb (Cil_datatype.Position.to_lexing_pos pos);
    try
      let res = f token lb in
      Some (get_loc (), res)
    with
      | Failure s -> (* raised by the lexer itself, through [f] *)
          warn ~source:(get_loc ()) "lexing error: %s" s; None
      | Parsing.Parse_error ->
        warn ~source:(get_loc ()) "unexpected token '%s'" (Lexing.lexeme lb);
        None
      | Error (_, m) -> warn ~source:(get_loc ()) "%s" m; None
      | Logic_utils.Not_well_formed (loc, m) ->
        warn ~source:(fst loc) "%s" m; None
      | Logic_utils.Unknown_ext -> None
      | Log.FeatureRequest(source,_,msg) ->
        let source = Option.value ~default:(get_loc ()) source in
        warn ~source "unimplemented ACSL feature: %s" msg; None
      | Log.(AbortError _ | AbortFatal _) as exn -> raise exn
      | exn ->
        Kernel.fatal ~source:(get_loc ()) "Unknown error (%s)"
          (Printexc.to_string exn)

  let lexpr = parse_from_position Logic_parser.lexpr_eof

  let annot = parse_from_position Logic_parser.annot

  let spec = parse_from_position Logic_parser.spec

  let ext_spec lexbuf =
    ext_acsl_spec:=true;
    let finally() = ext_acsl_spec:=false in
    let work () = Logic_parser.ext_spec token lexbuf in
    Fun.protect ~finally work

  type 'a parse = Filepath.position * string -> (Filepath.position * 'a) option

  let chr lexbuf =
    let buf = Buffer.create 16 in
    chr buf lexbuf

# 1865 "src/kernel_internals/parsing/logic_lexer.ml"
