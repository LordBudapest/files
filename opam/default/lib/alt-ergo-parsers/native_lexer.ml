# 28 "src/parsers/native_lexer.mll"
 
  [@@@ocaml.warning "-33"]
  open AltErgoLib
  open Options

  open Lexing
  open Native_parser

  let assoc_keyword =
    let tbl : (string, Native_parser.token) Hashtbl.t = Hashtbl.create 256 in
    let kw_list =
      [
        "ac"         , AC;
        "and"        , AND;
        "axiom"      , AXIOM;
        "bitv"       , BITV;
        "bool"       , BOOL;
        "case_split" , CASESPLIT;
        "check"      , CHECK;
        "check_sat"  , CHECK_SAT;
        "cut"        , CUT;
        "distinct"   , DISTINCT;
        "else"       , ELSE;
        "end"        , END;
        "exists"     , EXISTS;
        "extends"    , EXTENDS;
        "false"      , FALSE;
        "forall"     , FORALL;
        "function"   , FUNC;
        "goal"       , GOAL;
        "if"         , IF;
        "in"         , IN;
        "int"        , INT;
        "let"        , LET;
        "logic"      , LOGIC;
        "not"        , NOT;
        "or"         , OR;
        "xor"        , XOR;
        "predicate"  , PRED;
        "prop"       , PROP;
        "real"       , REAL;
        "rewriting"  , REWRITING;
        "then"       , THEN;
        "theory"     , THEORY;
        "true"       , TRUE;
        "type"       , TYPE;
        "unit"       , UNIT;
        "void"       , VOID;
        "match"      , MATCH;
        "with"       , WITH;
        "of"         , OF;
      ]
    in
    List.iter (fun (s, kw) -> Hashtbl.add tbl s kw) kw_list;
    fun tok -> Hashtbl.find tbl tok

  let mk_new_line lexbuf =
    let p = lexbuf.lex_curr_p in
    let p = { p with pos_lnum = p.pos_lnum + 1; pos_bol = p.pos_cnum } in
    lexbuf.lex_curr_p <- p

  let escaped_char = function
    | 'n' -> '\n'
    | 'r' -> '\r'
    | 't' -> '\t'
    | c -> c

  let n_zero, n_ten, n_16 = Numbers.Q.(from_int 0, from_int 10, from_int 16)

  let decimal_number s =
    let r = ref n_zero in
    for i=0 to String.length s - 1 do
      let c = Char.(code s.[i] - code '0') in
      r := Numbers.Q.(add (mult n_ten !r) (from_int c))
    done;
    !r

  let hexa_number s =
    let r = ref n_zero in
    for i=0 to String.length s - 1 do
      let c = s.[i] in
      let v =
        match c with
        | '0'..'9' -> Char.code c - Char.code '0'
        | 'a'..'f' -> Char.code c - Char.code 'a' + 10
        | 'A'..'F' -> Char.code c - Char.code 'A' + 10
        | _ -> assert false
      in
      r := Numbers.Q.(add (mult n_16 !r) (from_int v))
    done;
    !r


# 96 "src/parsers/native_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\212\255\213\255\214\255\216\255\047\000\218\255\219\255\
    \220\255\221\255\222\255\224\255\225\255\226\255\054\000\231\255\
    \065\000\237\255\082\000\066\000\241\255\242\255\244\255\245\255\
    \246\255\087\000\082\000\099\000\121\000\194\000\252\000\006\000\
    \255\255\080\001\155\001\154\000\183\001\109\000\131\000\215\001\
    \193\001\230\001\164\000\247\001\001\002\011\002\023\002\056\002\
    \088\002\121\002\153\002\163\002\173\002\183\002\193\002\215\002\
    \225\002\235\002\247\255\240\255\232\255\235\255\078\000\238\255\
    \233\255\095\000\228\255\080\000\215\255\082\001\251\255\252\255\
    \253\255\104\000\148\000\255\255\254\255\060\002\251\255\252\255\
    \253\255\002\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\038\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\026\000\255\255\
    \021\000\255\255\019\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\012\000\032\000\005\000\005\000\004\000\002\000\001\000\
    \255\255\003\000\255\255\006\000\255\255\006\000\255\255\255\255\
    \006\000\255\255\006\000\255\255\006\000\255\255\255\255\255\255\
    \255\255\255\255\007\000\255\255\007\000\255\255\006\000\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\016\000\255\255\
    \255\255\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\255\255\000\000\070\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\078\000\000\000\000\000\
    \000\000\083\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\032\000\000\000\000\000\031\000\000\000\031\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\003\000\010\000\000\000\012\000\031\000\024\000\
    \025\000\021\000\014\000\015\000\023\000\019\000\026\000\013\000\
    \028\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\020\000\022\000\018\000\017\000\016\000\030\000\
    \011\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\009\000\067\000\008\000\004\000\029\000\
    \065\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\007\000\005\000\006\000\064\000\062\000\
    \059\000\058\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\063\000\066\000\068\000\061\000\
    \060\000\035\000\076\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\035\000\
    \036\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\075\000\036\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\036\000\039\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\000\000\000\000\000\000\039\000\
    \002\000\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\033\000\072\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \000\000\000\000\073\000\000\000\074\000\000\000\000\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\038\000\000\000\038\000\000\000\000\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\045\000\000\000\045\000\000\000\041\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\043\000\000\000\043\000\000\000\000\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\041\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\048\000\080\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\082\000\000\000\
    \000\000\000\000\000\000\053\000\000\000\053\000\000\000\047\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \081\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
    \000\000\000\000\000\000\000\000\051\000\000\000\051\000\000\000\
    \049\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \049\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\057\000\000\000\057\000\000\000\055\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\000\000\055\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\079\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\031\000\
    \255\255\255\255\255\255\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\031\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\016\000\018\000\
    \019\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\062\000\065\000\067\000\018\000\
    \018\000\027\000\073\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\028\000\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\074\000\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \027\000\255\255\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\028\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\035\000\
    \000\000\029\000\081\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\255\255\255\255\255\255\
    \255\255\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\255\255\030\000\069\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\033\000\
    \255\255\255\255\069\000\255\255\069\000\255\255\255\255\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\255\255\255\255\255\255\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\255\255\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\036\000\255\255\036\000\255\255\255\255\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\039\000\255\255\039\000\255\255\040\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\041\000\255\255\041\000\255\255\255\255\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\040\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\046\000\077\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
    \046\000\255\255\069\000\255\255\255\255\255\255\255\255\255\255\
    \046\000\046\000\046\000\046\000\046\000\046\000\077\000\255\255\
    \255\255\255\255\255\255\047\000\255\255\047\000\255\255\046\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \046\000\046\000\046\000\046\000\046\000\046\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\046\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \077\000\048\000\048\000\048\000\048\000\048\000\048\000\255\255\
    \255\255\255\255\255\255\255\255\049\000\255\255\049\000\255\255\
    \048\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\048\000\048\000\048\000\048\000\048\000\048\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \048\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\055\000\255\255\055\000\255\255\054\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\255\255\054\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\077\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\022\000\044\000\000\000\000\000\000\000\
    \000\000\000\000\081\000\055\000\109\000\032\000\119\000\141\000\
    \151\000\173\000\183\000\193\000\205\000\215\000\227\000\000\000\
    \009\001\071\000\000\000\000\000\000\000\000\000\043\001\074\001\
    \084\001\097\001\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\048\000\000\000\069\000\000\000\000\000\
    \048\000\000\000\069\000\000\000\069\000\000\000\000\000\000\000\
    \000\000\000\000\102\000\000\000\113\000\000\000\048\000\000\000\
    \069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_default_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\096\000\000\000\096\000\001\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\014\000\000\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\033\000\026\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\000\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\038\000\096\000\000\000\096\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\038\000\000\000\000\000\000\000\
    \000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \061\000\000\000\061\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \061\000\000\000\061\000\000\000\000\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \061\000\000\000\061\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\000\000\038\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\086\000\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
    \000\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\099\000\099\000\000\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \000\000\000\000\000\000\091\000\000\000\000\000\000\000\000\000\
    \000\000\091\000\000\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\000\000\000\000\000\000\
    \000\000\000\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \038\000\000\000\000\000\000\000\000\000\061\000\000\000\061\000\
    \000\000\091\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\000\000\000\000\
    \038\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check_code =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\047\000\255\255\047\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\027\000\255\255\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\028\000\027\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\028\000\049\000\255\255\049\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\035\000\255\255\255\255\255\255\
    \255\255\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \036\000\255\255\036\000\255\255\035\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\255\255\034\000\034\000\034\000\034\000\034\000\034\000\
    \039\000\255\255\039\000\255\255\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\255\255\041\000\255\255\040\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\255\255\040\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\046\000\255\255\046\000\046\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\046\000\255\255\255\255\255\255\255\255\
    \255\255\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\255\255\046\000\046\000\046\000\046\000\
    \046\000\046\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \255\255\255\255\255\255\046\000\255\255\255\255\255\255\255\255\
    \255\255\048\000\255\255\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\255\255\255\255\255\255\
    \255\255\255\255\048\000\048\000\048\000\048\000\048\000\048\000\
    \054\000\255\255\255\255\255\255\255\255\055\000\255\255\055\000\
    \255\255\048\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \054\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_code =
   "\255\010\255\255\011\255\010\255\009\255\255\011\255\255\010\255\
    \011\255\255\009\255\010\255\011\255\255\012\255\014\255\013\255\
    \255\011\255\010\255\255\014\255\013\255\012\255\255\016\255\255\
    \007\255\001\255\005\008\004\009\003\010\002\011\255\014\255\013\
    \255\255\015\255\255\007\012\006\014\005\008\004\009\003\010\002\
    \011\001\013\000\015\255\020\255\019\255\255\018\255\017\255\255\
    \018\255\255\020\255\255\001\017\002\018\004\019\003\020\000\016\
    \255\004\255\001\017\002\018\000\016\255";
}

let rec parse_token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 21 (-1);(* L=2 [9] <- p ; [8] <- p ;  *)
  lexbuf.Lexing.lex_mem.(9) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(8) <- lexbuf.Lexing.lex_curr_pos ;
 __ocaml_lex_parse_token_rec lexbuf 0
and __ocaml_lex_parse_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 128 "src/parsers/native_lexer.mll"
                             ( mk_new_line lexbuf; parse_token lexbuf )
# 601 "src/parsers/native_lexer.ml"

  | 1 ->
# 129 "src/parsers/native_lexer.mll"
                             ( parse_token lexbuf )
# 606 "src/parsers/native_lexer.ml"

  | 2 ->
# 130 "src/parsers/native_lexer.mll"
                             ( QM )
# 611 "src/parsers/native_lexer.ml"

  | 3 ->
let
# 131 "src/parsers/native_lexer.mll"
                      id
# 617 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 131 "src/parsers/native_lexer.mll"
                             ( QM_ID id )
# 621 "src/parsers/native_lexer.ml"

  | 4 ->
let
# 132 "src/parsers/native_lexer.mll"
                  i
# 627 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 132 "src/parsers/native_lexer.mll"
                             ( try assoc_keyword i with Not_found -> ID i )
# 631 "src/parsers/native_lexer.ml"

  | 5 ->
let
# 133 "src/parsers/native_lexer.mll"
              s
# 637 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 133 "src/parsers/native_lexer.mll"
                             ( INTEGER s )
# 641 "src/parsers/native_lexer.ml"

  | 6 ->
let
# 135 "src/parsers/native_lexer.mll"
               i
# 647 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(5) lexbuf.Lexing.lex_mem.(4)
and
# 135 "src/parsers/native_lexer.mll"
                         f
# 652 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(3) lexbuf.Lexing.lex_mem.(2)
and
# 135 "src/parsers/native_lexer.mll"
                                                     sign
# 657 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(7) lexbuf.Lexing.lex_mem.(6)
and
# 135 "src/parsers/native_lexer.mll"
                                                                     exp
# 662 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(0) in
# 141 "src/parsers/native_lexer.mll"
      (
        let v =
          match exp,sign with
          | Some exp,Some "-" ->
            Numbers.(Q.div (decimal_number (i^f))
              (Q.from_z (Z.power (Z.from_int 10) (int_of_string exp))))
          | Some exp,_ ->
            Numbers.(Q.mult (decimal_number (i^f))
              (Q.from_z (Z.power (Z.from_int 10) (int_of_string exp))))
          | None,_ -> decimal_number (i^f)
        in
        let v =
          Numbers.(Q.div v (Q.from_z (Z.power (Z.from_int 10)
            (String.length f))))
        in
        NUM v
      )
# 682 "src/parsers/native_lexer.ml"

  | 7 ->
let
# 160 "src/parsers/native_lexer.mll"
                          e
# 688 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 160 "src/parsers/native_lexer.mll"
                                                   f
# 693 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(4) lexbuf.Lexing.lex_mem.(3)
and
# 161 "src/parsers/native_lexer.mll"
                             sign
# 698 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(1) lexbuf.Lexing.lex_mem.(2)
and
# 161 "src/parsers/native_lexer.mll"
                                              exp
# 703 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(2) lexbuf.Lexing.lex_curr_pos in
# 162 "src/parsers/native_lexer.mll"
      (
        let f = match f with None -> "" | Some f -> f in
        let v =
          match sign with
          | "-" ->
            Numbers.(Q.div (hexa_number (e^f))
              (Q.from_z (Z.power (Z.from_int 2) (int_of_string exp))))
          | _ ->
            Numbers.(Q.mult (hexa_number (e^f))
              (Q.from_z (Z.power (Z.from_int 2) (int_of_string exp))))
        in
        let v =
          Numbers.(Q.div v (Q.from_z (Z.power (Z.from_int 16)
            (String.length f))))
        in
        NUM v
      )
# 723 "src/parsers/native_lexer.ml"

  | 8 ->
# 179 "src/parsers/native_lexer.mll"
          ( parse_comment lexbuf; parse_token lexbuf )
# 728 "src/parsers/native_lexer.ml"

  | 9 ->
# 180 "src/parsers/native_lexer.mll"
          ( QUOTE )
# 733 "src/parsers/native_lexer.ml"

  | 10 ->
# 181 "src/parsers/native_lexer.mll"
          ( COMMA )
# 738 "src/parsers/native_lexer.ml"

  | 11 ->
# 182 "src/parsers/native_lexer.mll"
          ( PV )
# 743 "src/parsers/native_lexer.ml"

  | 12 ->
# 183 "src/parsers/native_lexer.mll"
          ( LEFTPAR )
# 748 "src/parsers/native_lexer.ml"

  | 13 ->
# 184 "src/parsers/native_lexer.mll"
          ( RIGHTPAR )
# 753 "src/parsers/native_lexer.ml"

  | 14 ->
# 185 "src/parsers/native_lexer.mll"
          ( COLON )
# 758 "src/parsers/native_lexer.ml"

  | 15 ->
# 186 "src/parsers/native_lexer.mll"
          ( RIGHTARROW )
# 763 "src/parsers/native_lexer.ml"

  | 16 ->
# 187 "src/parsers/native_lexer.mll"
          ( LEFTARROW )
# 768 "src/parsers/native_lexer.ml"

  | 17 ->
# 188 "src/parsers/native_lexer.mll"
          ( LRARROW )
# 773 "src/parsers/native_lexer.ml"

  | 18 ->
# 189 "src/parsers/native_lexer.mll"
          ( EQUAL )
# 778 "src/parsers/native_lexer.ml"

  | 19 ->
# 190 "src/parsers/native_lexer.mll"
          ( LT )
# 783 "src/parsers/native_lexer.ml"

  | 20 ->
# 191 "src/parsers/native_lexer.mll"
          ( LE )
# 788 "src/parsers/native_lexer.ml"

  | 21 ->
# 192 "src/parsers/native_lexer.mll"
          ( GT )
# 793 "src/parsers/native_lexer.ml"

  | 22 ->
# 193 "src/parsers/native_lexer.mll"
          ( GE )
# 798 "src/parsers/native_lexer.ml"

  | 23 ->
# 194 "src/parsers/native_lexer.mll"
          ( NOTEQ )
# 803 "src/parsers/native_lexer.ml"

  | 24 ->
# 195 "src/parsers/native_lexer.mll"
          ( PLUS )
# 808 "src/parsers/native_lexer.ml"

  | 25 ->
# 196 "src/parsers/native_lexer.mll"
          ( MINUS )
# 813 "src/parsers/native_lexer.ml"

  | 26 ->
# 197 "src/parsers/native_lexer.mll"
          ( TIMES )
# 818 "src/parsers/native_lexer.ml"

  | 27 ->
# 198 "src/parsers/native_lexer.mll"
          ( POWDOT )
# 823 "src/parsers/native_lexer.ml"

  | 28 ->
# 199 "src/parsers/native_lexer.mll"
          ( POW )
# 828 "src/parsers/native_lexer.ml"

  | 29 ->
# 200 "src/parsers/native_lexer.mll"
          ( SLASH )
# 833 "src/parsers/native_lexer.ml"

  | 30 ->
# 201 "src/parsers/native_lexer.mll"
          ( PERCENT )
# 838 "src/parsers/native_lexer.ml"

  | 31 ->
# 202 "src/parsers/native_lexer.mll"
          ( AT )
# 843 "src/parsers/native_lexer.ml"

  | 32 ->
# 203 "src/parsers/native_lexer.mll"
          ( DOT )
# 848 "src/parsers/native_lexer.ml"

  | 33 ->
# 204 "src/parsers/native_lexer.mll"
          ( SHARP )
# 853 "src/parsers/native_lexer.ml"

  | 34 ->
# 205 "src/parsers/native_lexer.mll"
          ( LEFTSQ )
# 858 "src/parsers/native_lexer.ml"

  | 35 ->
# 206 "src/parsers/native_lexer.mll"
          ( RIGHTSQ )
# 863 "src/parsers/native_lexer.ml"

  | 36 ->
# 207 "src/parsers/native_lexer.mll"
          ( LEFTBR )
# 868 "src/parsers/native_lexer.ml"

  | 37 ->
# 208 "src/parsers/native_lexer.mll"
          ( RIGHTBR )
# 873 "src/parsers/native_lexer.ml"

  | 38 ->
# 209 "src/parsers/native_lexer.mll"
          ( BAR )
# 878 "src/parsers/native_lexer.ml"

  | 39 ->
# 210 "src/parsers/native_lexer.mll"
          ( HAT )
# 883 "src/parsers/native_lexer.ml"

  | 40 ->
# 211 "src/parsers/native_lexer.mll"
          ( MAPS_TO )
# 888 "src/parsers/native_lexer.ml"

  | 41 ->
# 212 "src/parsers/native_lexer.mll"
          ( parse_string (Buffer.create 1024) lexbuf )
# 893 "src/parsers/native_lexer.ml"

  | 42 ->
# 213 "src/parsers/native_lexer.mll"
          ( EOF )
# 898 "src/parsers/native_lexer.ml"

  | 43 ->
let
# 214 "src/parsers/native_lexer.mll"
         c
# 904 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 214 "src/parsers/native_lexer.mll"
           (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    let s = "illegal character: " ^ String.make 1 c in
    Errors.error (Errors.Lexical_error (loc, s))
  )
# 912 "src/parsers/native_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_token_rec lexbuf __ocaml_lex_state

and parse_comment lexbuf =
   __ocaml_lex_parse_comment_rec lexbuf 69
and __ocaml_lex_parse_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 221 "src/parsers/native_lexer.mll"
         ( () )
# 924 "src/parsers/native_lexer.ml"

  | 1 ->
# 222 "src/parsers/native_lexer.mll"
         ( parse_comment lexbuf; parse_comment lexbuf )
# 929 "src/parsers/native_lexer.ml"

  | 2 ->
# 223 "src/parsers/native_lexer.mll"
         ( mk_new_line lexbuf; parse_comment lexbuf )
# 934 "src/parsers/native_lexer.ml"

  | 3 ->
# 224 "src/parsers/native_lexer.mll"
         (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    Errors.error (Errors.Lexical_error (loc, "unterminated comment"))
  )
# 942 "src/parsers/native_lexer.ml"

  | 4 ->
# 228 "src/parsers/native_lexer.mll"
         ( parse_comment lexbuf )
# 947 "src/parsers/native_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_comment_rec lexbuf __ocaml_lex_state

and parse_string str_buf lexbuf =
   __ocaml_lex_parse_string_rec str_buf lexbuf 77
and __ocaml_lex_parse_string_rec str_buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 231 "src/parsers/native_lexer.mll"
         ( STRING (Buffer.contents str_buf) )
# 959 "src/parsers/native_lexer.ml"

  | 1 ->
let
# 232 "src/parsers/native_lexer.mll"
               c
# 965 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 232 "src/parsers/native_lexer.mll"
                  (
    Buffer.add_char str_buf (escaped_char c);
    parse_string str_buf lexbuf
  )
# 972 "src/parsers/native_lexer.ml"

  | 2 ->
# 237 "src/parsers/native_lexer.mll"
         (
    mk_new_line lexbuf;
    Buffer.add_char str_buf '\n';
    parse_string str_buf lexbuf
  )
# 981 "src/parsers/native_lexer.ml"

  | 3 ->
# 243 "src/parsers/native_lexer.mll"
         (
    let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
    Errors.error (Errors.Lexical_error (loc, "unterminated string"))
  )
# 989 "src/parsers/native_lexer.ml"

  | 4 ->
let
# 248 "src/parsers/native_lexer.mll"
         c
# 995 "src/parsers/native_lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 248 "src/parsers/native_lexer.mll"
           (
    Buffer.add_char str_buf c; parse_string str_buf lexbuf
  )
# 1001 "src/parsers/native_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_string_rec str_buf lexbuf __ocaml_lex_state

;;

# 252 "src/parsers/native_lexer.mll"
 

  module Parser : Parsers.PARSER_INTERFACE = struct

    let aux aux_fun token lexbuf =
      try
        let res = aux_fun token lexbuf in
        Parsing.clear_parser ();
        res
      with
      (* The --fixed-error flag makes menhir alias
         the exception Error to Parsing.Parse_error *)
      | Parsing.Parse_error ->
        let loc = (Lexing.lexeme_start_p lexbuf, Lexing.lexeme_end_p lexbuf) in
        let lex = Lexing.lexeme lexbuf in
        Parsing.clear_parser ();
        Errors.error (Errors.Syntax_error (loc, lex))

    let file    = aux Native_parser.file_parser    parse_token
    let expr    = aux Native_parser.lexpr_parser   parse_token
    let trigger = aux Native_parser.trigger_parser parse_token
  end

  let register_native () =
    (*register this parser in Input_lang: 3 different extensions recognized *)
    let p = (module Parser : Parsers.PARSER_INTERFACE) in
    Parsers.register_parser ~lang:".ae" p

# 1037 "src/parsers/native_lexer.ml"
