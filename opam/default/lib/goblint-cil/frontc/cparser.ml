type token =
  | IDENT of (string * Cabs.cabsloc)
  | QUALIFIER of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_CHAR16 of (int64 list * Cabs.cabsloc)
  | CST_CHAR32 of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | CST_COMPLEX of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | CST_STRING16 of (int64 list * Cabs.cabsloc)
  | CST_STRING32 of (int64 list * Cabs.cabsloc)
  | CST_U8STRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | BOOL of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | INT128 of (Cabs.cabsloc)
  | FLOAT128 of (Cabs.cabsloc)
  | COMPLEX of (Cabs.cabsloc)
  | FLOAT32 of (Cabs.cabsloc)
  | FLOAT64 of (Cabs.cabsloc)
  | FLOAT32X of (Cabs.cabsloc)
  | FLOAT64X of (Cabs.cabsloc)
  | GENERIC of (Cabs.cabsloc)
  | NORETURN of (Cabs.cabsloc)
  | AUTOTYPE of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | ATOMIC of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | ALIGNAS of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN of (Cabs.cabsloc)
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON of (Cabs.cabsloc)
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | STATIC_ASSERT of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | REAL of (Cabs.cabsloc)
  | IMAG of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | CLASSIFYTYPE of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME

open Parsing;;
let _ = parse_error;;
# 44 "src/frontc/cparser.mly"
open Cabs
open Cabshelper
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

(* unit -> string option *)
(*
let getComments () =
  match !comments with
    [] -> None
  | _ ->
      let r = Some(String.concat "\n" (List.rev !comments)) in
      comments := [];
      r
*)

(* cabsloc -> cabsloc *)
(*
let handleLoc l =
  l.clcomment <- getComments();
  l
*)

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"

let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body.
     Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _) when isJUSTBASE d ->
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)
       : decl_type =
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition =
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list)
                  (n: name)
                  (b: block) : definition =
  let fname = (specs, n) in
  FUNDEF (fname, b, loc, lend)


let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool))
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    parse_error "transformer connective must be 'to'";
    raise Parsing.Parse_error
  )
  else ()
end

let int64_to_char value =
  if (compare value (Int64.of_int 255) > 0) || (compare value Int64.zero < 0) then
    begin
      let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
      parse_error msg;
      raise Parsing.Parse_error
    end
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = int64_to_char value in
      (String.make 1 this_char) ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result


(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let transformOffsetOf (speclist, dtype) member =
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic) ->
	PROTO (addPointer dtype, names, variadic)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = CONSTANT (CONST_INT "0") in
  let castExpr = CAST (nullType, SINGLE_INIT nullExpr) in

  let rec replaceBase = function
    | VARIABLE field ->
	MEMBEROFPTR (castExpr, field)
    | MEMBEROF (base, field) ->
	MEMBEROF (replaceBase base, field)
    | INDEX (base, index) ->
	INDEX (replaceBase base, index)
    | _ ->
	parse_error "malformed offset expression in __builtin_offsetof";
        raise Parsing.Parse_error
  in
  let memberExpr = replaceBase member in
  let addrExpr = UNARY (ADDROF, memberExpr) in
  let sizeofType = [SpecType Tsizet], JUSTBASE in
  let resultExpr = CAST (sizeofType, SINGLE_INIT addrExpr) in
  resultExpr

  let queue_to_int64_list queue =
    List.rev (Queue.fold (fun l e -> List.rev_append e l) [] queue)

  let queue_to_string queue =
    let buffer = Buffer.create (Queue.length queue) in
    Queue.iter
      (List.iter
        (fun value ->
          let char = int64_to_char value in
          Buffer.add_char buffer char))
      queue;
    Buffer.contents buffer

# 348 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  310 (* EQ *);
  311 (* PLUS_EQ *);
  312 (* MINUS_EQ *);
  313 (* STAR_EQ *);
  314 (* SLASH_EQ *);
  315 (* PERCENT_EQ *);
  316 (* AND_EQ *);
  317 (* PIPE_EQ *);
  318 (* CIRC_EQ *);
  319 (* INF_INF_EQ *);
  320 (* SUP_SUP_EQ *);
  321 (* ARROW *);
  322 (* DOT *);
  323 (* EQ_EQ *);
  324 (* EXCLAM_EQ *);
  325 (* INF *);
  326 (* SUP *);
  327 (* INF_EQ *);
  328 (* SUP_EQ *);
  332 (* SLASH *);
  333 (* PERCENT *);
  336 (* PIPE *);
  337 (* CIRC *);
  340 (* PIPE_PIPE *);
  341 (* INF_INF *);
  342 (* SUP_SUP *);
  349 (* LBRACKET *);
  350 (* RBRACKET *);
  353 (* COMMA *);
  354 (* ELLIPSIS *);
  355 (* QUEST *);
  367 (* ELSE *);
  378 (* LABEL__ *);
  381 (* BUILTIN_VA_LIST *);
  382 (* BLOCKATTRIBUTE *);
  388 (* PRAGMA_EOL *);
  393 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* QUALIFIER *);
  259 (* CST_CHAR *);
  260 (* CST_WCHAR *);
  261 (* CST_CHAR16 *);
  262 (* CST_CHAR32 *);
  263 (* CST_INT *);
  264 (* CST_FLOAT *);
  265 (* CST_COMPLEX *);
  266 (* NAMED_TYPE *);
  267 (* CST_STRING *);
  268 (* CST_WSTRING *);
  269 (* CST_STRING16 *);
  270 (* CST_STRING32 *);
  271 (* CST_U8STRING *);
  272 (* CHAR *);
  273 (* INT *);
  274 (* BOOL *);
  275 (* DOUBLE *);
  276 (* FLOAT *);
  277 (* VOID *);
  278 (* INT64 *);
  279 (* INT32 *);
  280 (* INT128 *);
  281 (* FLOAT128 *);
  282 (* COMPLEX *);
  283 (* FLOAT32 *);
  284 (* FLOAT64 *);
  285 (* FLOAT32X *);
  286 (* FLOAT64X *);
  287 (* GENERIC *);
  288 (* NORETURN *);
  289 (* AUTOTYPE *);
  290 (* ENUM *);
  291 (* STRUCT *);
  292 (* TYPEDEF *);
  293 (* UNION *);
  294 (* SIGNED *);
  295 (* UNSIGNED *);
  296 (* LONG *);
  297 (* SHORT *);
  298 (* VOLATILE *);
  299 (* EXTERN *);
  300 (* STATIC *);
  301 (* CONST *);
  302 (* ATOMIC *);
  303 (* RESTRICT *);
  304 (* AUTO *);
  305 (* REGISTER *);
  306 (* THREAD *);
  307 (* SIZEOF *);
  308 (* ALIGNOF *);
  309 (* ALIGNAS *);
  329 (* PLUS *);
  330 (* MINUS *);
  331 (* STAR *);
  334 (* TILDE *);
  335 (* AND *);
  338 (* EXCLAM *);
  339 (* AND_AND *);
  343 (* PLUS_PLUS *);
  344 (* MINUS_MINUS *);
  345 (* RPAREN *);
  346 (* LPAREN *);
  347 (* RBRACE *);
  348 (* LBRACE *);
  351 (* COLON *);
  352 (* SEMICOLON *);
  356 (* BREAK *);
  357 (* CONTINUE *);
  358 (* GOTO *);
  359 (* RETURN *);
  360 (* SWITCH *);
  361 (* CASE *);
  362 (* DEFAULT *);
  363 (* WHILE *);
  364 (* DO *);
  365 (* FOR *);
  366 (* IF *);
  368 (* ATTRIBUTE *);
  369 (* INLINE *);
  370 (* STATIC_ASSERT *);
  371 (* ASM *);
  372 (* TYPEOF *);
  373 (* REAL *);
  374 (* IMAG *);
  375 (* FUNCTION__ *);
  376 (* PRETTY_FUNCTION__ *);
  377 (* CLASSIFYTYPE *);
  379 (* BUILTIN_VA_ARG *);
  380 (* ATTRIBUTE_USED *);
  383 (* BUILTIN_TYPES_COMPAT *);
  384 (* BUILTIN_OFFSETOF *);
  385 (* DECLSPEC *);
  386 (* PRAGMA_LINE *);
  387 (* PRAGMA *);
  389 (* AT_TRANSFORM *);
  390 (* AT_TRANSFORMEXPR *);
  391 (* AT_SPECIFIER *);
  392 (* AT_EXPR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\004\000\004\000\004\000\049\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\054\000\054\000\054\000\055\000\055\000\056\000\056\000\
\056\000\056\000\056\000\056\000\058\000\058\000\059\000\059\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\061\000\061\000\061\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\064\000\
\064\000\065\000\065\000\065\000\065\000\066\000\066\000\066\000\
\067\000\067\000\067\000\068\000\068\000\068\000\068\000\068\000\
\069\000\069\000\069\000\070\000\070\000\071\000\071\000\072\000\
\072\000\073\000\073\000\074\000\074\000\075\000\075\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\003\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\076\000\051\000\077\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\078\000\
\078\000\078\000\078\000\013\000\013\000\019\000\019\000\062\000\
\062\000\018\000\018\000\018\000\079\000\079\000\020\000\020\000\
\020\000\021\000\021\000\080\000\016\000\016\000\012\000\012\000\
\014\000\014\000\014\000\081\000\081\000\015\000\015\000\017\000\
\017\000\033\000\033\000\082\000\083\000\083\000\034\000\034\000\
\034\000\034\000\034\000\035\000\035\000\036\000\036\000\009\000\
\009\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\087\000\087\000\
\029\000\029\000\029\000\091\000\091\000\039\000\039\000\092\000\
\092\000\093\000\038\000\038\000\094\000\094\000\094\000\094\000\
\094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\090\000\090\000\022\000\022\000\095\000\095\000\096\000\
\096\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\042\000\042\000\
\041\000\041\000\041\000\028\000\028\000\028\000\027\000\027\000\
\040\000\043\000\043\000\043\000\043\000\043\000\099\000\100\000\
\100\000\101\000\101\000\101\000\026\000\026\000\026\000\026\000\
\025\000\102\000\102\000\037\000\037\000\053\000\053\000\053\000\
\103\000\103\000\103\000\047\000\048\000\048\000\032\000\032\000\
\046\000\046\000\044\000\044\000\044\000\044\000\045\000\045\000\
\030\000\031\000\031\000\031\000\031\000\031\000\050\000\050\000\
\050\000\050\000\050\000\006\000\006\000\007\000\007\000\007\000\
\097\000\097\000\097\000\097\000\085\000\085\000\104\000\104\000\
\104\000\104\000\104\000\106\000\106\000\098\000\098\000\052\000\
\052\000\052\000\108\000\108\000\108\000\108\000\108\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\109\000\109\000\109\000\109\000\109\000\109\000\110\000\110\000\
\110\000\110\000\110\000\110\000\110\000\110\000\110\000\110\000\
\110\000\110\000\110\000\110\000\111\000\112\000\112\000\112\000\
\112\000\113\000\113\000\113\000\114\000\114\000\114\000\115\000\
\115\000\115\000\115\000\115\000\116\000\116\000\116\000\117\000\
\117\000\118\000\118\000\119\000\119\000\120\000\120\000\121\000\
\121\000\122\000\122\000\123\000\123\000\107\000\124\000\124\000\
\124\000\125\000\125\000\084\000\084\000\105\000\105\000\008\000\
\008\000\008\000\008\000\088\000\088\000\089\000\089\000\126\000\
\126\000\128\000\128\000\129\000\129\000\127\000\127\000\130\000\
\130\000\131\000\131\000\132\000\132\000\133\000\133\000\000\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\001\000\006\000\004\000\008\000\008\000\
\003\000\001\000\001\000\004\000\000\000\001\000\001\000\001\000\
\001\000\003\000\004\000\006\000\001\000\003\000\003\000\003\000\
\001\000\002\000\004\000\006\000\006\000\006\000\003\000\003\000\
\002\000\002\000\006\000\001\000\003\000\002\000\001\000\002\000\
\002\000\002\000\004\000\002\000\002\000\002\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\003\000\001\000\003\000\000\000\
\001\000\003\000\002\000\001\000\001\000\000\000\003\000\004\000\
\005\000\000\000\001\000\002\000\000\000\001\000\000\000\001\000\
\001\000\003\000\003\000\000\000\001\000\003\000\003\000\003\000\
\003\000\005\000\003\000\001\000\000\000\002\000\000\000\002\000\
\002\000\002\000\002\000\000\000\004\000\001\000\003\000\002\000\
\001\000\002\000\001\000\005\000\008\000\005\000\005\000\005\000\
\009\000\005\000\005\000\005\000\007\000\004\000\002\000\003\000\
\002\000\002\000\003\000\004\000\007\000\003\000\002\000\001\000\
\003\000\002\000\001\000\004\000\006\000\001\000\003\000\001\000\
\003\000\002\000\001\000\004\000\002\000\002\000\002\000\002\000\
\002\000\002\000\005\000\002\000\002\000\005\000\005\000\002\000\
\004\000\001\000\002\000\001\000\002\000\000\000\001\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\005\000\004\000\006\000\
\005\000\002\000\005\000\004\000\006\000\005\000\002\000\006\000\
\005\000\007\000\006\000\001\000\004\000\004\000\000\000\003\000\
\002\000\004\000\002\000\003\000\001\000\003\000\001\000\003\000\
\001\000\004\000\002\000\001\000\003\000\003\000\002\000\004\000\
\004\000\001\000\004\000\005\000\005\000\004\000\001\000\000\000\
\002\000\000\000\002\000\003\000\002\000\002\000\001\000\003\000\
\002\000\005\000\003\000\001\000\003\000\000\000\004\000\004\000\
\001\000\003\000\001\000\003\000\000\000\001\000\002\000\001\000\
\003\000\001\000\004\000\003\000\004\000\004\000\001\000\000\000\
\002\000\002\000\002\000\004\000\005\000\003\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\000\000\002\000\005\000\
\004\000\002\000\001\000\001\000\000\000\002\000\001\000\001\000\
\001\000\001\000\001\000\004\000\002\000\001\000\002\000\003\000\
\004\000\001\000\001\000\001\000\001\000\003\000\002\000\001\000\
\001\000\002\000\001\000\001\000\003\000\003\000\003\000\001\000\
\001\000\003\000\002\000\003\000\003\000\004\000\001\000\002\000\
\002\000\002\000\002\000\004\000\002\000\004\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\001\000\003\000\003\000\
\003\000\001\000\003\000\003\000\001\000\003\000\003\000\001\000\
\003\000\003\000\003\000\003\000\001\000\003\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\005\000\001\000\003\000\001\000\001\000\003\000\
\003\000\000\000\001\000\003\000\003\000\003\000\003\000\000\000\
\002\000\002\000\002\000\001\000\002\000\000\000\003\000\000\000\
\001\000\001\000\003\000\005\000\005\000\000\000\003\000\000\000\
\003\000\000\000\002\000\000\000\001\000\001\000\003\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\092\001\012\001\235\000\
\238\000\236\000\248\000\242\000\234\000\240\000\241\000\245\000\
\082\001\243\000\244\000\246\000\247\000\000\000\249\000\000\000\
\000\000\000\000\000\000\250\000\251\000\239\000\237\000\080\001\
\000\000\000\000\079\001\000\000\081\001\000\000\000\000\091\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\106\001\000\000\000\000\000\000\000\000\208\001\000\000\002\000\
\000\000\000\000\000\000\007\000\008\000\000\000\000\000\000\000\
\012\000\000\000\203\000\000\000\000\000\209\001\023\000\112\000\
\113\000\114\000\115\000\109\000\110\000\111\000\128\000\121\000\
\122\000\123\000\129\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\131\000\000\000\000\000\000\000\000\000\
\000\000\210\001\024\000\000\000\025\000\033\000\108\000\000\000\
\064\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\096\000\116\000\120\000\000\000\
\000\000\000\000\231\000\228\000\221\000\000\000\018\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\
\214\000\215\000\000\000\216\000\217\000\000\000\005\000\000\000\
\220\000\000\000\000\000\000\000\000\000\090\001\000\000\000\000\
\000\000\109\001\108\001\120\001\116\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\115\001\000\000\121\001\000\000\000\000\142\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\172\001\174\001\000\000\000\000\000\000\001\000\
\004\000\000\000\075\001\000\000\000\000\000\000\062\001\000\000\
\233\000\218\000\006\000\164\000\073\001\000\000\000\000\224\000\
\202\000\000\000\229\000\000\000\000\000\050\000\000\000\055\000\
\057\000\058\000\059\000\062\000\060\000\061\000\063\000\000\000\
\048\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\053\000\054\000\000\000\000\000\000\000\000\000\125\000\
\126\000\127\000\124\000\000\000\000\000\041\000\042\000\000\000\
\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\001\000\000\000\000\101\001\000\000\000\000\000\000\000\000\
\103\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\111\001\000\000\
\000\000\123\001\000\000\114\001\000\000\128\001\000\000\133\001\
\141\001\135\001\136\001\137\001\140\001\138\001\139\001\000\000\
\000\000\129\001\130\001\131\001\000\000\104\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\001\099\001\096\001\097\001\000\000\095\001\000\000\000\000\
\201\000\000\000\000\000\000\000\034\001\049\001\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\159\000\000\000\
\000\000\158\000\063\001\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\040\000\039\000\150\000\000\000\000\000\
\000\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\067\000\068\000\069\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\000\000\000\014\000\000\000\000\000\045\001\046\001\000\000\
\000\000\041\001\076\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\001\000\000\000\000\000\000\
\000\000\000\000\000\000\255\000\019\001\000\000\000\000\000\000\
\000\000\004\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\179\001\000\000\089\001\204\000\000\000\
\000\000\013\001\014\001\181\001\000\000\000\000\180\001\122\001\
\117\001\118\001\000\000\000\000\110\001\119\001\105\001\124\001\
\125\001\000\000\173\001\143\001\144\001\145\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\225\000\060\001\085\001\000\000\207\000\000\000\000\000\000\000\
\132\000\006\000\000\000\000\000\000\000\000\000\000\000\163\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\155\000\154\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\000\000\027\000\035\000\161\000\160\000\000\000\053\001\
\000\000\000\000\048\001\000\000\000\000\043\001\000\000\000\000\
\030\001\029\001\009\001\100\001\020\000\000\000\000\000\000\000\
\020\001\027\001\016\001\000\000\000\000\000\000\022\001\254\000\
\001\001\000\000\003\001\006\001\000\000\010\000\219\000\222\000\
\223\000\183\001\182\001\000\000\011\000\000\000\177\001\176\001\
\000\000\000\000\126\001\000\000\000\000\000\000\210\000\000\000\
\094\001\000\000\000\000\000\000\140\000\000\000\137\000\000\000\
\000\000\000\000\000\000\212\000\000\000\051\001\000\000\000\000\
\000\000\033\001\000\000\000\000\000\000\000\000\166\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\179\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\
\000\000\029\000\000\000\000\000\039\001\065\001\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\095\000\059\001\000\000\
\000\000\013\000\000\000\044\001\032\001\008\001\011\001\000\000\
\000\000\024\001\018\001\000\001\005\001\205\000\171\001\000\000\
\000\000\209\000\000\000\000\000\000\000\141\000\000\000\148\000\
\133\000\139\000\035\001\000\000\000\000\157\000\000\000\000\000\
\087\001\038\001\175\000\173\000\000\000\000\000\193\000\194\000\
\000\000\000\000\191\000\000\000\000\000\006\000\000\000\000\000\
\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\169\000\178\000\168\000\162\000\171\000\176\000\000\000\
\000\000\000\000\028\000\000\000\068\001\000\000\000\000\000\000\
\043\000\036\000\037\000\000\000\038\000\046\000\000\000\000\000\
\010\001\026\001\000\000\000\000\147\000\143\000\000\000\000\000\
\135\000\138\000\050\001\037\001\036\001\000\000\198\000\006\000\
\195\000\000\000\192\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\200\000\000\000\000\000\185\001\
\186\001\187\001\000\000\032\000\031\000\030\000\067\001\070\001\
\069\001\045\000\058\001\055\001\056\001\015\000\016\000\144\000\
\000\000\000\000\000\000\196\000\006\000\006\000\000\000\190\000\
\006\000\000\000\199\000\000\000\006\000\119\000\000\000\000\000\
\145\000\088\001\187\000\186\000\182\000\188\000\000\000\183\000\
\184\000\000\000\000\000\189\001\000\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\194\001\000\000\000\000\189\000\
\000\000\006\000\000\000\000\000\191\001\000\000\000\000\197\000\
\006\000\181\000\201\001\000\000\195\001\000\000\185\000\000\000\
\199\001\000\000\000\000\000\000\203\001\205\001\197\001\196\001\
\000\000\207\001"

let yydgoto = "\004\000\
\054\000\055\000\244\000\056\000\057\000\141\001\146\002\249\002\
\166\002\107\000\108\000\208\001\133\002\167\002\109\000\175\001\
\010\001\134\002\135\002\136\002\022\003\246\000\059\000\061\001\
\211\000\046\001\049\001\050\001\060\000\061\000\062\000\176\002\
\169\002\170\002\153\001\058\002\043\001\212\000\213\000\232\001\
\233\001\234\001\085\002\068\002\069\002\006\003\215\000\235\001\
\063\000\064\000\152\000\062\001\082\002\149\001\222\001\110\000\
\111\000\177\002\178\002\112\000\189\002\138\002\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\079\003\127\000\215\002\139\002\
\223\002\222\000\060\002\166\000\172\002\173\002\046\003\080\003\
\094\003\066\000\063\001\045\002\046\002\132\000\227\000\218\000\
\134\000\142\000\055\002\047\001\218\001\150\001\193\002\143\001\
\078\001\143\000\085\001\189\000\190\000\097\001\192\000\193\000\
\194\000\195\000\196\000\197\000\198\000\199\000\200\000\201\000\
\202\000\203\000\204\000\086\001\253\001\099\003\109\003\100\003\
\101\003\102\003\121\003\125\003\126\003"

let yysindex = "\067\002\
\019\026\019\026\209\023\000\000\211\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\030\000\000\065\255\
\129\255\055\030\228\255\000\000\000\000\000\000\000\000\000\000\
\190\026\055\030\000\000\255\254\000\000\055\030\055\030\000\000\
\062\255\019\026\118\255\055\030\153\255\183\255\216\255\226\255\
\000\000\140\031\023\255\023\000\041\000\000\000\039\001\000\000\
\019\026\066\000\104\030\000\000\000\000\079\255\172\000\055\030\
\000\000\090\000\000\000\000\000\055\030\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\106\000\044\024\135\024\209\023\209\023\
\209\023\209\023\209\023\209\023\202\000\226\024\226\024\013\015\
\209\023\209\023\000\000\000\000\209\023\117\000\143\000\149\000\
\169\000\000\000\000\000\092\000\000\000\000\000\000\000\210\003\
\000\000\044\003\017\001\113\255\198\255\073\001\201\000\200\000\
\214\000\219\000\223\000\003\255\000\000\000\000\000\000\051\001\
\022\029\055\030\000\000\000\000\000\000\055\030\000\000\000\000\
\061\001\230\000\226\255\250\000\013\001\026\255\010\000\027\022\
\034\001\052\255\000\000\027\022\043\001\175\255\092\000\174\027\
\000\000\000\000\055\030\000\000\000\000\161\021\000\000\252\000\
\000\000\209\023\106\002\031\016\211\030\000\000\066\255\012\001\
\124\001\000\000\000\000\000\000\000\000\061\025\152\025\140\031\
\140\031\140\031\140\031\140\031\140\031\140\031\045\001\226\024\
\226\024\226\024\000\000\249\255\000\000\126\255\084\001\000\000\
\128\001\239\000\015\001\247\001\082\001\068\001\071\001\086\001\
\090\001\069\255\000\000\000\000\141\026\209\023\168\001\000\000\
\000\000\099\004\000\000\087\001\096\001\132\001\000\000\122\255\
\000\000\000\000\000\000\000\000\000\000\072\001\100\001\000\000\
\000\000\000\000\000\000\209\023\013\015\000\000\013\015\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\015\
\000\000\000\000\059\000\112\001\135\001\066\000\139\001\141\001\
\000\000\000\000\000\000\209\023\055\030\055\030\210\001\000\000\
\000\000\000\000\000\000\030\255\030\255\000\000\000\000\173\019\
\008\020\000\000\209\023\209\023\209\023\209\023\209\023\209\023\
\209\023\209\023\209\023\209\023\209\023\209\023\209\023\209\023\
\209\023\209\023\209\023\209\023\209\023\209\023\209\023\209\023\
\209\023\209\023\209\023\209\023\209\023\209\023\209\023\173\019\
\116\001\137\001\149\001\022\029\066\000\147\001\169\001\099\004\
\000\000\170\001\252\000\000\000\002\002\061\001\061\001\173\001\
\000\000\174\001\027\022\025\000\175\001\027\022\176\001\027\022\
\027\022\182\001\190\001\027\022\027\022\188\001\019\026\066\000\
\000\000\197\001\202\001\206\001\039\031\207\001\062\000\209\001\
\211\001\217\001\233\001\081\000\226\001\236\001\000\000\162\030\
\066\002\000\000\068\002\000\000\013\015\000\000\013\015\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\241\001\
\070\002\000\000\000\000\000\000\203\001\000\000\030\255\030\255\
\140\031\140\031\140\031\140\031\140\031\140\031\140\031\140\031\
\140\031\140\031\140\031\140\031\140\031\140\031\140\031\140\031\
\140\031\140\031\140\031\140\031\140\031\255\001\004\002\009\002\
\000\000\000\000\000\000\000\000\066\000\000\000\099\004\255\000\
\000\000\186\022\099\004\147\000\000\000\000\000\013\002\099\002\
\240\001\000\000\015\002\017\002\024\002\025\002\000\000\173\019\
\173\019\000\000\000\000\000\000\032\002\023\023\000\000\026\002\
\027\002\035\002\045\002\000\000\000\000\000\000\046\002\213\000\
\043\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\001\017\001\113\255\113\255\198\255\198\255\198\255\198\255\
\073\001\073\001\201\000\200\000\214\000\219\000\223\000\044\002\
\000\000\051\001\000\000\055\030\051\002\000\000\000\000\184\000\
\038\028\000\000\000\000\093\002\154\001\057\002\061\002\069\002\
\170\001\170\001\061\001\027\022\000\000\209\023\027\022\062\002\
\064\002\074\002\122\255\000\000\000\000\027\022\082\002\083\002\
\027\022\000\000\084\002\095\002\027\022\118\002\132\001\104\030\
\055\030\055\030\133\000\000\000\121\002\000\000\000\000\106\002\
\115\002\000\000\000\000\000\000\088\031\088\031\000\000\000\000\
\000\000\000\000\123\002\128\002\000\000\000\000\000\000\000\000\
\000\000\119\002\000\000\000\000\000\000\000\000\128\001\128\001\
\239\000\239\000\015\001\015\001\015\001\015\001\247\001\247\001\
\082\001\068\001\071\001\086\001\090\001\126\002\226\002\227\002\
\000\000\000\000\000\000\066\000\000\000\125\002\255\000\146\018\
\000\000\000\000\066\000\051\001\099\004\068\003\022\029\000\000\
\136\002\139\002\226\255\132\014\142\029\144\002\144\002\144\002\
\000\000\000\000\120\001\240\003\145\002\146\018\000\000\055\030\
\055\030\030\255\000\000\000\000\000\000\000\000\209\023\000\000\
\054\255\141\002\000\000\120\001\242\000\000\000\147\001\209\023\
\000\000\000\000\000\000\000\000\000\000\148\002\149\002\170\001\
\000\000\000\000\000\000\209\023\244\255\027\022\000\000\000\000\
\000\000\150\002\000\000\000\000\151\002\000\000\000\000\000\000\
\000\000\000\000\000\000\154\002\000\000\147\002\000\000\000\000\
\144\002\144\002\000\000\140\031\177\002\178\002\000\000\255\000\
\000\000\000\000\030\255\209\023\000\000\202\002\000\000\220\002\
\208\002\222\002\186\022\000\000\232\002\000\000\234\002\099\020\
\235\002\000\000\068\003\242\002\099\002\072\001\000\000\211\001\
\229\002\236\002\239\002\187\255\240\018\251\002\209\023\247\002\
\251\002\122\016\253\002\251\002\205\255\132\014\252\002\132\014\
\000\000\004\003\132\014\000\003\000\000\055\030\016\003\019\003\
\134\000\000\000\027\003\066\000\000\000\000\000\022\029\173\019\
\026\003\030\003\031\003\000\000\014\255\000\000\000\000\024\003\
\032\003\000\000\066\000\000\000\000\000\000\000\000\000\038\003\
\099\004\000\000\000\000\000\000\000\000\000\000\000\000\019\026\
\209\023\000\000\235\255\044\000\146\018\000\000\186\022\000\000\
\000\000\000\000\000\000\055\030\024\001\000\000\029\003\106\002\
\000\000\000\000\000\000\000\000\165\000\255\000\000\000\000\000\
\035\003\173\019\000\000\036\003\190\020\000\000\029\001\122\016\
\000\000\050\003\039\003\150\015\000\000\205\255\205\255\205\255\
\077\003\000\000\000\000\000\000\000\000\000\000\000\000\055\030\
\209\023\209\023\000\000\142\029\000\000\069\003\079\003\078\003\
\000\000\000\000\000\000\172\003\000\000\000\000\054\255\191\029\
\000\000\000\000\090\003\091\003\000\000\000\000\235\255\209\023\
\000\000\000\000\000\000\000\000\000\000\095\003\000\000\000\000\
\000\000\094\003\000\000\059\000\122\016\122\016\209\023\000\000\
\122\016\255\000\251\002\097\003\000\000\173\019\122\016\000\000\
\000\000\000\000\180\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\003\099\004\134\017\000\000\000\000\000\000\101\003\000\000\
\000\000\099\003\000\000\102\003\000\000\000\000\180\003\105\003\
\000\000\000\000\000\000\000\000\000\000\000\000\122\016\000\000\
\000\000\173\019\092\003\000\000\108\003\117\003\000\000\119\003\
\122\016\212\003\116\003\128\003\000\000\106\002\130\003\000\000\
\122\016\000\000\144\003\108\003\000\000\108\003\157\003\000\000\
\000\000\000\000\000\000\153\003\000\000\025\021\000\000\180\003\
\000\000\163\003\164\003\165\003\000\000\000\000\000\000\000\000\
\180\003\000\000"

let yyrindex = "\000\000\
\024\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\000\000\000\000\000\
\000\000\157\000\000\000\000\000\000\000\000\000\000\000\000\000\
\146\000\157\000\000\000\022\012\000\000\157\000\157\000\000\000\
\000\000\021\000\000\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\208\000\012\002\000\000\000\000\000\000\000\000\157\000\
\000\000\000\000\000\000\124\255\236\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\221\002\000\000\000\000\000\000\080\003\
\000\000\084\004\170\004\130\005\081\006\154\007\078\008\047\002\
\180\008\085\000\243\001\204\005\000\000\000\000\000\000\158\028\
\171\003\157\000\000\000\000\000\000\000\157\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\010\000\000\003\000\170\003\
\168\010\000\000\000\000\170\003\034\011\000\000\054\027\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\026\175\027\
\056\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\160\028\033\010\000\000\
\155\010\205\016\143\009\184\026\135\002\184\003\216\008\088\002\
\250\002\233\002\000\000\000\000\014\004\000\000\000\000\000\000\
\000\000\232\255\000\000\175\003\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\233\012\000\000\000\000\
\000\000\123\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\183\003\195\000\000\000\098\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\188\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\003\
\199\003\082\255\000\000\000\000\116\255\202\003\000\000\203\255\
\000\000\204\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\170\003\208\000\000\000\170\003\205\003\170\003\
\170\003\156\011\000\000\170\003\170\003\000\000\071\255\208\000\
\000\000\000\000\000\000\000\000\215\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\216\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\207\000\000\000\095\012\036\000\
\000\000\000\000\151\000\104\009\000\000\000\000\000\000\000\000\
\114\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\001\208\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\250\004\057\005\193\005\017\006\145\006\217\006\024\007\095\007\
\218\007\020\008\100\008\158\008\241\008\044\009\068\009\000\000\
\000\000\000\000\000\000\068\255\000\000\000\000\000\000\208\003\
\000\000\000\000\000\000\255\255\219\003\000\000\000\000\000\000\
\204\003\204\003\000\000\170\003\000\000\000\000\170\003\064\001\
\211\003\000\000\000\000\000\000\000\000\170\003\000\000\000\000\
\170\003\000\000\000\000\000\000\170\003\000\000\079\001\012\002\
\157\000\157\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\011\143\011\
\083\017\217\017\095\018\025\028\156\031\229\031\184\029\252\031\
\193\007\194\004\249\011\240\014\066\012\000\000\000\000\000\000\
\000\000\000\000\000\000\208\000\000\000\221\003\178\009\224\003\
\000\000\000\000\208\000\158\028\078\019\007\001\171\003\000\000\
\233\003\000\000\000\000\180\000\000\000\160\003\008\004\000\000\
\000\000\000\000\031\255\019\001\000\000\224\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\000\083\255\000\000\135\000\191\019\000\000\202\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\204\003\
\000\000\000\000\000\000\000\000\208\000\170\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\029\195\031\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\075\032\000\000\000\000\000\000\255\003\000\000\116\023\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\218\003\
\000\000\000\000\007\001\000\000\000\000\233\012\000\000\189\000\
\121\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\004\000\000\000\000\005\004\180\000\000\000\180\000\
\000\000\000\000\180\000\000\000\000\000\174\000\000\000\000\000\
\000\000\000\000\000\000\040\001\000\000\000\000\171\003\218\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\
\000\000\000\000\145\000\000\000\000\000\000\000\000\000\000\000\
\085\001\000\000\000\000\000\000\000\000\000\000\000\000\071\255\
\000\000\000\000\093\022\000\000\224\003\000\000\000\000\000\000\
\000\000\000\000\000\000\142\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\
\000\000\121\032\000\000\015\004\000\000\005\004\005\004\005\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\208\000\068\255\
\000\000\000\000\000\000\000\000\000\000\000\000\093\022\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\004\002\004\000\000\000\000\
\002\004\012\018\000\000\000\000\000\000\015\004\002\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\187\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\021\004\
\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\
\000\000\023\004\251\013\000\000\174\003\000\000\000\000\000\000\
\002\004\000\000\025\004\082\000\000\000\000\000\000\000\000\000\
\002\004\000\000\000\000\174\003\000\000\153\002\000\000\000\000\
\000\000\000\000\000\000\026\004\000\000\000\000\000\000\027\004\
\000\000\000\000\000\000\030\004\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\119\005\253\255\219\255\173\004\221\254\241\002\227\255\
\143\253\000\000\224\255\058\253\132\254\170\255\139\253\000\000\
\190\002\000\000\000\000\117\253\101\002\017\000\000\000\217\255\
\000\000\246\254\162\003\227\254\107\255\000\000\000\000\220\255\
\015\000\168\255\231\002\240\002\083\254\098\003\000\000\200\255\
\000\000\034\003\176\004\000\000\000\000\151\255\025\255\207\255\
\056\000\000\000\099\255\027\000\094\253\089\000\168\254\000\000\
\080\255\000\000\134\002\000\000\000\000\216\253\023\005\223\002\
\153\001\162\001\124\002\189\001\104\004\109\004\110\004\112\004\
\123\004\000\000\087\003\075\002\008\254\238\255\000\000\000\000\
\243\002\000\000\000\000\131\255\123\254\081\002\000\000\097\002\
\000\000\000\000\031\000\046\003\000\000\063\000\014\001\185\003\
\006\000\229\000\007\000\239\253\103\003\000\000\169\002\003\254\
\134\004\000\000\223\255\000\000\000\000\210\255\047\000\108\001\
\122\001\056\002\121\001\058\004\059\004\057\004\060\004\062\004\
\000\000\146\254\075\004\195\254\000\000\087\002\000\000\000\000\
\089\002\000\000\000\000\000\000\063\002"

let yytablesize = 8668
let yytable = "\106\000\
\151\000\214\000\073\001\191\000\159\000\080\001\069\000\069\000\
\216\000\245\000\044\002\129\000\220\001\052\001\164\001\252\001\
\188\000\058\000\058\000\209\000\003\000\050\002\038\002\003\000\
\225\001\226\001\135\000\065\000\065\000\185\002\135\000\067\000\
\067\000\213\001\003\000\136\000\080\002\148\002\131\000\136\000\
\238\002\090\001\131\000\241\002\128\000\044\003\245\002\069\000\
\243\002\131\000\131\000\155\001\135\000\191\002\131\000\131\000\
\147\002\027\003\058\000\247\000\131\000\136\000\069\000\068\000\
\068\000\135\000\087\001\054\001\065\000\164\001\006\000\021\003\
\067\000\058\000\136\000\217\000\221\000\082\001\219\000\012\003\
\131\000\078\001\077\001\065\000\090\000\226\000\039\001\067\000\
\155\000\003\001\178\001\179\001\180\001\181\001\182\001\183\001\
\184\001\185\001\186\001\187\001\188\001\040\001\013\003\076\003\
\068\000\084\001\009\001\043\002\067\001\061\003\248\000\051\002\
\141\000\145\000\205\000\149\000\061\001\055\001\191\000\068\000\
\084\001\076\001\135\000\084\001\228\000\061\001\040\003\083\001\
\210\000\135\000\151\000\136\000\003\001\228\000\143\002\191\000\
\094\002\095\002\136\000\021\003\163\001\054\001\245\000\065\001\
\245\000\045\001\131\000\096\003\104\001\147\002\131\000\158\000\
\132\001\245\000\075\001\088\001\137\000\069\000\079\001\054\001\
\060\001\003\000\140\000\054\001\060\001\007\003\140\000\133\001\
\072\001\129\002\220\000\074\001\025\003\078\001\077\001\135\000\
\138\000\174\001\177\001\069\003\070\003\074\003\067\000\073\003\
\136\000\025\001\026\001\233\002\140\000\077\003\111\001\112\001\
\156\001\139\000\157\001\215\001\165\001\096\002\228\000\119\002\
\120\002\140\000\135\001\158\001\047\001\061\001\087\002\160\000\
\061\001\209\001\069\000\147\001\047\001\228\000\068\000\142\001\
\169\001\170\001\113\001\226\000\144\000\058\000\098\001\099\001\
\100\001\101\001\102\001\103\001\135\000\095\003\056\001\065\000\
\084\001\054\001\066\001\067\000\230\000\136\000\070\001\106\003\
\138\000\084\001\162\000\248\000\214\001\248\000\246\002\113\003\
\168\001\247\002\044\002\216\001\061\001\146\000\248\000\150\000\
\084\001\139\000\140\000\102\001\228\000\234\002\245\000\200\002\
\245\000\140\000\069\001\068\000\102\001\207\002\218\002\247\001\
\163\000\144\002\151\001\229\001\006\000\074\001\237\001\006\000\
\239\001\240\001\027\001\028\001\243\001\244\001\191\000\180\002\
\182\002\246\001\006\000\133\000\093\001\084\001\208\000\147\000\
\129\002\191\000\151\001\084\001\131\002\093\001\153\000\154\000\
\195\002\164\000\084\001\156\000\157\000\142\001\230\000\140\000\
\011\002\161\000\012\002\165\000\045\001\248\002\210\000\148\000\
\084\001\084\001\191\000\191\000\084\001\230\000\084\001\132\002\
\084\001\065\002\066\002\060\001\069\000\224\000\060\001\018\002\
\060\001\060\001\230\001\138\000\060\001\060\001\090\000\058\000\
\109\001\031\001\026\003\042\002\172\001\173\001\102\001\031\001\
\032\003\065\000\116\002\210\000\139\000\067\000\079\000\000\001\
\001\001\002\001\083\000\248\000\140\000\248\000\093\001\003\000\
\084\001\074\001\206\000\057\001\230\000\211\000\211\000\230\001\
\231\001\138\000\129\002\231\000\110\001\093\001\090\000\124\003\
\090\000\090\000\207\000\090\000\231\000\068\000\090\000\084\001\
\124\003\023\003\139\000\102\001\210\000\024\003\049\002\153\000\
\084\001\061\001\230\000\159\001\142\001\047\002\255\001\084\001\
\142\001\188\001\061\001\160\001\230\000\230\000\000\002\188\001\
\084\001\020\002\021\002\022\002\032\003\018\003\168\002\090\000\
\090\000\004\002\193\001\223\000\093\001\090\000\230\000\090\000\
\193\001\005\002\090\000\090\000\090\000\090\000\090\000\090\000\
\135\000\225\000\064\001\061\001\097\002\151\002\061\001\099\002\
\064\001\136\000\064\001\228\000\090\000\231\000\103\002\016\002\
\017\002\106\002\239\000\054\002\164\001\109\002\252\000\061\001\
\061\001\084\001\099\000\100\000\231\000\090\000\191\000\191\000\
\061\001\061\001\227\000\164\001\230\000\114\002\003\003\151\000\
\084\001\084\001\098\002\084\001\081\002\005\002\004\003\230\000\
\253\000\045\001\061\001\230\000\052\002\061\001\254\000\053\002\
\084\001\230\000\092\000\247\001\060\001\230\000\230\000\060\001\
\230\000\230\000\141\002\230\000\230\000\230\000\060\001\056\002\
\006\000\060\001\255\000\231\000\031\003\060\001\086\001\230\000\
\217\000\131\000\131\000\033\001\034\001\093\001\167\000\084\001\
\168\002\084\002\168\002\093\001\062\001\168\002\035\001\006\000\
\192\002\061\001\230\000\153\000\006\000\062\001\082\003\084\001\
\153\000\153\000\153\000\186\002\187\002\230\000\036\001\061\001\
\061\001\061\001\037\001\061\001\049\002\061\001\086\000\061\001\
\040\000\038\001\077\002\041\001\047\002\160\001\230\000\118\001\
\119\001\222\002\142\001\142\001\086\001\048\001\203\002\051\001\
\140\000\174\002\049\002\001\000\002\000\003\000\236\002\045\001\
\142\001\142\001\183\002\181\002\072\001\250\002\053\002\252\002\
\052\003\053\003\254\002\053\001\197\002\077\001\171\002\061\001\
\061\001\142\001\067\000\022\001\023\001\024\001\045\003\086\001\
\201\002\222\002\086\001\120\001\121\001\086\001\086\001\086\001\
\054\001\140\002\091\001\084\001\066\001\062\001\043\000\071\001\
\062\001\084\001\066\001\084\001\066\001\028\003\060\001\179\002\
\160\001\006\000\068\000\038\003\187\000\064\001\039\003\048\000\
\212\002\061\001\165\001\092\001\061\001\047\002\068\001\049\002\
\137\002\114\001\141\002\105\001\054\002\029\001\030\001\031\001\
\032\001\216\001\128\001\034\003\126\001\127\001\245\000\129\001\
\142\001\089\002\048\001\239\002\062\001\209\001\137\002\025\001\
\025\001\137\001\188\002\138\001\139\001\130\001\140\001\047\002\
\136\001\040\000\019\003\174\002\131\001\174\002\211\000\211\000\
\174\002\193\001\194\001\000\003\084\001\084\001\072\001\144\001\
\072\001\146\001\084\001\072\001\195\001\196\001\226\000\145\001\
\171\002\152\001\171\002\154\001\067\000\171\002\067\000\045\001\
\111\003\067\000\115\001\116\001\117\001\020\003\142\001\229\002\
\161\001\049\002\171\001\049\002\210\001\069\000\192\002\209\001\
\048\003\049\003\050\003\211\002\117\000\201\001\202\001\162\001\
\058\000\023\002\024\002\166\001\068\000\167\001\068\000\043\000\
\211\001\068\000\065\000\047\002\081\002\212\001\067\000\187\000\
\084\001\025\002\026\002\217\001\092\000\047\002\031\002\032\002\
\048\000\069\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\219\001\224\001\209\001\072\001\000\003\112\002\113\002\
\227\001\236\001\221\001\232\000\232\000\228\001\068\000\238\001\
\131\000\241\001\067\000\084\001\065\003\232\000\084\001\245\001\
\242\001\084\001\084\001\084\001\092\000\248\001\092\000\092\000\
\081\002\092\000\249\001\071\003\092\000\037\003\250\001\254\001\
\041\003\001\002\047\002\047\002\047\003\137\002\047\002\047\002\
\086\000\002\002\068\000\160\001\047\002\233\000\234\000\235\000\
\236\000\237\000\238\000\122\001\123\001\124\001\125\001\249\000\
\250\000\003\002\006\002\251\000\007\002\151\000\092\000\142\001\
\009\002\013\002\010\002\092\000\014\002\092\000\015\002\047\000\
\092\000\092\000\092\000\092\000\092\000\092\000\232\000\067\003\
\086\000\039\002\086\000\086\000\047\002\086\000\040\002\072\003\
\086\000\041\002\092\000\057\002\232\000\232\000\047\002\056\002\
\232\000\062\002\232\000\232\000\232\000\059\002\047\002\061\002\
\063\002\064\002\123\003\092\000\079\000\080\000\081\000\082\000\
\083\000\067\002\072\002\073\002\085\003\086\003\086\000\086\000\
\088\003\086\000\086\000\074\002\091\003\075\002\076\002\086\000\
\078\002\086\000\079\002\083\002\086\000\086\000\086\000\086\000\
\086\000\086\000\088\002\091\002\232\000\092\002\104\003\187\000\
\197\001\198\001\199\001\200\001\100\002\093\002\086\000\051\000\
\101\002\114\003\187\000\200\001\200\001\200\001\200\001\200\001\
\119\003\102\002\166\001\166\001\104\002\105\002\107\002\086\000\
\166\001\027\002\028\002\029\002\030\002\166\001\166\001\166\001\
\166\001\108\002\166\001\187\000\187\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\110\002\115\002\117\002\121\002\123\002\160\001\160\001\160\001\
\122\002\160\001\160\001\166\001\124\002\128\002\117\000\160\001\
\099\000\100\000\125\002\126\002\160\001\160\001\160\001\160\001\
\149\002\160\001\150\002\070\002\194\002\184\002\198\002\199\002\
\204\002\205\002\206\002\005\002\189\001\190\001\191\001\192\001\
\192\001\192\001\192\001\192\001\192\001\192\001\192\001\192\001\
\192\001\192\001\192\001\192\001\192\001\192\001\117\000\056\000\
\117\000\117\000\160\001\117\000\208\002\209\002\117\000\200\001\
\200\001\214\002\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\213\002\117\000\117\000\117\000\216\002\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\217\002\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\219\002\170\001\220\002\230\002\224\002\006\000\170\001\170\001\
\170\001\170\001\226\002\231\002\117\000\168\001\232\002\187\000\
\187\000\047\000\168\001\066\000\237\002\240\002\244\002\168\001\
\168\001\168\001\168\001\251\002\168\001\117\000\253\002\255\002\
\117\000\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\170\001\137\001\001\003\138\001\
\139\001\002\003\140\001\005\003\009\003\040\000\010\003\011\003\
\015\003\047\000\029\003\047\000\047\000\168\001\047\000\016\003\
\017\003\047\000\033\003\035\003\071\002\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\042\003\043\003\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\055\003\047\000\047\000\
\047\000\051\000\047\000\047\000\047\000\047\000\051\003\056\003\
\047\000\070\000\047\000\057\003\058\003\047\000\047\000\047\000\
\047\000\047\000\047\000\043\000\062\003\063\003\145\002\066\003\
\200\001\200\001\200\001\200\001\200\001\068\003\078\003\047\000\
\075\003\081\003\089\003\087\003\048\000\090\003\187\000\093\003\
\098\003\051\000\097\003\051\000\051\000\103\003\051\000\105\003\
\047\000\051\000\108\003\047\000\107\003\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\110\003\112\003\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\115\003\051\000\051\000\
\051\000\006\000\051\000\051\000\051\000\051\000\118\003\120\003\
\051\000\071\000\051\000\127\003\128\003\051\000\051\000\051\000\
\051\000\051\000\051\000\040\001\015\001\129\003\192\001\162\001\
\162\001\056\000\162\001\162\001\192\001\006\000\206\000\051\000\
\162\001\006\000\004\001\005\001\149\000\162\001\162\001\162\001\
\162\001\137\001\162\001\138\001\139\001\151\000\140\001\052\001\
\051\000\040\000\042\001\051\000\200\001\200\001\021\000\021\001\
\006\001\007\001\030\003\008\001\072\001\192\001\009\001\178\001\
\175\001\056\000\023\001\056\000\056\000\022\000\056\000\156\000\
\072\000\056\000\136\000\162\001\208\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\174\000\181\002\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\066\000\056\000\056\000\
\056\000\134\000\056\000\056\000\056\000\056\000\184\001\043\000\
\056\000\093\001\056\000\057\001\006\000\056\000\056\000\056\000\
\056\000\056\000\056\000\230\000\232\000\190\001\151\000\151\000\
\048\000\198\001\202\001\204\001\241\000\242\000\206\001\056\000\
\070\000\134\001\014\003\064\003\228\002\066\000\090\002\066\000\
\066\000\073\000\066\000\225\002\227\002\066\000\202\002\148\001\
\056\000\054\003\203\001\056\000\137\001\127\002\138\001\139\001\
\204\001\140\001\205\001\084\003\040\000\206\001\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\207\001\066\000\066\000\066\000\190\002\066\000\066\000\
\066\000\066\000\008\003\070\000\066\000\210\002\066\000\092\003\
\111\002\066\000\066\000\066\000\066\000\066\000\066\000\059\003\
\223\001\033\002\035\002\034\002\019\002\196\002\036\002\130\003\
\074\000\037\002\116\003\066\000\094\001\096\001\117\003\000\000\
\000\000\000\000\000\000\094\000\000\000\000\000\106\001\107\001\
\108\001\000\000\043\000\070\000\066\000\070\000\070\000\000\000\
\070\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\000\000\000\000\000\000\000\000\
\070\000\070\000\070\000\071\000\070\000\070\000\070\000\070\000\
\000\000\000\000\070\000\000\000\070\000\000\000\000\000\070\000\
\070\000\070\000\070\000\070\000\070\000\000\000\000\000\000\000\
\075\000\163\001\163\001\000\000\163\001\163\001\000\000\000\000\
\000\000\070\000\163\001\000\000\000\000\000\000\000\000\163\001\
\163\001\163\001\163\001\071\000\163\001\071\000\071\000\000\000\
\071\000\000\000\070\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\163\001\000\000\000\000\
\071\000\071\000\071\000\000\000\071\000\071\000\071\000\071\000\
\076\000\000\000\071\000\000\000\071\000\000\000\000\000\071\000\
\071\000\071\000\071\000\071\000\071\000\000\000\000\000\000\000\
\000\000\000\000\072\000\000\000\072\000\072\000\000\000\072\000\
\000\000\071\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\073\000\000\000\000\000\000\000\072\000\
\072\000\072\000\000\000\072\000\072\000\072\000\072\000\000\000\
\077\000\072\000\000\000\072\000\000\000\000\000\072\000\072\000\
\072\000\072\000\072\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\073\000\000\000\073\000\073\000\000\000\
\073\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\000\000\000\000\000\000\094\000\000\000\000\000\
\073\000\073\000\073\000\000\000\073\000\073\000\073\000\073\000\
\078\000\000\000\073\000\000\000\073\000\000\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\000\000\000\000\000\000\
\000\000\000\000\074\000\000\000\074\000\074\000\000\000\074\000\
\000\000\073\000\074\000\000\000\000\000\094\000\000\000\094\000\
\094\000\000\000\094\000\000\000\000\000\094\000\000\000\000\000\
\000\000\000\000\073\000\074\000\074\000\074\000\074\000\074\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\074\000\075\000\074\000\074\000\074\000\074\000\079\000\
\000\000\074\000\000\000\074\000\000\000\000\000\074\000\074\000\
\074\000\074\000\074\000\074\000\094\000\000\000\094\000\000\000\
\000\000\094\000\094\000\094\000\094\000\094\000\000\000\000\000\
\074\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\094\000\075\000\075\000\000\000\075\000\
\000\000\074\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\000\000\000\000\
\000\000\000\000\076\000\075\000\075\000\075\000\075\000\075\000\
\075\000\000\000\000\000\000\000\000\000\000\000\080\000\075\000\
\075\000\075\000\000\000\075\000\075\000\075\000\075\000\000\000\
\000\000\075\000\000\000\075\000\000\000\000\000\075\000\075\000\
\075\000\075\000\075\000\075\000\000\000\000\000\000\000\000\000\
\000\000\000\000\076\000\000\000\076\000\076\000\000\000\076\000\
\075\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\000\077\000\076\000\076\000\076\000\076\000\076\000\
\076\000\081\000\000\000\000\000\000\000\000\000\000\000\076\000\
\076\000\076\000\000\000\076\000\076\000\000\000\000\000\000\000\
\000\000\076\000\000\000\076\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\077\000\000\000\077\000\077\000\000\000\077\000\
\076\000\000\000\077\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\077\000\077\000\077\000\077\000\077\000\
\077\000\082\000\078\000\000\000\000\000\000\000\000\000\077\000\
\077\000\077\000\000\000\077\000\077\000\000\000\000\000\000\000\
\000\000\077\000\000\000\077\000\000\000\000\000\077\000\077\000\
\077\000\077\000\077\000\077\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\000\000\078\000\000\000\078\000\078\000\000\000\078\000\
\000\000\000\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\077\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\079\000\000\000\078\000\078\000\078\000\078\000\078\000\
\078\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\078\000\078\000\000\000\078\000\078\000\000\000\000\000\000\000\
\000\000\078\000\000\000\078\000\000\000\000\000\078\000\078\000\
\078\000\078\000\078\000\078\000\000\000\000\000\000\000\000\000\
\000\000\079\000\000\000\079\000\079\000\000\000\079\000\000\000\
\078\000\079\000\000\000\000\000\000\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\000\079\000\079\000\079\000\079\000\079\000\079\000\
\080\000\000\000\000\000\085\000\000\000\000\000\079\000\079\000\
\079\000\000\000\079\000\079\000\000\000\000\000\000\000\000\000\
\079\000\000\000\079\000\000\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
\080\000\000\000\080\000\080\000\000\000\080\000\000\000\000\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\000\000\000\000\081\000\000\000\087\000\000\000\000\000\
\000\000\080\000\080\000\080\000\080\000\080\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\080\000\080\000\080\000\
\000\000\080\000\080\000\088\000\000\000\000\000\000\000\080\000\
\000\000\080\000\000\000\000\000\080\000\080\000\080\000\080\000\
\080\000\080\000\000\000\081\000\000\000\081\000\081\000\000\000\
\081\000\000\000\000\000\081\000\000\000\000\000\080\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\081\000\081\000\000\000\080\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\081\000\081\000\000\000\081\000\081\000\000\000\000\000\
\089\000\000\000\081\000\000\000\081\000\000\000\000\000\081\000\
\081\000\081\000\081\000\081\000\081\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\000\000\082\000\082\000\000\000\
\082\000\081\000\000\000\082\000\000\000\000\000\000\000\161\001\
\161\001\161\001\000\000\161\001\161\001\083\000\000\000\000\000\
\000\000\161\001\081\000\000\000\082\000\082\000\161\001\161\001\
\161\001\161\001\000\000\161\001\000\000\000\000\000\000\000\000\
\082\000\082\000\082\000\091\000\082\000\082\000\000\000\000\000\
\000\000\000\000\082\000\000\000\082\000\000\000\000\000\082\000\
\082\000\082\000\082\000\082\000\082\000\083\000\000\000\083\000\
\083\000\000\000\083\000\093\000\161\001\083\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\084\000\
\000\000\000\000\000\000\000\000\000\000\000\000\083\000\083\000\
\000\000\000\000\082\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\083\000\083\000\083\000\085\000\083\000\083\000\
\000\000\000\000\000\000\000\000\083\000\000\000\083\000\000\000\
\000\000\083\000\083\000\083\000\083\000\083\000\083\000\084\000\
\000\000\084\000\084\000\000\000\084\000\000\000\000\000\084\000\
\000\000\000\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\085\000\000\000\085\000\
\085\000\000\000\085\000\000\000\083\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\084\000\084\000\087\000\
\084\000\084\000\000\000\000\000\000\000\000\000\084\000\000\000\
\084\000\000\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\000\000\085\000\085\000\085\000\088\000\085\000\085\000\
\000\000\000\000\000\000\000\000\085\000\084\000\085\000\000\000\
\000\000\085\000\085\000\085\000\085\000\085\000\085\000\087\000\
\000\000\087\000\087\000\000\000\087\000\000\000\084\000\087\000\
\000\000\000\000\000\000\085\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\000\000\088\000\
\088\000\000\000\088\000\000\000\085\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\000\087\000\000\000\
\087\000\087\000\089\000\000\000\000\000\000\000\087\000\000\000\
\087\000\000\000\000\000\087\000\087\000\087\000\087\000\087\000\
\087\000\000\000\000\000\088\000\000\000\000\000\088\000\088\000\
\000\000\000\000\000\000\000\000\088\000\087\000\088\000\000\000\
\000\000\088\000\088\000\088\000\088\000\088\000\088\000\000\000\
\000\000\000\000\089\000\000\000\089\000\089\000\087\000\089\000\
\000\000\000\000\089\000\088\000\000\000\000\000\000\000\164\001\
\000\000\000\000\164\001\164\001\000\000\091\000\000\000\000\000\
\164\001\000\000\000\000\000\000\088\000\164\001\164\001\164\001\
\164\001\000\000\164\001\000\000\000\000\000\000\000\000\000\000\
\089\000\000\000\000\000\089\000\089\000\093\000\000\000\000\000\
\000\000\089\000\000\000\089\000\000\000\000\000\089\000\089\000\
\089\000\089\000\089\000\089\000\000\000\091\000\000\000\091\000\
\091\000\000\000\091\000\164\001\000\000\091\000\000\000\000\000\
\089\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\006\000\000\000\000\000\000\000\093\000\000\000\093\000\
\093\000\089\000\093\000\000\000\000\000\093\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\091\000\091\000\
\000\000\000\000\000\000\000\000\091\000\000\000\091\000\000\000\
\000\000\091\000\091\000\091\000\091\000\091\000\091\000\000\000\
\000\000\006\000\000\000\006\000\006\000\000\000\006\000\093\000\
\000\000\006\000\000\000\091\000\093\000\006\000\093\000\000\000\
\000\000\093\000\093\000\093\000\093\000\093\000\093\000\000\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\000\000\
\000\000\093\001\093\001\093\000\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\093\001\093\001\
\093\001\000\000\000\000\006\000\093\000\000\000\000\000\006\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\093\001\152\001\152\001\152\001\152\001\152\001\152\001\006\000\
\000\000\000\000\006\000\000\000\000\000\152\001\152\001\152\001\
\000\000\152\001\152\001\000\000\093\001\093\001\000\000\152\001\
\006\000\000\000\000\000\000\000\152\001\152\001\152\001\152\001\
\000\000\152\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\001\093\001\093\001\000\000\000\000\093\001\
\093\001\000\000\000\000\093\001\093\001\000\000\000\000\000\000\
\093\001\093\001\000\000\093\001\000\000\093\001\000\000\000\000\
\000\000\093\001\152\001\000\000\000\000\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\093\001\093\001\
\000\000\000\000\000\000\000\000\093\001\000\000\093\001\093\001\
\093\001\093\001\093\001\000\000\093\001\007\001\007\001\007\001\
\093\001\093\001\000\000\000\000\000\000\000\000\000\000\007\001\
\000\000\093\001\093\001\000\000\000\000\007\001\007\001\007\001\
\007\001\007\001\007\001\007\001\000\000\007\001\007\001\007\001\
\007\001\007\001\007\001\007\001\000\000\007\001\007\001\007\001\
\007\001\007\001\007\001\007\001\007\001\007\001\007\001\007\001\
\007\001\007\001\007\001\007\001\007\001\007\001\007\001\007\001\
\000\000\000\000\007\001\141\001\141\001\141\001\141\001\141\001\
\141\001\141\001\141\001\141\001\141\001\141\001\000\000\141\001\
\141\001\141\001\000\000\141\001\141\001\141\001\141\001\000\000\
\007\001\141\001\000\000\000\000\000\000\000\000\141\001\000\000\
\141\001\141\001\000\000\141\001\000\000\000\000\007\001\007\001\
\000\000\000\000\007\001\000\000\007\001\007\001\007\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\001\007\001\000\000\
\000\000\007\001\000\000\000\000\141\001\000\000\000\000\252\000\
\252\000\252\000\000\000\000\000\000\000\000\000\007\001\000\000\
\000\000\252\000\000\000\000\000\007\001\000\000\007\001\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\000\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\000\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\252\000\252\000\252\000\252\000\252\000\252\000\252\000\
\252\000\252\000\000\000\000\000\252\000\146\001\146\001\146\001\
\146\001\146\001\146\001\146\001\146\001\000\000\000\000\000\000\
\000\000\146\001\146\001\146\001\000\000\146\001\146\001\146\001\
\146\001\000\000\252\000\146\001\000\000\000\000\000\000\000\000\
\146\001\146\001\146\001\146\001\000\000\146\001\000\000\000\000\
\252\000\252\000\000\000\000\000\252\000\000\000\252\000\252\000\
\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\000\
\252\000\000\000\000\000\252\000\000\000\000\000\146\001\000\000\
\000\000\002\001\002\001\002\001\000\000\000\000\000\000\000\000\
\252\000\000\000\000\000\002\001\000\000\000\000\252\000\000\000\
\252\000\002\001\002\001\002\001\002\001\002\001\002\001\002\001\
\000\000\002\001\002\001\002\001\002\001\002\001\002\001\002\001\
\000\000\002\001\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\002\001\000\000\000\000\002\001\147\001\
\147\001\147\001\147\001\147\001\147\001\147\001\147\001\000\000\
\000\000\000\000\000\000\147\001\147\001\147\001\000\000\147\001\
\147\001\147\001\147\001\000\000\002\001\147\001\000\000\000\000\
\000\000\000\000\147\001\147\001\147\001\147\001\000\000\147\001\
\000\000\000\000\002\001\002\001\000\000\000\000\002\001\000\000\
\002\001\002\001\002\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\001\002\001\000\000\000\000\002\001\000\000\000\000\
\147\001\000\000\000\000\253\000\253\000\253\000\000\000\000\000\
\000\000\000\000\002\001\000\000\000\000\253\000\000\000\000\000\
\002\001\000\000\002\001\253\000\253\000\253\000\253\000\253\000\
\253\000\253\000\000\000\253\000\253\000\253\000\253\000\253\000\
\253\000\253\000\000\000\253\000\253\000\253\000\253\000\253\000\
\253\000\253\000\253\000\253\000\253\000\253\000\253\000\253\000\
\253\000\253\000\253\000\253\000\253\000\253\000\000\000\000\000\
\253\000\148\001\148\001\148\001\148\001\148\001\148\001\148\001\
\148\001\000\000\000\000\000\000\000\000\148\001\148\001\148\001\
\000\000\148\001\148\001\148\001\148\001\000\000\253\000\148\001\
\000\000\000\000\000\000\000\000\148\001\148\001\148\001\148\001\
\000\000\148\001\000\000\000\000\253\000\253\000\000\000\000\000\
\253\000\000\000\253\000\253\000\253\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\253\000\253\000\000\000\000\000\253\000\
\000\000\000\000\148\001\000\000\000\000\083\001\083\001\083\001\
\000\000\000\000\000\000\000\000\253\000\000\000\000\000\083\001\
\000\000\000\000\253\000\000\000\253\000\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\000\000\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\000\000\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
\083\001\083\001\083\001\083\001\083\001\083\001\083\001\083\001\
\165\001\000\000\083\001\165\001\165\001\000\000\000\000\000\000\
\000\000\165\001\000\000\000\000\000\000\000\000\165\001\165\001\
\165\001\165\001\000\000\165\001\000\000\000\000\084\001\084\001\
\083\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
\084\001\084\001\084\001\084\001\084\001\084\001\083\001\000\000\
\000\000\000\000\083\001\000\000\083\001\083\001\083\001\000\000\
\000\000\000\000\000\000\000\000\165\001\084\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\001\083\001\000\000\
\000\000\083\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\084\001\084\001\000\000\084\001\169\001\083\001\000\000\
\000\000\000\000\169\001\000\000\083\001\000\000\083\001\169\001\
\169\001\169\001\169\001\000\000\169\001\000\000\000\000\084\001\
\084\001\084\001\000\000\000\000\084\001\084\001\000\000\000\000\
\084\001\084\001\000\000\000\000\000\000\084\001\084\001\084\001\
\084\001\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
\000\000\000\000\000\000\000\000\000\000\169\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\001\084\001\084\001\084\001\084\001\
\000\000\084\001\000\000\000\000\000\000\084\001\084\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\001\084\001\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\000\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\172\000\172\000\172\000\000\000\000\000\172\000\172\000\
\000\000\000\000\172\000\172\000\000\000\000\000\000\000\172\000\
\172\000\000\000\172\000\172\000\172\000\000\000\000\000\000\000\
\172\000\000\000\000\000\000\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\000\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\172\000\172\000\000\000\172\000\000\000\000\000\172\000\172\000\
\172\000\172\000\172\000\172\000\000\000\000\000\000\000\172\000\
\172\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\000\165\000\165\000\000\000\000\000\165\000\
\165\000\000\000\000\000\165\000\165\000\000\000\000\000\000\000\
\165\000\165\000\000\000\165\000\165\000\165\000\000\000\000\000\
\000\000\165\000\000\000\000\000\000\000\165\000\165\000\165\000\
\165\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\000\000\165\000\165\000\165\000\165\000\165\000\165\000\165\000\
\165\000\165\000\165\000\000\000\165\000\000\000\000\000\000\000\
\165\000\165\000\165\000\165\000\165\000\000\000\000\000\000\000\
\165\000\165\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\000\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\180\000\180\000\180\000\000\000\000\000\
\180\000\180\000\000\000\000\000\180\000\180\000\000\000\000\000\
\000\000\180\000\180\000\000\000\180\000\180\000\180\000\000\000\
\000\000\000\000\180\000\000\000\000\000\000\000\180\000\180\000\
\180\000\180\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\000\000\180\000\180\000\180\000\180\000\180\000\180\000\
\180\000\180\000\180\000\180\000\000\000\180\000\000\000\000\000\
\000\000\180\000\180\000\180\000\180\000\180\000\000\000\000\000\
\000\000\180\000\180\000\152\002\153\002\006\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\007\000\079\000\080\000\
\081\000\082\000\083\000\008\000\009\000\010\000\011\000\012\000\
\013\000\014\000\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\084\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\130\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\085\000\086\000\
\041\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\088\000\089\000\000\000\
\000\000\090\000\091\000\000\000\000\000\092\000\093\000\000\000\
\000\000\000\000\094\000\095\000\000\000\096\000\000\000\220\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\154\002\
\155\002\156\002\157\002\158\002\159\002\160\002\161\002\162\002\
\163\002\164\002\000\000\043\000\044\000\045\000\165\002\047\000\
\097\000\098\000\099\000\100\000\101\000\000\000\102\000\000\000\
\000\000\000\000\103\000\104\000\048\000\049\000\050\000\000\000\
\000\000\000\000\053\000\105\000\243\000\071\000\006\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\007\000\079\000\
\080\000\081\000\082\000\083\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\084\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\130\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\085\000\
\086\000\041\000\167\001\167\001\000\000\000\000\000\000\000\000\
\167\001\000\000\000\000\000\000\000\000\167\001\167\001\167\001\
\167\001\000\000\167\001\000\000\000\000\087\000\088\000\089\000\
\000\000\000\000\090\000\091\000\000\000\000\000\092\000\093\000\
\000\000\000\000\000\000\094\000\095\000\000\000\096\000\000\000\
\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\167\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\044\000\000\000\000\000\
\047\000\097\000\098\000\099\000\100\000\101\000\000\000\102\000\
\000\000\000\000\000\000\103\000\104\000\048\000\000\000\000\000\
\000\000\000\000\000\000\053\000\105\000\081\001\071\000\006\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\007\000\
\079\000\080\000\081\000\082\000\083\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\084\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\085\000\086\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\088\000\
\089\000\000\000\000\000\090\000\091\000\000\000\000\000\092\000\
\093\000\000\000\000\000\000\000\094\000\095\000\000\000\096\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\045\000\
\000\000\047\000\097\000\098\000\099\000\100\000\101\000\000\000\
\102\000\000\000\000\000\000\000\103\000\104\000\048\000\000\000\
\000\000\000\000\000\000\000\000\053\000\105\000\081\001\071\000\
\006\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\007\000\079\000\080\000\081\000\082\000\083\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\084\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\130\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\085\000\086\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\088\000\089\000\000\000\000\000\090\000\091\000\000\000\000\000\
\092\000\093\000\000\000\000\000\000\000\094\000\095\000\000\000\
\096\000\152\002\242\002\006\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\079\000\080\000\081\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\000\000\000\000\047\000\097\000\098\000\099\000\100\000\101\000\
\084\000\102\000\000\000\000\000\000\000\103\000\104\000\048\000\
\000\000\000\000\000\000\000\000\000\000\053\000\105\000\000\000\
\000\000\000\000\000\000\040\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\089\000\000\000\000\000\090\000\
\091\000\000\000\000\000\092\000\093\000\000\000\000\000\000\000\
\094\000\095\000\000\000\096\000\000\000\220\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\002\155\002\156\002\
\157\002\158\002\159\002\160\002\161\002\162\002\163\002\164\002\
\000\000\043\000\000\000\000\000\165\002\000\000\097\000\098\000\
\099\000\100\000\101\000\000\000\102\000\000\000\000\000\000\000\
\103\000\104\000\048\000\000\000\000\000\000\000\000\000\093\001\
\093\001\105\000\093\001\093\001\093\001\093\001\093\001\093\001\
\093\001\000\000\093\001\093\001\093\001\093\001\093\001\149\001\
\149\001\149\001\149\001\149\001\149\001\000\000\000\000\000\000\
\000\000\000\000\000\000\149\001\149\001\149\001\093\001\149\001\
\149\001\149\001\149\001\000\000\000\000\149\001\000\000\000\000\
\000\000\000\000\149\001\149\001\149\001\149\001\000\000\149\001\
\000\000\000\000\093\001\093\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\093\001\093\001\093\001\000\000\000\000\093\001\093\001\000\000\
\149\001\093\001\093\001\000\000\000\000\000\000\093\001\093\001\
\000\000\093\001\170\000\093\001\000\000\000\000\000\000\093\001\
\000\000\000\000\000\000\093\001\093\001\093\001\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\000\000\000\000\
\000\000\000\000\093\001\000\000\093\001\093\001\093\001\093\001\
\093\001\000\000\093\001\000\000\000\000\000\000\093\001\093\001\
\000\000\000\000\000\000\000\000\000\000\152\002\242\002\093\001\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\079\000\080\000\081\000\082\000\083\000\150\001\150\001\150\001\
\150\001\150\001\150\001\000\000\000\000\000\000\000\000\000\000\
\000\000\150\001\150\001\150\001\084\000\150\001\150\001\150\001\
\150\001\000\000\000\000\150\001\000\000\000\000\000\000\000\000\
\150\001\150\001\150\001\150\001\000\000\150\001\000\000\000\000\
\085\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\088\000\
\089\000\000\000\000\000\090\000\091\000\000\000\150\001\092\000\
\093\000\000\000\000\000\000\000\094\000\095\000\000\000\096\000\
\000\000\220\000\000\000\000\000\000\000\083\003\000\000\000\000\
\000\000\154\002\155\002\156\002\157\002\158\002\159\002\160\002\
\161\002\162\002\163\002\164\002\000\000\000\000\000\000\000\000\
\165\002\000\000\097\000\098\000\099\000\100\000\101\000\000\000\
\102\000\000\000\000\000\000\000\103\000\104\000\000\000\000\000\
\000\000\000\000\000\000\093\001\093\001\105\000\093\001\093\001\
\093\001\093\001\093\001\093\001\093\001\000\000\093\001\093\001\
\093\001\093\001\093\001\151\001\151\001\151\001\151\001\151\001\
\151\001\000\000\000\000\000\000\000\000\000\000\000\000\151\001\
\151\001\151\001\093\001\151\001\151\001\151\001\151\001\000\000\
\000\000\151\001\000\000\000\000\000\000\000\000\151\001\151\001\
\151\001\151\001\000\000\151\001\000\000\000\000\093\001\093\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\093\001\093\001\093\001\000\000\
\000\000\093\001\093\001\000\000\151\001\093\001\093\001\000\000\
\000\000\000\000\093\001\093\001\000\000\093\001\000\000\093\001\
\000\000\000\000\000\000\093\001\000\000\000\000\000\000\093\001\
\093\001\093\001\093\001\093\001\093\001\093\001\093\001\093\001\
\093\001\093\001\000\000\000\000\000\000\000\000\093\001\000\000\
\093\001\093\001\093\001\093\001\093\001\000\000\093\001\000\000\
\000\000\000\000\093\001\093\001\000\000\000\000\000\000\000\000\
\000\000\000\000\130\002\093\001\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\136\000\079\000\080\000\081\000\082\000\
\083\000\153\001\153\001\153\001\153\001\153\001\153\001\000\000\
\000\000\000\000\000\000\000\000\000\000\153\001\153\001\153\001\
\084\000\153\001\153\001\000\000\000\000\000\000\000\000\153\001\
\000\000\000\000\000\000\000\000\153\001\153\001\153\001\153\001\
\000\000\153\001\000\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\131\002\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\089\000\000\000\000\000\090\000\
\091\000\000\000\153\001\092\000\093\000\000\000\000\000\000\000\
\094\000\095\000\000\000\096\000\000\000\048\002\132\002\081\001\
\071\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\079\000\080\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\101\000\000\000\102\000\000\000\084\000\000\000\
\103\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\140\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\085\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\000\088\000\089\000\000\000\000\000\090\000\091\000\000\000\
\000\000\092\000\093\000\000\000\000\000\000\000\094\000\095\000\
\000\000\096\000\000\000\000\000\000\000\084\001\084\001\235\002\
\084\001\084\001\084\001\084\001\084\001\084\001\084\001\000\000\
\084\001\084\001\084\001\084\001\084\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\101\000\000\000\102\000\000\000\084\001\000\000\103\000\104\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\001\084\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\001\084\001\
\084\001\000\000\000\000\084\001\084\001\000\000\000\000\084\001\
\084\001\000\000\000\000\000\000\084\001\084\001\000\000\084\001\
\000\000\000\000\000\000\084\001\081\001\071\000\000\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\000\000\079\000\
\080\000\081\000\082\000\083\000\000\000\000\000\000\000\000\000\
\006\000\000\000\084\001\084\001\084\001\084\001\084\001\000\000\
\084\001\000\000\000\000\084\000\084\001\084\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\084\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
\086\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\006\000\006\000\000\000\006\000\000\000\000\000\
\006\000\000\000\000\000\000\000\006\000\087\000\088\000\089\000\
\000\000\000\000\090\000\091\000\000\000\000\000\092\000\093\000\
\000\000\000\000\000\000\094\000\095\000\000\000\096\000\176\001\
\071\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\079\000\080\000\081\000\082\000\083\000\006\000\
\000\000\000\000\000\000\000\000\000\000\006\000\006\000\006\000\
\000\000\097\000\098\000\099\000\100\000\101\000\084\000\102\000\
\000\000\000\000\000\000\103\000\104\000\000\000\006\000\000\000\
\000\000\006\000\000\000\000\000\105\000\000\000\000\000\000\000\
\000\000\000\000\085\000\086\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\000\088\000\089\000\000\000\000\000\090\000\091\000\000\000\
\000\000\092\000\093\000\000\000\000\000\000\000\094\000\095\000\
\000\000\096\000\221\002\071\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\000\000\079\000\080\000\081\000\
\082\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\101\000\084\000\102\000\000\000\000\000\000\000\103\000\104\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\105\000\
\000\000\000\000\000\000\000\000\000\000\085\000\086\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\087\000\088\000\089\000\000\000\000\000\
\090\000\091\000\000\000\000\000\092\000\093\000\000\000\000\000\
\000\000\094\000\095\000\000\000\096\000\036\003\071\000\000\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\000\000\
\079\000\080\000\081\000\082\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\098\000\099\000\100\000\101\000\084\000\102\000\000\000\000\000\
\000\000\103\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\105\000\000\000\000\000\000\000\000\000\000\000\
\085\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\088\000\
\089\000\000\000\000\000\090\000\091\000\000\000\000\000\092\000\
\093\000\000\000\000\000\000\000\094\000\095\000\000\000\096\000\
\122\003\071\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\079\000\080\000\081\000\082\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\098\000\099\000\100\000\101\000\084\000\
\102\000\000\000\000\000\000\000\103\000\104\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\105\000\000\000\000\000\
\000\000\000\000\000\000\085\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\088\000\089\000\000\000\000\000\090\000\091\000\
\000\000\000\000\092\000\093\000\000\000\000\000\000\000\094\000\
\095\000\000\000\096\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\097\000\098\000\099\000\
\100\000\101\000\000\000\102\000\000\000\000\000\000\000\103\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\071\000\006\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\007\000\079\000\080\000\081\000\082\000\083\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\000\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\084\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\130\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\085\000\086\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\088\000\089\000\000\000\000\000\090\000\091\000\
\000\000\000\000\092\000\093\000\000\000\000\000\000\000\094\000\
\095\000\000\000\096\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\044\000\000\000\000\000\047\000\097\000\098\000\099\000\
\100\000\101\000\058\001\102\000\006\000\000\000\000\000\103\000\
\104\000\048\000\000\000\000\000\007\000\000\000\000\000\053\000\
\105\000\000\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\000\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\130\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\146\000\000\000\146\000\
\146\000\146\000\146\000\146\000\146\000\146\000\000\000\146\000\
\146\000\146\000\146\000\146\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\001\146\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\044\000\045\000\000\000\047\000\146\000\
\146\000\000\000\146\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\146\000\146\000\146\000\
\000\000\000\000\146\000\146\000\000\000\000\000\146\000\146\000\
\000\000\000\000\000\000\146\000\146\000\000\000\146\000\000\000\
\146\000\000\000\071\000\000\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\079\000\080\000\081\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\146\000\146\000\146\000\146\000\146\000\000\000\146\000\
\084\000\000\000\000\000\146\000\146\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\146\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\089\000\000\000\000\000\090\000\
\091\000\000\000\000\000\092\000\093\000\000\000\000\000\000\000\
\094\000\095\000\000\000\096\000\000\000\048\002\000\000\071\000\
\000\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\000\000\079\000\080\000\081\000\082\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\101\000\000\000\102\000\084\000\000\000\000\000\
\103\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\088\000\089\000\000\000\000\000\090\000\091\000\000\000\000\000\
\092\000\093\000\000\000\000\000\000\000\094\000\095\000\000\000\
\096\000\000\000\070\002\000\000\142\000\000\000\142\000\142\000\
\142\000\142\000\142\000\142\000\142\000\000\000\142\000\142\000\
\142\000\142\000\142\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\000\000\102\000\142\000\000\000\000\000\103\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\142\000\142\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\142\000\142\000\142\000\000\000\
\000\000\142\000\142\000\000\000\000\000\142\000\142\000\000\000\
\000\000\000\000\142\000\142\000\000\000\142\000\000\000\142\000\
\000\000\071\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\079\000\080\000\081\000\082\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\142\000\142\000\142\000\142\000\142\000\000\000\142\000\084\000\
\000\000\000\000\142\000\142\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\142\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\088\000\089\000\000\000\000\000\090\000\091\000\
\000\000\000\000\092\000\093\000\000\000\000\000\000\000\094\000\
\095\000\000\000\096\000\000\000\071\000\000\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\000\000\079\000\080\000\
\081\000\082\000\083\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\097\000\098\000\099\000\
\100\000\101\000\084\000\102\000\000\000\000\000\000\000\103\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\000\000\000\000\000\000\000\000\000\000\085\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\000\088\000\089\000\000\000\
\000\000\090\000\091\000\000\000\000\000\092\000\093\000\000\000\
\000\000\000\000\094\000\095\000\000\000\229\000\000\000\071\000\
\000\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\000\000\079\000\080\000\081\000\082\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\097\000\098\000\099\000\100\000\101\000\084\000\102\000\000\000\
\000\000\000\000\103\000\104\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\105\000\000\000\000\000\000\000\000\000\
\000\000\085\000\086\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
\088\000\089\000\000\000\000\000\090\000\091\000\000\000\000\000\
\092\000\093\000\000\000\000\000\000\000\094\000\095\000\000\000\
\231\000\000\000\071\000\000\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\000\000\079\000\080\000\081\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\097\000\098\000\099\000\100\000\101\000\
\084\000\102\000\000\000\000\000\000\000\103\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\000\000\085\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\088\000\089\000\000\000\000\000\090\000\
\091\000\000\000\000\000\092\000\093\000\000\000\000\000\000\000\
\094\000\095\000\000\000\240\000\000\000\071\000\000\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\000\000\079\000\
\080\000\081\000\082\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\098\000\
\099\000\100\000\101\000\084\000\102\000\000\000\000\000\000\000\
\103\000\104\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\000\000\000\000\000\000\000\000\000\000\085\000\
\086\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\000\088\000\089\000\
\000\000\000\000\090\000\091\000\000\000\000\000\092\000\093\000\
\000\000\000\000\000\000\094\000\095\000\000\000\093\001\000\000\
\071\000\000\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\000\000\079\000\080\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\097\000\098\000\099\000\100\000\101\000\084\000\102\000\
\000\000\000\000\000\000\103\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\105\000\000\000\000\000\000\000\
\000\000\000\000\085\000\086\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\087\000\088\000\089\000\000\000\000\000\090\000\091\000\000\000\
\000\000\092\000\093\000\000\000\000\000\000\000\094\000\095\000\
\000\000\095\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\098\000\099\000\100\000\
\101\000\000\000\102\000\005\000\006\000\000\000\103\000\104\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\105\000\
\000\000\000\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\000\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\000\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\107\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\001\
\107\001\107\001\107\001\107\001\107\001\107\001\107\001\107\001\
\107\001\107\001\107\001\107\001\000\000\107\001\107\001\107\001\
\000\000\107\001\107\001\107\001\107\001\000\000\000\000\107\001\
\000\000\000\000\042\000\107\001\107\001\107\001\107\001\107\001\
\000\000\107\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\044\000\045\000\046\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\006\000\000\000\
\000\000\000\000\000\000\048\000\049\000\050\000\007\000\051\000\
\052\000\053\000\107\001\000\000\008\000\009\000\010\000\011\000\
\012\000\013\000\014\000\000\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\006\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\007\000\
\079\000\080\000\081\000\082\000\083\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\157\001\157\001\043\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\000\000\157\001\157\001\
\157\001\000\000\157\001\157\001\000\000\048\000\049\000\050\000\
\157\001\051\000\052\000\053\000\000\000\157\001\157\001\157\001\
\157\001\000\000\157\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\000\000\047\000\000\000\000\000\099\000\100\000\000\000\118\000\
\000\000\000\000\000\000\157\001\000\000\000\000\048\000\118\000\
\000\000\000\000\000\000\000\000\053\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\000\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\000\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\000\000\000\000\118\000\000\000\000\000\113\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\113\001\113\001\113\001\113\001\113\001\113\001\113\001\113\001\
\113\001\113\001\113\001\113\001\113\001\000\000\113\001\113\001\
\113\001\000\000\113\001\113\001\113\001\113\001\118\000\118\000\
\113\001\118\000\000\000\000\000\113\001\113\001\113\001\113\001\
\113\001\000\000\113\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\118\000\118\000\118\000\
\000\000\118\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\007\000\
\000\000\000\000\000\000\113\001\118\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\041\000\000\000\112\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\112\001\
\112\001\112\001\112\001\112\001\112\001\112\001\112\001\112\001\
\112\001\112\001\112\001\112\001\000\000\112\001\112\001\112\001\
\000\000\112\001\112\001\112\001\112\001\000\000\000\000\112\001\
\000\000\071\001\000\000\112\001\112\001\000\000\112\001\112\001\
\000\000\112\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\045\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\007\000\
\000\000\000\000\112\001\000\000\053\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\041\000\154\001\154\001\154\001\154\001\154\001\
\154\001\000\000\000\000\000\000\000\000\000\000\000\000\154\001\
\154\001\154\001\000\000\154\001\154\001\000\000\000\000\000\000\
\000\000\154\001\000\000\000\000\000\000\000\000\154\001\154\001\
\154\001\154\001\000\000\154\001\000\000\000\000\000\000\044\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\086\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\000\000\047\000\000\000\000\000\154\001\000\000\000\000\039\001\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\039\001\
\000\000\000\000\000\000\000\000\053\000\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\000\000\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\000\000\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\039\001\039\001\039\001\039\001\
\039\001\039\001\039\001\039\001\039\001\039\001\039\001\039\001\
\000\000\000\000\039\001\000\000\000\000\127\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\001\127\001\127\001\127\001\127\001\127\001\
\127\001\127\001\127\001\127\001\127\001\000\000\127\001\127\001\
\127\001\000\000\127\001\127\001\127\001\127\001\039\001\039\001\
\127\001\000\000\000\000\000\000\000\000\127\001\127\001\127\001\
\127\001\000\000\127\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\001\039\001\000\000\
\000\000\039\001\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\001\007\000\
\000\000\000\000\000\000\127\001\039\001\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\041\000\000\000\000\000\132\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\132\001\132\001\132\001\132\001\132\001\132\001\
\132\001\132\001\132\001\132\001\132\001\000\000\132\001\132\001\
\132\001\000\000\132\001\132\001\132\001\132\001\000\000\044\001\
\132\001\000\000\000\000\000\000\000\000\132\001\132\001\132\001\
\132\001\000\000\132\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\007\000\
\000\000\000\000\000\000\132\001\053\000\008\000\009\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\000\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\130\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\006\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\130\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\041\000\000\000\000\000\000\000\175\002\
\000\000\000\000\158\001\158\001\000\000\043\000\044\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\158\001\158\001\
\158\001\000\000\158\001\158\001\000\000\000\000\048\000\000\000\
\158\001\000\000\000\000\000\000\053\000\158\001\158\001\158\001\
\158\001\000\000\158\001\000\000\000\000\000\000\000\000\000\000\
\060\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\000\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\158\001\000\000\000\000\000\000\048\000\
\007\000\000\000\000\000\000\000\000\000\053\000\008\000\009\000\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\000\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\130\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\006\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\009\000\010\000\011\000\012\000\013\000\014\000\000\000\015\000\
\016\000\017\000\018\000\019\000\020\000\021\000\000\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\032\000\130\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\084\001\167\000\000\000\000\000\000\000\043\000\044\000\
\168\000\169\000\047\000\170\000\079\000\080\000\081\000\082\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\000\000\
\000\000\171\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\172\000\000\000\000\000\173\000\000\000\
\000\000\000\000\084\001\167\000\174\000\175\000\000\000\043\000\
\044\000\168\000\169\000\047\000\170\000\079\000\080\000\081\000\
\082\000\083\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\176\000\177\000\178\000\000\000\053\000\179\000\
\180\000\000\000\171\000\181\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\002\182\000\172\000\000\000\000\000\173\000\
\000\000\000\000\000\000\000\000\000\000\174\000\175\000\000\000\
\000\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\184\000\185\000\
\099\000\100\000\186\000\176\000\177\000\178\000\000\000\000\000\
\179\000\180\000\000\000\000\000\181\000\000\000\251\001\167\000\
\000\000\000\000\000\000\000\000\182\000\168\000\169\000\000\000\
\170\000\079\000\080\000\081\000\082\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\183\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\171\000\184\000\
\185\000\099\000\100\000\186\000\000\000\000\000\000\000\000\000\
\172\000\000\000\000\000\173\000\000\000\000\000\000\000\118\002\
\167\000\174\000\175\000\000\000\000\000\000\000\168\000\169\000\
\000\000\170\000\079\000\080\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\176\000\
\177\000\178\000\000\000\000\000\179\000\180\000\000\000\171\000\
\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\182\000\172\000\000\000\000\000\173\000\000\000\000\000\000\000\
\000\000\000\000\174\000\175\000\167\000\000\000\000\000\000\000\
\183\000\000\000\168\000\169\000\000\000\170\000\079\000\080\000\
\081\000\082\000\083\000\184\000\185\000\099\000\100\000\186\000\
\176\000\177\000\178\000\000\000\000\000\179\000\180\000\000\000\
\000\000\181\000\000\000\171\000\000\000\000\000\000\000\000\000\
\000\000\182\000\000\000\000\000\000\000\172\000\000\000\000\000\
\173\000\000\000\000\000\000\000\000\000\000\000\174\000\175\000\
\000\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\184\000\185\000\099\000\100\000\
\186\000\000\000\000\000\000\000\176\000\177\000\178\000\000\000\
\000\000\179\000\180\000\000\000\000\000\181\000\155\001\155\001\
\155\001\155\001\155\001\155\001\000\000\182\000\000\000\000\000\
\000\000\000\000\155\001\155\001\155\001\000\000\155\001\155\001\
\000\000\000\000\000\000\000\000\155\001\183\000\000\000\000\000\
\134\001\155\001\155\001\155\001\155\001\000\000\155\001\000\000\
\184\000\185\000\099\000\100\000\186\000\134\001\134\001\134\001\
\134\001\134\001\134\001\134\001\134\001\134\001\134\001\134\001\
\000\000\134\001\134\001\134\001\000\000\134\001\134\001\134\001\
\134\001\000\000\000\000\134\001\000\000\000\000\000\000\155\001\
\134\001\134\001\134\001\134\001\000\000\134\001\000\000\156\001\
\156\001\156\001\156\001\156\001\156\001\000\000\000\000\000\000\
\000\000\000\000\000\000\156\001\156\001\156\001\000\000\156\001\
\156\001\000\000\000\000\000\000\000\000\156\001\159\001\159\001\
\000\000\000\000\156\001\156\001\156\001\156\001\134\001\156\001\
\000\000\000\000\159\001\159\001\159\001\000\000\159\001\159\001\
\000\000\000\000\000\000\000\000\159\001\000\000\000\000\000\000\
\000\000\159\001\159\001\159\001\159\001\000\000\159\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\156\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\159\001\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\023\000\000\000\023\000\
\000\000\018\000\000\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\023\000\000\000\000\000\023\000\000\000\000\000\
\023\000\023\000\000\000\023\000"

let yycheck = "\003\000\
\033\000\058\000\152\000\050\000\042\000\163\000\001\000\002\000\
\058\000\096\000\144\001\005\000\048\001\139\000\246\000\077\001\
\050\000\001\000\002\000\057\000\000\000\146\001\133\001\000\000\
\054\001\055\001\001\001\001\000\002\000\070\002\001\001\001\000\
\002\000\044\001\000\000\010\001\210\001\055\002\022\000\010\001\
\158\002\167\000\026\000\161\002\090\001\244\002\164\002\042\000\
\162\002\033\000\034\000\228\000\001\001\000\001\038\000\039\000\
\054\002\220\002\042\000\096\000\044\000\010\001\057\000\001\000\
\002\000\001\001\001\001\000\001\042\000\045\001\000\001\211\002\
\042\000\057\000\010\001\059\000\062\000\164\000\000\001\066\001\
\064\000\000\001\000\001\057\000\000\000\069\000\084\001\057\000\
\090\001\108\000\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\099\001\089\001\046\003\
\042\000\075\001\093\001\143\001\148\000\016\003\096\000\147\001\
\024\000\025\000\092\001\027\000\001\001\092\001\165\000\057\000\
\090\001\158\000\001\001\093\001\001\001\010\001\240\002\164\000\
\075\001\001\001\163\000\010\001\151\000\010\001\052\002\182\000\
\225\001\226\001\010\001\023\003\246\000\000\001\229\000\092\001\
\231\000\129\000\130\000\090\003\182\000\147\002\134\000\090\001\
\084\001\240\000\158\000\090\001\092\001\152\000\162\000\092\001\
\144\000\091\001\137\001\096\001\148\000\183\002\137\001\099\001\
\152\000\047\002\092\001\155\000\213\002\092\001\092\001\001\001\
\112\001\008\001\009\001\037\003\038\003\043\003\152\000\041\003\
\010\001\073\001\074\001\001\001\137\001\047\003\065\001\066\001\
\229\000\129\001\231\000\045\001\246\000\227\001\075\001\005\002\
\006\002\137\001\206\000\240\000\089\001\090\001\217\001\090\001\
\093\001\040\001\205\000\090\001\097\001\090\001\152\000\210\000\
\253\000\254\000\093\001\096\001\092\001\205\000\176\000\177\000\
\178\000\179\000\180\000\181\000\001\001\087\003\142\000\205\000\
\001\001\092\001\146\000\205\000\001\001\010\001\150\000\097\003\
\112\001\010\001\090\001\229\000\045\001\231\000\042\001\105\003\
\252\000\045\001\128\002\045\001\137\001\025\000\240\000\027\000\
\054\001\129\001\137\001\001\001\137\001\075\001\093\001\096\002\
\095\001\137\001\092\001\205\000\010\001\124\002\139\002\072\001\
\090\001\053\002\219\000\059\001\000\001\000\001\062\001\000\001\
\064\001\065\001\085\001\086\001\068\001\069\001\077\001\067\002\
\068\002\071\001\000\001\022\000\001\001\091\001\000\000\026\000\
\174\002\088\001\243\000\097\001\066\001\010\001\033\000\034\000\
\084\002\090\001\075\001\038\000\039\000\048\001\075\001\137\001\
\093\001\044\000\095\001\090\001\044\001\113\001\075\001\092\001\
\089\001\090\001\113\001\114\001\093\001\090\001\095\001\093\001\
\097\001\160\001\161\001\059\001\071\001\064\000\062\001\113\001\
\064\001\065\001\095\001\112\001\068\001\069\001\002\001\071\001\
\096\001\091\001\215\002\141\001\004\001\005\001\092\001\097\001\
\230\002\071\001\000\002\075\001\129\001\071\001\011\001\012\001\
\013\001\014\001\015\001\093\001\137\001\095\001\075\001\091\001\
\137\001\092\001\092\001\143\000\137\001\096\001\097\001\095\001\
\096\001\112\001\000\003\001\001\132\001\090\001\042\001\120\003\
\044\001\045\001\090\001\047\001\010\001\071\001\050\001\001\001\
\129\003\094\001\129\001\137\001\075\001\098\001\146\001\130\000\
\010\001\001\001\001\001\089\001\143\001\144\001\089\001\001\001\
\147\001\089\001\010\001\097\001\000\001\001\001\097\001\095\001\
\010\001\115\001\116\001\117\001\042\003\201\002\060\002\083\001\
\084\001\089\001\089\001\000\001\137\001\089\001\001\001\091\001\
\095\001\097\001\094\001\095\001\096\001\097\001\098\001\099\001\
\001\001\096\001\089\001\090\001\228\001\059\002\093\001\231\001\
\095\001\010\001\097\001\090\001\112\001\075\001\238\001\111\001\
\112\001\241\001\001\001\148\001\180\002\245\001\090\001\001\001\
\001\001\075\001\119\001\120\001\090\001\129\001\005\002\006\002\
\010\001\010\001\096\001\195\002\075\001\089\001\089\001\000\002\
\090\001\075\001\230\001\093\001\212\001\097\001\097\001\075\001\
\090\001\217\001\090\001\090\001\090\001\093\001\090\001\093\001\
\090\001\096\001\000\000\044\002\228\001\089\001\090\001\231\001\
\075\001\093\001\051\002\095\001\096\001\097\001\238\001\091\001\
\002\001\241\001\090\001\137\001\096\001\245\001\000\001\090\001\
\248\001\249\001\250\001\067\001\068\001\096\001\091\001\137\001\
\166\002\090\001\168\002\096\001\001\001\171\002\079\001\091\001\
\081\002\137\001\137\001\089\001\096\001\010\001\066\003\137\001\
\094\001\095\001\096\001\072\002\073\002\137\001\081\001\089\001\
\090\001\090\001\080\001\093\001\048\002\095\001\000\000\097\001\
\050\001\083\001\094\001\001\001\047\002\097\001\137\001\073\001\
\074\001\144\002\053\002\054\002\054\001\001\001\102\002\090\001\
\137\001\060\002\070\002\001\000\002\000\003\000\157\002\055\002\
\067\002\068\002\068\002\090\001\060\002\166\002\093\001\168\002\
\001\003\002\003\171\002\090\001\088\002\090\001\060\002\137\001\
\137\001\084\002\060\002\075\001\076\001\077\001\244\002\089\001\
\100\002\184\002\092\001\085\001\086\001\095\001\096\001\097\001\
\092\001\050\002\095\001\089\001\089\001\090\001\112\001\093\001\
\093\001\095\001\095\001\097\001\097\001\094\001\102\002\000\001\
\097\001\002\001\060\002\095\001\050\000\092\001\098\001\129\001\
\132\002\090\001\180\002\008\001\093\001\128\002\092\001\139\002\
\048\002\054\001\195\002\095\001\085\002\069\001\070\001\071\001\
\072\001\195\002\079\001\234\002\067\001\068\001\237\002\081\001\
\147\002\000\001\001\001\159\002\137\001\244\002\070\002\096\001\
\097\001\042\001\074\002\044\001\045\001\080\001\047\001\162\002\
\001\001\050\001\208\002\166\002\083\001\168\002\096\001\097\001\
\171\002\025\001\026\001\174\002\096\001\097\001\166\002\097\001\
\168\002\054\001\000\001\171\002\027\001\028\001\174\002\096\001\
\166\002\122\001\168\002\096\001\166\002\171\002\168\002\183\002\
\102\003\171\002\075\001\076\001\077\001\209\002\201\002\152\002\
\097\001\213\002\001\001\215\002\097\001\208\002\015\003\046\003\
\246\002\247\002\248\002\131\002\000\000\033\001\034\001\089\001\
\208\002\118\001\119\001\089\001\166\002\089\001\168\002\112\001\
\096\001\171\002\208\002\230\002\220\002\089\001\208\002\165\000\
\054\001\120\001\121\001\097\001\002\001\240\002\126\001\127\001\
\129\001\244\002\176\000\177\000\178\000\179\000\180\000\181\000\
\182\000\089\001\001\001\090\003\244\002\000\003\249\001\250\001\
\092\001\091\001\097\001\000\001\001\001\096\001\208\002\096\001\
\000\003\092\001\244\002\089\001\024\003\010\001\092\001\092\001\
\091\001\095\001\096\001\097\001\042\001\089\001\044\001\045\001\
\016\003\047\001\089\001\039\003\050\001\238\002\089\001\089\001\
\241\002\089\001\037\003\038\003\245\002\213\002\041\003\042\003\
\002\001\089\001\244\002\097\001\047\003\087\000\088\000\089\000\
\090\000\091\000\092\000\069\001\070\001\071\001\072\001\097\000\
\098\000\089\001\097\001\101\000\089\001\102\003\084\001\066\003\
\007\001\089\001\007\001\089\001\007\001\091\001\132\001\000\000\
\094\001\095\001\096\001\097\001\098\001\099\001\075\001\032\003\
\042\001\091\001\044\001\045\001\087\003\047\001\091\001\040\003\
\050\001\089\001\112\001\001\001\089\001\090\001\097\003\091\001\
\093\001\089\001\095\001\096\001\097\001\126\001\105\003\097\001\
\089\001\089\001\118\003\129\001\011\001\012\001\013\001\014\001\
\015\001\090\001\097\001\097\001\069\003\070\003\080\001\081\001\
\073\003\083\001\084\001\097\001\077\003\089\001\089\001\089\001\
\094\001\091\001\095\001\089\001\094\001\095\001\096\001\097\001\
\098\001\099\001\054\001\091\001\137\001\089\001\095\003\077\001\
\029\001\030\001\031\001\032\001\095\001\089\001\112\001\000\000\
\097\001\106\003\088\001\011\001\012\001\013\001\014\001\015\001\
\113\003\096\001\083\001\084\001\091\001\091\001\091\001\129\001\
\089\001\122\001\123\001\124\001\125\001\094\001\095\001\096\001\
\097\001\091\001\099\001\113\001\114\001\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\122\001\123\001\124\001\125\001\
\126\001\127\001\128\001\129\001\130\001\131\001\132\001\133\001\
\091\001\089\001\096\001\089\001\094\001\079\001\080\001\081\001\
\089\001\083\001\084\001\132\001\095\001\097\001\002\001\089\001\
\119\001\120\001\001\001\001\001\094\001\095\001\096\001\097\001\
\097\001\099\001\096\001\092\001\096\001\093\001\091\001\091\001\
\091\001\091\001\089\001\097\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\042\001\000\000\
\044\001\045\001\132\001\047\001\092\001\092\001\050\001\119\001\
\120\001\054\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\097\001\079\001\080\001\081\001\095\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\091\001\093\001\094\001\095\001\096\001\097\001\098\001\099\001\
\089\001\089\001\089\001\095\001\090\001\002\001\094\001\095\001\
\096\001\097\001\089\001\096\001\112\001\084\001\096\001\005\002\
\006\002\002\001\089\001\000\000\090\001\095\001\090\001\094\001\
\095\001\096\001\097\001\096\001\099\001\129\001\091\001\096\001\
\132\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\132\001\042\001\095\001\044\001\
\045\001\095\001\047\001\089\001\091\001\050\001\089\001\089\001\
\097\001\042\001\094\001\044\001\045\001\132\001\047\001\096\001\
\091\001\050\001\096\001\096\001\166\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\095\001\107\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\089\001\079\001\080\001\
\081\001\002\001\083\001\084\001\085\001\086\001\090\001\089\001\
\089\001\000\000\091\001\094\001\001\001\094\001\095\001\096\001\
\097\001\098\001\099\001\112\001\091\001\091\001\115\001\089\001\
\011\001\012\001\013\001\014\001\015\001\096\001\011\001\112\001\
\096\001\094\001\096\001\095\001\129\001\096\001\124\002\095\001\
\093\001\042\001\111\001\044\001\045\001\089\001\047\001\089\001\
\129\001\050\001\095\001\132\001\001\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\097\001\096\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\094\001\079\001\080\001\
\081\001\002\001\083\001\084\001\085\001\086\001\090\001\095\001\
\089\001\000\000\091\001\089\001\089\001\094\001\095\001\096\001\
\097\001\098\001\099\001\089\001\091\001\097\001\089\001\080\001\
\081\001\002\001\083\001\084\001\095\001\000\001\096\001\112\001\
\089\001\091\001\065\001\066\001\089\001\094\001\095\001\096\001\
\097\001\042\001\099\001\044\001\045\001\095\001\047\001\089\001\
\129\001\050\001\089\001\132\001\119\001\120\001\091\001\091\001\
\087\001\088\001\224\002\090\001\093\001\079\002\093\001\089\001\
\089\001\042\001\096\001\044\001\045\001\091\001\047\001\094\001\
\000\000\050\001\091\001\132\001\096\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\096\001\090\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\002\001\079\001\080\001\
\081\001\091\001\083\001\084\001\085\001\086\001\090\001\112\001\
\089\001\096\001\091\001\096\001\002\001\094\001\095\001\096\001\
\097\001\098\001\099\001\085\000\086\000\089\001\096\001\089\001\
\129\001\089\001\089\001\089\001\094\000\095\000\089\001\112\001\
\002\000\205\000\189\002\023\003\150\002\042\001\221\001\044\001\
\045\001\000\000\047\001\147\002\149\002\050\001\101\002\216\000\
\129\001\004\003\035\001\132\001\042\001\044\002\044\001\045\001\
\036\001\047\001\037\001\067\003\050\001\038\001\067\001\068\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\039\001\079\001\080\001\081\001\079\002\083\001\084\001\
\085\001\086\001\184\002\002\001\089\001\128\002\091\001\079\003\
\248\001\094\001\095\001\096\001\097\001\098\001\099\001\015\003\
\051\001\128\001\130\001\129\001\114\001\087\002\131\001\129\003\
\000\000\132\001\108\003\112\001\174\000\175\000\110\003\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\184\000\185\000\
\186\000\255\255\112\001\042\001\129\001\044\001\045\001\255\255\
\047\001\255\255\255\255\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\129\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\255\255\255\255\255\255\255\255\
\079\001\080\001\081\001\002\001\083\001\084\001\085\001\086\001\
\255\255\255\255\089\001\255\255\091\001\255\255\255\255\094\001\
\095\001\096\001\097\001\098\001\099\001\255\255\255\255\255\255\
\000\000\080\001\081\001\255\255\083\001\084\001\255\255\255\255\
\255\255\112\001\089\001\255\255\255\255\255\255\255\255\094\001\
\095\001\096\001\097\001\042\001\099\001\044\001\045\001\255\255\
\047\001\255\255\129\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\073\001\074\001\255\255\132\001\255\255\255\255\
\079\001\080\001\081\001\255\255\083\001\084\001\085\001\086\001\
\000\000\255\255\089\001\255\255\091\001\255\255\255\255\094\001\
\095\001\096\001\097\001\098\001\099\001\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\112\001\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\129\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\002\001\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\255\255\
\000\000\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\112\001\255\255\255\255\042\001\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\050\001\255\255\255\255\255\255\255\255\
\255\255\129\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\002\001\255\255\255\255\
\079\001\080\001\081\001\255\255\083\001\084\001\085\001\086\001\
\000\000\255\255\089\001\255\255\091\001\255\255\255\255\094\001\
\095\001\096\001\097\001\098\001\099\001\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\112\001\050\001\255\255\255\255\042\001\255\255\044\001\
\045\001\255\255\047\001\255\255\255\255\050\001\255\255\255\255\
\255\255\255\255\129\001\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\002\001\083\001\084\001\085\001\086\001\000\000\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\089\001\255\255\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\255\255\255\255\
\112\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\112\001\044\001\045\001\255\255\047\001\
\255\255\129\001\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\129\001\255\255\255\255\255\255\
\255\255\255\255\002\001\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\000\000\079\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\255\255\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\112\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\129\001\002\001\067\001\068\001\069\001\070\001\071\001\
\072\001\000\000\255\255\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\255\255\255\255\255\255\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\255\255\255\255\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\112\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\129\001\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\000\000\002\001\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\255\255\255\255\255\255\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\112\001\255\255\042\001\255\255\044\001\045\001\255\255\047\001\
\255\255\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\129\001\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\255\255\255\255\255\255\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\044\001\045\001\255\255\047\001\255\255\
\112\001\050\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\129\001\067\001\068\001\069\001\070\001\071\001\072\001\
\002\001\255\255\255\255\000\000\255\255\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\255\255\255\255\255\255\255\255\
\089\001\255\255\091\001\255\255\255\255\094\001\095\001\096\001\
\097\001\098\001\099\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\112\001\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\129\001\255\255\255\255\002\001\255\255\000\000\255\255\255\255\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\084\001\000\000\255\255\255\255\255\255\089\001\
\255\255\091\001\255\255\255\255\094\001\095\001\096\001\097\001\
\098\001\099\001\255\255\042\001\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\050\001\255\255\255\255\112\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\067\001\068\001\255\255\129\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\079\001\080\001\081\001\255\255\083\001\084\001\255\255\255\255\
\000\000\255\255\089\001\255\255\091\001\255\255\255\255\094\001\
\095\001\096\001\097\001\098\001\099\001\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\044\001\045\001\255\255\
\047\001\112\001\255\255\050\001\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\002\001\255\255\255\255\
\255\255\089\001\129\001\255\255\067\001\068\001\094\001\095\001\
\096\001\097\001\255\255\099\001\255\255\255\255\255\255\255\255\
\079\001\080\001\081\001\000\000\083\001\084\001\255\255\255\255\
\255\255\255\255\089\001\255\255\091\001\255\255\255\255\094\001\
\095\001\096\001\097\001\098\001\099\001\042\001\255\255\044\001\
\045\001\255\255\047\001\000\000\132\001\050\001\255\255\255\255\
\255\255\112\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\067\001\068\001\
\255\255\255\255\129\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\079\001\080\001\081\001\002\001\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\255\255\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\099\001\042\001\
\255\255\044\001\045\001\255\255\047\001\255\255\255\255\050\001\
\255\255\255\255\255\255\112\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\044\001\
\045\001\255\255\047\001\255\255\129\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\079\001\080\001\081\001\002\001\
\083\001\084\001\255\255\255\255\255\255\255\255\089\001\255\255\
\091\001\255\255\255\255\094\001\095\001\096\001\097\001\098\001\
\099\001\255\255\079\001\080\001\081\001\002\001\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\112\001\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\099\001\042\001\
\255\255\044\001\045\001\255\255\047\001\255\255\129\001\050\001\
\255\255\255\255\255\255\112\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\044\001\
\045\001\255\255\047\001\255\255\129\001\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\080\001\081\001\255\255\
\083\001\084\001\002\001\255\255\255\255\255\255\089\001\255\255\
\091\001\255\255\255\255\094\001\095\001\096\001\097\001\098\001\
\099\001\255\255\255\255\080\001\255\255\255\255\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\112\001\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\099\001\255\255\
\255\255\255\255\042\001\255\255\044\001\045\001\129\001\047\001\
\255\255\255\255\050\001\112\001\255\255\255\255\255\255\080\001\
\255\255\255\255\083\001\084\001\255\255\002\001\255\255\255\255\
\089\001\255\255\255\255\255\255\129\001\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\080\001\255\255\255\255\083\001\084\001\002\001\255\255\255\255\
\255\255\089\001\255\255\091\001\255\255\255\255\094\001\095\001\
\096\001\097\001\098\001\099\001\255\255\042\001\255\255\044\001\
\045\001\255\255\047\001\132\001\255\255\050\001\255\255\255\255\
\112\001\255\255\255\255\255\255\255\255\255\255\255\255\000\001\
\255\255\002\001\255\255\255\255\255\255\042\001\255\255\044\001\
\045\001\129\001\047\001\255\255\255\255\050\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\255\255\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\099\001\255\255\
\255\255\042\001\255\255\044\001\045\001\255\255\047\001\084\001\
\255\255\050\001\255\255\112\001\089\001\054\001\091\001\255\255\
\255\255\094\001\095\001\096\001\097\001\098\001\099\001\255\255\
\255\255\255\255\255\255\255\255\129\001\255\255\255\255\255\255\
\255\255\000\001\001\001\112\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\092\001\129\001\255\255\255\255\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\067\001\068\001\069\001\070\001\071\001\072\001\112\001\
\255\255\255\255\115\001\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\084\001\255\255\051\001\052\001\255\255\089\001\
\129\001\255\255\255\255\255\255\094\001\095\001\096\001\097\001\
\255\255\099\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\255\255\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\255\255\092\001\255\255\255\255\
\255\255\096\001\132\001\255\255\255\255\100\001\101\001\102\001\
\103\001\104\001\105\001\106\001\107\001\108\001\109\001\110\001\
\255\255\255\255\255\255\255\255\115\001\255\255\117\001\118\001\
\119\001\120\001\121\001\255\255\123\001\000\001\001\001\002\001\
\127\001\128\001\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\136\001\137\001\255\255\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\255\255\
\075\001\089\001\255\255\255\255\255\255\255\255\094\001\255\255\
\096\001\097\001\255\255\099\001\255\255\255\255\089\001\090\001\
\255\255\255\255\093\001\255\255\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\132\001\255\255\255\255\000\001\
\001\001\002\001\255\255\255\255\255\255\255\255\129\001\255\255\
\255\255\010\001\255\255\255\255\135\001\255\255\137\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\053\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\079\001\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\255\255\075\001\089\001\255\255\255\255\255\255\255\255\
\094\001\095\001\096\001\097\001\255\255\099\001\255\255\255\255\
\089\001\090\001\255\255\255\255\093\001\255\255\095\001\096\001\
\097\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\112\001\
\113\001\255\255\255\255\116\001\255\255\255\255\132\001\255\255\
\255\255\000\001\001\001\002\001\255\255\255\255\255\255\255\255\
\129\001\255\255\255\255\010\001\255\255\255\255\135\001\255\255\
\137\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\053\001\067\001\
\068\001\069\001\070\001\071\001\072\001\073\001\074\001\255\255\
\255\255\255\255\255\255\079\001\080\001\081\001\255\255\083\001\
\084\001\085\001\086\001\255\255\075\001\089\001\255\255\255\255\
\255\255\255\255\094\001\095\001\096\001\097\001\255\255\099\001\
\255\255\255\255\089\001\090\001\255\255\255\255\093\001\255\255\
\095\001\096\001\097\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\112\001\113\001\255\255\255\255\116\001\255\255\255\255\
\132\001\255\255\255\255\000\001\001\001\002\001\255\255\255\255\
\255\255\255\255\129\001\255\255\255\255\010\001\255\255\255\255\
\135\001\255\255\137\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\079\001\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\255\255\075\001\089\001\
\255\255\255\255\255\255\255\255\094\001\095\001\096\001\097\001\
\255\255\099\001\255\255\255\255\089\001\090\001\255\255\255\255\
\093\001\255\255\095\001\096\001\097\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\112\001\113\001\255\255\255\255\116\001\
\255\255\255\255\132\001\255\255\255\255\000\001\001\001\002\001\
\255\255\255\255\255\255\255\255\129\001\255\255\255\255\010\001\
\255\255\255\255\135\001\255\255\137\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\080\001\255\255\053\001\083\001\084\001\255\255\255\255\255\255\
\255\255\089\001\255\255\255\255\255\255\255\255\094\001\095\001\
\096\001\097\001\255\255\099\001\255\255\255\255\000\001\001\001\
\075\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\089\001\255\255\
\255\255\255\255\093\001\255\255\095\001\096\001\097\001\255\255\
\255\255\255\255\255\255\255\255\132\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\255\255\054\001\084\001\129\001\255\255\
\255\255\255\255\089\001\255\255\135\001\255\255\137\001\094\001\
\095\001\096\001\097\001\255\255\099\001\255\255\255\255\073\001\
\074\001\075\001\255\255\255\255\078\001\079\001\255\255\255\255\
\082\001\083\001\255\255\255\255\255\255\087\001\088\001\089\001\
\090\001\091\001\092\001\093\001\094\001\095\001\096\001\097\001\
\255\255\255\255\255\255\255\255\255\255\132\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\118\001\119\001\120\001\121\001\
\255\255\123\001\255\255\255\255\255\255\127\001\128\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\136\001\137\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\074\001\075\001\255\255\255\255\078\001\079\001\
\255\255\255\255\082\001\083\001\255\255\255\255\255\255\087\001\
\088\001\255\255\090\001\091\001\092\001\255\255\255\255\255\255\
\096\001\255\255\255\255\255\255\100\001\101\001\102\001\103\001\
\104\001\105\001\106\001\107\001\108\001\109\001\110\001\255\255\
\112\001\113\001\114\001\115\001\116\001\117\001\118\001\119\001\
\120\001\121\001\255\255\123\001\255\255\255\255\126\001\127\001\
\128\001\129\001\130\001\131\001\255\255\255\255\255\255\135\001\
\136\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\255\255\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\091\001\092\001\255\255\255\255\
\255\255\096\001\255\255\255\255\255\255\100\001\101\001\102\001\
\103\001\104\001\105\001\106\001\107\001\108\001\109\001\110\001\
\255\255\112\001\113\001\114\001\115\001\116\001\117\001\118\001\
\119\001\120\001\121\001\255\255\123\001\255\255\255\255\255\255\
\127\001\128\001\129\001\130\001\131\001\255\255\255\255\255\255\
\135\001\136\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\074\001\075\001\255\255\255\255\
\078\001\079\001\255\255\255\255\082\001\083\001\255\255\255\255\
\255\255\087\001\088\001\255\255\090\001\091\001\092\001\255\255\
\255\255\255\255\096\001\255\255\255\255\255\255\100\001\101\001\
\102\001\103\001\104\001\105\001\106\001\107\001\108\001\109\001\
\110\001\255\255\112\001\113\001\114\001\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\255\255\123\001\255\255\255\255\
\255\255\127\001\128\001\129\001\130\001\131\001\255\255\255\255\
\255\255\135\001\136\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\079\001\255\255\255\255\082\001\083\001\255\255\
\255\255\255\255\087\001\088\001\255\255\090\001\255\255\092\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\100\001\
\101\001\102\001\103\001\104\001\105\001\106\001\107\001\108\001\
\109\001\110\001\255\255\112\001\113\001\114\001\115\001\116\001\
\117\001\118\001\119\001\120\001\121\001\255\255\123\001\255\255\
\255\255\255\255\127\001\128\001\129\001\130\001\131\001\255\255\
\255\255\255\255\135\001\136\001\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\083\001\084\001\255\255\255\255\255\255\255\255\
\089\001\255\255\255\255\255\255\255\255\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\073\001\074\001\075\001\
\255\255\255\255\078\001\079\001\255\255\255\255\082\001\083\001\
\255\255\255\255\255\255\087\001\088\001\255\255\090\001\255\255\
\092\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\132\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\112\001\113\001\255\255\255\255\
\116\001\117\001\118\001\119\001\120\001\121\001\255\255\123\001\
\255\255\255\255\255\255\127\001\128\001\129\001\255\255\255\255\
\255\255\255\255\255\255\135\001\136\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\079\001\255\255\255\255\082\001\
\083\001\255\255\255\255\255\255\087\001\088\001\255\255\090\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\114\001\
\255\255\116\001\117\001\118\001\119\001\120\001\121\001\255\255\
\123\001\255\255\255\255\255\255\127\001\128\001\129\001\255\255\
\255\255\255\255\255\255\255\255\135\001\136\001\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\074\001\075\001\255\255\255\255\078\001\079\001\255\255\255\255\
\082\001\083\001\255\255\255\255\255\255\087\001\088\001\255\255\
\090\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\112\001\113\001\
\255\255\255\255\116\001\117\001\118\001\119\001\120\001\121\001\
\031\001\123\001\255\255\255\255\255\255\127\001\128\001\129\001\
\255\255\255\255\255\255\255\255\255\255\135\001\136\001\255\255\
\255\255\255\255\255\255\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\255\255\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\255\255\092\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\100\001\101\001\102\001\
\103\001\104\001\105\001\106\001\107\001\108\001\109\001\110\001\
\255\255\112\001\255\255\255\255\115\001\255\255\117\001\118\001\
\119\001\120\001\121\001\255\255\123\001\255\255\255\255\255\255\
\127\001\128\001\129\001\255\255\255\255\255\255\255\255\000\001\
\001\001\136\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\079\001\080\001\081\001\031\001\083\001\
\084\001\085\001\086\001\255\255\255\255\089\001\255\255\255\255\
\255\255\255\255\094\001\095\001\096\001\097\001\255\255\099\001\
\255\255\255\255\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\079\001\255\255\
\132\001\082\001\083\001\255\255\255\255\255\255\087\001\088\001\
\255\255\090\001\091\001\092\001\255\255\255\255\255\255\096\001\
\255\255\255\255\255\255\100\001\101\001\102\001\103\001\104\001\
\105\001\106\001\107\001\108\001\109\001\110\001\255\255\255\255\
\255\255\255\255\115\001\255\255\117\001\118\001\119\001\120\001\
\121\001\255\255\123\001\255\255\255\255\255\255\127\001\128\001\
\255\255\255\255\255\255\255\255\255\255\000\001\001\001\136\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\079\001\080\001\081\001\031\001\083\001\084\001\085\001\
\086\001\255\255\255\255\089\001\255\255\255\255\255\255\255\255\
\094\001\095\001\096\001\097\001\255\255\099\001\255\255\255\255\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\079\001\255\255\132\001\082\001\
\083\001\255\255\255\255\255\255\087\001\088\001\255\255\090\001\
\255\255\092\001\255\255\255\255\255\255\096\001\255\255\255\255\
\255\255\100\001\101\001\102\001\103\001\104\001\105\001\106\001\
\107\001\108\001\109\001\110\001\255\255\255\255\255\255\255\255\
\115\001\255\255\117\001\118\001\119\001\120\001\121\001\255\255\
\123\001\255\255\255\255\255\255\127\001\128\001\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\136\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\031\001\083\001\084\001\085\001\086\001\255\255\
\255\255\089\001\255\255\255\255\255\255\255\255\094\001\095\001\
\096\001\097\001\255\255\099\001\255\255\255\255\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\079\001\255\255\132\001\082\001\083\001\255\255\
\255\255\255\255\087\001\088\001\255\255\090\001\255\255\092\001\
\255\255\255\255\255\255\096\001\255\255\255\255\255\255\100\001\
\101\001\102\001\103\001\104\001\105\001\106\001\107\001\108\001\
\109\001\110\001\255\255\255\255\255\255\255\255\115\001\255\255\
\117\001\118\001\119\001\120\001\121\001\255\255\123\001\255\255\
\255\255\255\255\127\001\128\001\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\136\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\255\255\079\001\080\001\081\001\
\031\001\083\001\084\001\255\255\255\255\255\255\255\255\089\001\
\255\255\255\255\255\255\255\255\094\001\095\001\096\001\097\001\
\255\255\099\001\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\066\001\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\132\001\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\255\255\092\001\093\001\000\001\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\118\001\
\119\001\120\001\121\001\255\255\123\001\255\255\031\001\255\255\
\127\001\128\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\136\001\137\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\079\001\255\255\
\255\255\082\001\083\001\255\255\255\255\255\255\087\001\088\001\
\255\255\090\001\255\255\255\255\255\255\000\001\001\001\096\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\118\001\119\001\120\001\
\121\001\255\255\123\001\255\255\031\001\255\255\127\001\128\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\136\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\079\001\255\255\255\255\082\001\
\083\001\255\255\255\255\255\255\087\001\088\001\255\255\090\001\
\255\255\255\255\255\255\094\001\000\001\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\002\001\255\255\117\001\118\001\119\001\120\001\121\001\255\255\
\123\001\255\255\255\255\031\001\127\001\128\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\136\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\044\001\045\001\255\255\047\001\255\255\255\255\
\050\001\255\255\255\255\255\255\054\001\073\001\074\001\075\001\
\255\255\255\255\078\001\079\001\255\255\255\255\082\001\083\001\
\255\255\255\255\255\255\087\001\088\001\255\255\090\001\000\001\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\089\001\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\097\001\
\255\255\117\001\118\001\119\001\120\001\121\001\031\001\123\001\
\255\255\255\255\255\255\127\001\128\001\255\255\112\001\255\255\
\255\255\115\001\255\255\255\255\136\001\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\255\255\129\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\079\001\255\255\
\255\255\082\001\083\001\255\255\255\255\255\255\087\001\088\001\
\255\255\090\001\000\001\001\001\255\255\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\118\001\119\001\120\001\
\121\001\031\001\123\001\255\255\255\255\255\255\127\001\128\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\136\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\073\001\074\001\075\001\255\255\255\255\
\078\001\079\001\255\255\255\255\082\001\083\001\255\255\255\255\
\255\255\087\001\088\001\255\255\090\001\000\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\117\001\
\118\001\119\001\120\001\121\001\031\001\123\001\255\255\255\255\
\255\255\127\001\128\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\136\001\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\073\001\074\001\
\075\001\255\255\255\255\078\001\079\001\255\255\255\255\082\001\
\083\001\255\255\255\255\255\255\087\001\088\001\255\255\090\001\
\000\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\117\001\118\001\119\001\120\001\121\001\031\001\
\123\001\255\255\255\255\255\255\127\001\128\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\136\001\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\074\001\075\001\255\255\255\255\078\001\079\001\
\255\255\255\255\082\001\083\001\255\255\255\255\255\255\087\001\
\088\001\255\255\090\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\118\001\119\001\
\120\001\121\001\255\255\123\001\255\255\255\255\255\255\127\001\
\128\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\136\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\074\001\075\001\255\255\255\255\078\001\079\001\
\255\255\255\255\082\001\083\001\255\255\255\255\255\255\087\001\
\088\001\255\255\090\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\112\001\113\001\255\255\255\255\116\001\117\001\118\001\119\001\
\120\001\121\001\000\001\123\001\002\001\255\255\255\255\127\001\
\128\001\129\001\255\255\255\255\010\001\255\255\255\255\135\001\
\136\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\096\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\112\001\113\001\114\001\255\255\116\001\051\001\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\129\001\130\001\131\001\255\255\255\255\
\255\255\135\001\255\255\255\255\255\255\073\001\074\001\075\001\
\255\255\255\255\078\001\079\001\255\255\255\255\082\001\083\001\
\255\255\255\255\255\255\087\001\088\001\255\255\090\001\255\255\
\092\001\255\255\001\001\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\117\001\118\001\119\001\120\001\121\001\255\255\123\001\
\031\001\255\255\255\255\127\001\128\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\136\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\255\255\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\255\255\092\001\255\255\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\118\001\
\119\001\120\001\121\001\255\255\123\001\031\001\255\255\255\255\
\127\001\128\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\136\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\074\001\075\001\255\255\255\255\078\001\079\001\255\255\255\255\
\082\001\083\001\255\255\255\255\255\255\087\001\088\001\255\255\
\090\001\255\255\092\001\255\255\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\118\001\119\001\120\001\121\001\
\255\255\123\001\031\001\255\255\255\255\127\001\128\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\136\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\079\001\255\255\255\255\082\001\083\001\255\255\
\255\255\255\255\087\001\088\001\255\255\090\001\255\255\092\001\
\255\255\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\117\001\118\001\119\001\120\001\121\001\255\255\123\001\031\001\
\255\255\255\255\127\001\128\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\136\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\074\001\075\001\255\255\255\255\078\001\079\001\
\255\255\255\255\082\001\083\001\255\255\255\255\255\255\087\001\
\088\001\255\255\090\001\255\255\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\118\001\119\001\
\120\001\121\001\031\001\123\001\255\255\255\255\255\255\127\001\
\128\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\136\001\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\079\001\255\255\255\255\082\001\083\001\255\255\
\255\255\255\255\087\001\088\001\255\255\090\001\255\255\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\117\001\118\001\119\001\120\001\121\001\031\001\123\001\255\255\
\255\255\255\255\127\001\128\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\136\001\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\074\001\075\001\255\255\255\255\078\001\079\001\255\255\255\255\
\082\001\083\001\255\255\255\255\255\255\087\001\088\001\255\255\
\090\001\255\255\001\001\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\118\001\119\001\120\001\121\001\
\031\001\123\001\255\255\255\255\255\255\127\001\128\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\136\001\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\075\001\255\255\255\255\078\001\
\079\001\255\255\255\255\082\001\083\001\255\255\255\255\255\255\
\087\001\088\001\255\255\090\001\255\255\001\001\255\255\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\118\001\
\119\001\120\001\121\001\031\001\123\001\255\255\255\255\255\255\
\127\001\128\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\136\001\255\255\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\073\001\074\001\075\001\
\255\255\255\255\078\001\079\001\255\255\255\255\082\001\083\001\
\255\255\255\255\255\255\087\001\088\001\255\255\090\001\255\255\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\117\001\118\001\119\001\120\001\121\001\031\001\123\001\
\255\255\255\255\255\255\127\001\128\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\136\001\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\075\001\255\255\255\255\078\001\079\001\255\255\
\255\255\082\001\083\001\255\255\255\255\255\255\087\001\088\001\
\255\255\090\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\118\001\119\001\120\001\
\121\001\255\255\123\001\001\001\002\001\255\255\127\001\128\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\136\001\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\053\001\
\255\255\255\255\255\255\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\079\001\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\255\255\255\255\089\001\
\255\255\255\255\096\001\093\001\094\001\095\001\096\001\097\001\
\255\255\099\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\112\001\113\001\114\001\115\001\116\001\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\002\001\255\255\
\255\255\255\255\255\255\129\001\130\001\131\001\010\001\133\001\
\134\001\135\001\132\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\002\001\
\255\255\053\001\255\255\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\068\001\112\001\113\001\114\001\115\001\
\116\001\255\255\255\255\255\255\255\255\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\255\255\129\001\130\001\131\001\
\089\001\133\001\134\001\135\001\255\255\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\119\001\120\001\255\255\002\001\
\255\255\255\255\255\255\132\001\255\255\255\255\129\001\010\001\
\255\255\255\255\255\255\255\255\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\255\255\255\255\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\085\001\086\001\089\001\090\001\
\089\001\092\001\255\255\255\255\093\001\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\114\001\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\129\001\010\001\
\255\255\255\255\255\255\132\001\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\255\255\079\001\080\001\081\001\
\255\255\083\001\084\001\085\001\086\001\255\255\255\255\089\001\
\255\255\092\001\255\255\093\001\094\001\255\255\096\001\097\001\
\255\255\099\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\114\001\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\129\001\010\001\
\255\255\255\255\132\001\255\255\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\255\255\255\255\255\255\
\255\255\089\001\255\255\255\255\255\255\255\255\094\001\095\001\
\096\001\097\001\255\255\099\001\255\255\255\255\255\255\090\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\098\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\132\001\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\129\001\010\001\
\255\255\255\255\255\255\255\255\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\255\255\255\255\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\085\001\086\001\089\001\090\001\
\089\001\255\255\255\255\255\255\255\255\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\129\001\010\001\
\255\255\255\255\255\255\132\001\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\255\255\255\255\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\085\001\086\001\255\255\090\001\
\089\001\255\255\255\255\255\255\255\255\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\129\001\010\001\
\255\255\255\255\255\255\132\001\135\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\002\001\255\255\053\001\255\255\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\053\001\255\255\255\255\255\255\106\001\
\255\255\255\255\067\001\068\001\255\255\112\001\113\001\255\255\
\255\255\116\001\255\255\255\255\255\255\255\255\079\001\080\001\
\081\001\255\255\083\001\084\001\255\255\255\255\129\001\255\255\
\089\001\255\255\255\255\255\255\135\001\094\001\095\001\096\001\
\097\001\255\255\099\001\255\255\255\255\255\255\255\255\255\255\
\098\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\112\001\113\001\
\255\255\255\255\116\001\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\255\255\132\001\255\255\255\255\255\255\129\001\
\010\001\255\255\255\255\255\255\255\255\135\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\002\001\255\255\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\053\001\255\255\255\255\255\255\
\255\255\000\001\001\001\255\255\255\255\255\255\112\001\113\001\
\007\001\008\001\116\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\129\001\
\255\255\255\255\255\255\255\255\255\255\135\001\255\255\255\255\
\255\255\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\000\001\001\001\051\001\052\001\255\255\112\001\
\113\001\007\001\008\001\116\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\129\001\255\255\073\001\074\001\075\001\255\255\135\001\078\001\
\079\001\255\255\032\001\082\001\255\255\255\255\255\255\255\255\
\255\255\255\255\089\001\090\001\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\255\255\255\255\255\255\106\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\118\001\
\119\001\120\001\121\001\073\001\074\001\075\001\255\255\255\255\
\078\001\079\001\255\255\255\255\082\001\255\255\000\001\001\001\
\255\255\255\255\255\255\255\255\090\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\106\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\032\001\117\001\
\118\001\119\001\120\001\121\001\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\045\001\255\255\255\255\255\255\000\001\
\001\001\051\001\052\001\255\255\255\255\255\255\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\074\001\075\001\255\255\255\255\078\001\079\001\255\255\032\001\
\082\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\090\001\042\001\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\001\001\255\255\255\255\255\255\
\106\001\255\255\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\117\001\118\001\119\001\120\001\121\001\
\073\001\074\001\075\001\255\255\255\255\078\001\079\001\255\255\
\255\255\082\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\090\001\255\255\255\255\255\255\042\001\255\255\255\255\
\045\001\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\255\255\106\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\118\001\119\001\120\001\
\121\001\255\255\255\255\255\255\073\001\074\001\075\001\255\255\
\255\255\078\001\079\001\255\255\255\255\082\001\067\001\068\001\
\069\001\070\001\071\001\072\001\255\255\090\001\255\255\255\255\
\255\255\255\255\079\001\080\001\081\001\255\255\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\106\001\255\255\255\255\
\054\001\094\001\095\001\096\001\097\001\255\255\099\001\255\255\
\117\001\118\001\119\001\120\001\121\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\255\255\079\001\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\255\255\255\255\089\001\255\255\255\255\255\255\132\001\
\094\001\095\001\096\001\097\001\255\255\099\001\255\255\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\255\255\079\001\080\001\081\001\255\255\083\001\
\084\001\255\255\255\255\255\255\255\255\089\001\067\001\068\001\
\255\255\255\255\094\001\095\001\096\001\097\001\132\001\099\001\
\255\255\255\255\079\001\080\001\081\001\255\255\083\001\084\001\
\255\255\255\255\255\255\255\255\089\001\255\255\255\255\255\255\
\255\255\094\001\095\001\096\001\097\001\255\255\099\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\132\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\132\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\073\001\074\001\075\001\076\001\077\001\
\255\255\079\001\080\001\081\001\255\255\083\001\084\001\085\001\
\086\001\087\001\088\001\255\255\090\001\091\001\255\255\093\001\
\255\255\095\001\255\255\097\001\255\255\099\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\073\001\074\001\075\001\076\001\077\001\255\255\079\001\
\080\001\081\001\255\255\083\001\084\001\085\001\086\001\087\001\
\088\001\255\255\090\001\255\255\255\255\093\001\255\255\255\255\
\096\001\097\001\255\255\099\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  QUALIFIER\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_CHAR16\000\
  CST_CHAR32\000\
  CST_INT\000\
  CST_FLOAT\000\
  CST_COMPLEX\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CST_STRING16\000\
  CST_STRING32\000\
  CST_U8STRING\000\
  CHAR\000\
  INT\000\
  BOOL\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  INT128\000\
  FLOAT128\000\
  COMPLEX\000\
  FLOAT32\000\
  FLOAT64\000\
  FLOAT32X\000\
  FLOAT64X\000\
  GENERIC\000\
  NORETURN\000\
  AUTOTYPE\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  ATOMIC\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  ALIGNAS\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  RPAREN\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  COLON\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  ATTRIBUTE\000\
  INLINE\000\
  STATIC_ASSERT\000\
  ASM\000\
  TYPEOF\000\
  REAL\000\
  IMAG\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  CLASSIFYTYPE\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 403 "src/frontc/cparser.mly"
              (_1)
# 3322 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 405 "src/frontc/cparser.mly"
                 (_1)
# 3329 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "src/frontc/cparser.mly"
                                        ( [] )
# 3335 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 409 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 3343 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 410 "src/frontc/cparser.mly"
                                        ( _2 )
# 3351 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 3357 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 419 "src/frontc/cparser.mly"
                                        ( _1 )
# 3364 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 420 "src/frontc/cparser.mly"
                                        ( _1 )
# 3371 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'const_raw_string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 423 "src/frontc/cparser.mly"
                                      ( LINKAGE (fst _2, (*handleLoc*) snd _2, [ _3 ]) )
# 3380 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'const_raw_string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 425 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) snd _2, _4) )
# 3391 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'const_raw_string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 427 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 3402 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 428 "src/frontc/cparser.mly"
                                        ( _1 )
# 3409 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 433 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             doDeclaration ((*handleLoc*) (snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva), [], cabslu),
                                 NO_INIT)]
                            )
# 3427 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 442 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration ((*handleLoc*)(snd _1)) []
                               [((fst _1, PROTO(JUSTBASE,[],false), [], cabslu),
                                 NO_INIT)]
                            )
# 3441 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 448 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 3458 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * Cabs.cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 453 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 3475 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 457 "src/frontc/cparser.mly"
                           ( PRAGMA (VARIABLE "parse_error", _1) )
# 3483 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 461 "src/frontc/cparser.mly"
             (fst _1)
# 3490 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 462 "src/frontc/cparser.mly"
                  (fst _1)
# 3497 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 463 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 3506 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "src/frontc/cparser.mly"
                                        ( () )
# 3512 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 468 "src/frontc/cparser.mly"
                                        ( () )
# 3518 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 475 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 3525 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 477 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 3532 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 479 "src/frontc/cparser.mly"
          (PAREN (smooth_expression (fst _1)), snd _1)
# 3539 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 481 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 3548 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 485 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 3558 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'assignment_expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'generic_assoc_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 486 "src/frontc/cparser.mly"
                                                                         (GENERIC ((fst _3), _5), _1)
# 3569 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'generic_association) in
    Obj.repr(
# 491 "src/frontc/cparser.mly"
                      ([_1])
# 3576 "src/frontc/cparser.ml"
               : 'generic_assoc_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_assoc_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'generic_association) in
    Obj.repr(
# 492 "src/frontc/cparser.mly"
                                               (_3 :: _1)
# 3584 "src/frontc/cparser.ml"
               : 'generic_assoc_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 496 "src/frontc/cparser.mly"
                                        ((_1, fst _3))
# 3593 "src/frontc/cparser.ml"
               : 'generic_association))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 497 "src/frontc/cparser.mly"
                                      (([SpecType Tdefault], JUSTBASE), fst _3)
# 3602 "src/frontc/cparser.ml"
               : 'generic_association))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 501 "src/frontc/cparser.mly"
                        ( _1 )
# 3609 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 503 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 3617 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 505 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 3627 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 507 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg",
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 3640 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 511 "src/frontc/cparser.mly"
                        ( let b1,d1 = _3 in
                          let b2,d2 = _5 in
                          CALL (VARIABLE "__builtin_types_compatible_p",
                                [TYPE_SIZEOF(b1,d1); TYPE_SIZEOF(b2,d2)]), _1 )
# 3654 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 516 "src/frontc/cparser.mly"
                        ( transformOffsetOf _3 _5, _1 )
# 3665 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 518 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 3673 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 520 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 3681 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 522 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 3689 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 524 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 3697 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 527 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 3709 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 532 "src/frontc/cparser.mly"
          ( VARIABLE (_1) )
# 3716 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 534 "src/frontc/cparser.mly"
   ( MEMBEROF (_1, fst _3) )
# 3724 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 536 "src/frontc/cparser.mly"
   ( INDEX (_1, smooth_expression _2) )
# 3732 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 541 "src/frontc/cparser.mly"
                        ( _1 )
# 3739 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 543 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 3747 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 545 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 3755 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 547 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 3763 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 549 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 3773 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 551 "src/frontc/cparser.mly"
          (REAL (fst _2), _1)
# 3781 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 553 "src/frontc/cparser.mly"
          (IMAG (fst _2), _1)
# 3789 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 555 "src/frontc/cparser.mly"
            (CLASSIFYTYPE (fst _2), _1)
# 3797 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 557 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 3805 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 559 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 3815 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 561 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 3823 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 563 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 3831 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 565 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 3839 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 567 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 3847 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 569 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 3855 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 571 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 3863 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 572 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 3871 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 577 "src/frontc/cparser.mly"
                         ( _1 )
# 3878 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 579 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 3888 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 584 "src/frontc/cparser.mly"
                         ( _1 )
# 3895 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 586 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 3904 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 588 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 3912 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 590 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 3920 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 595 "src/frontc/cparser.mly"
                        ( _1 )
# 3927 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 597 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 3936 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 599 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 3945 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 604 "src/frontc/cparser.mly"
                         ( _1 )
# 3952 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 606 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 3960 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 608 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 3968 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 614 "src/frontc/cparser.mly"
                        ( _1 )
# 3975 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 616 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 3983 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 618 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 3991 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 620 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 3999 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 622 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 4007 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 627 "src/frontc/cparser.mly"
                        ( _1 )
# 4014 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 629 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 4022 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 631 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 4030 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 637 "src/frontc/cparser.mly"
                       ( _1 )
# 4037 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 639 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 4046 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 644 "src/frontc/cparser.mly"
                       ( _1 )
# 4053 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 646 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 4061 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 651 "src/frontc/cparser.mly"
                        ( _1 )
# 4068 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 653 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 4076 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 658 "src/frontc/cparser.mly"
                        ( _1 )
# 4083 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 660 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 4092 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 665 "src/frontc/cparser.mly"
                        ( _1 )
# 4099 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 667 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 4107 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 672 "src/frontc/cparser.mly"
                         ( _1 )
# 4114 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 674 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 4124 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 682 "src/frontc/cparser.mly"
                         ( _1 )
# 4131 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 684 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 4139 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 686 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 4147 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 688 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 4155 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 690 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 4163 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 692 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 4171 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 694 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 4179 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 696 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 4187 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 698 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 4195 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 700 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 4203 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 702 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 4211 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 704 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 4219 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 709 "src/frontc/cparser.mly"
                        ( _1 )
# 4226 "src/frontc/cparser.ml"
               : Cabs.expression * Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 714 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 4233 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 715 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 4240 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 716 "src/frontc/cparser.mly"
                    (CONST_COMPLEX (fst _1), snd _1)
# 4247 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 717 "src/frontc/cparser.mly"
             (CONST_CHAR (fst _1), snd _1)
# 4254 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 718 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1, WCHAR_T), snd _1)
# 4261 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 719 "src/frontc/cparser.mly"
                    (CONST_WCHAR (fst _1, CHAR16_T), snd _1)
# 4268 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 720 "src/frontc/cparser.mly"
                    (CONST_WCHAR (fst _1, CHAR32_T), snd _1)
# 4275 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_string_or_wstring) in
    Obj.repr(
# 721 "src/frontc/cparser.mly"
                                ( _1 )
# 4282 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    Obj.repr(
# 725 "src/frontc/cparser.mly"
                    (
        let queue, typ, location = _1 in
        match typ with
        | CHAR -> CONST_STRING (queue_to_string queue, NO_ENCODING), location
        | CHAR_UTF8 -> CONST_STRING (queue_to_string queue, UTF8), location
        | _ -> CONST_WSTRING (queue_to_int64_list queue, typ), location
    )
# 4295 "src/frontc/cparser.ml"
               : 'const_string_or_wstring))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    Obj.repr(
# 735 "src/frontc/cparser.mly"
                    (
        let queue, typ, location = _1 in
        match typ with
        | CHAR -> queue_to_string queue, location
        | CHAR_UTF8 -> queue_to_string queue, location
        | _ -> parse_error "wstring in illegal place (const_raw_string)"; raise Parsing.Parse_error
    )
# 4308 "src/frontc/cparser.ml"
               : 'const_raw_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 745 "src/frontc/cparser.mly"
                                        ( intlist_to_string (fst _1) )
# 4315 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 749 "src/frontc/cparser.mly"
                                        (
      let queue = Queue.create () in
      let str, typ, loc = _1 in
      Queue.add str queue;
      queue, typ, loc
    )
# 4327 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 755 "src/frontc/cparser.mly"
                (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, WCHAR_T, snd _1
    )
# 4338 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 760 "src/frontc/cparser.mly"
                 (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, CHAR16_T, snd _1
    )
# 4349 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 765 "src/frontc/cparser.mly"
                 (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, CHAR32_T, snd _1
    )
# 4360 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 770 "src/frontc/cparser.mly"
                                        (
      let queue, typ, loc = _1 in
      let str, typ2, _ = _2 in
      Queue.add str queue;
      if typ2 = CHAR_UTF8 && typ <> CHAR && typ <> CHAR_UTF8 then (
        parse_error "Incompatible string literals";
        raise Parsing.Parse_error)
      else
        let typ3 = if typ2 = CHAR_UTF8 then CHAR_UTF8 else typ in
        queue, typ3, loc
    )
# 4378 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 781 "src/frontc/cparser.mly"
                            (
      let queue, typ, loc = _1 in
      Queue.add (fst _2) queue;
      if typ <> CHAR && typ <> WCHAR_T then (
        parse_error "Incompatible string literals";
        raise Parsing.Parse_error)
      else
        queue, WCHAR_T, loc
    )
# 4394 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 790 "src/frontc/cparser.mly"
                             (
      let queue, typ, loc = _1 in
      Queue.add (fst _2) queue;
      if typ <> CHAR && typ <> CHAR16_T then (
        parse_error "Incompatible string literals";
        raise Parsing.Parse_error)
      else
        queue, CHAR16_T, loc
    )
# 4410 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * Cabs.wchar_type * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 799 "src/frontc/cparser.mly"
                             (
      let queue, typ, loc = _1 in
      Queue.add (fst _2) queue;
      if typ <> CHAR && typ <> CHAR32_T then (
        parse_error "Incompatible string literals";
        raise Parsing.Parse_error)
      else
        queue, CHAR32_T, loc
    )
# 4426 "src/frontc/cparser.ml"
               : int64 list Queue.t * Cabs.wchar_type * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 811 "src/frontc/cparser.mly"
                  (fst _1, CHAR, snd _1)
# 4433 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 812 "src/frontc/cparser.mly"
                      (fst _1, CHAR_UTF8, snd _1)
# 4440 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 813 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), CHAR, _1)
# 4448 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 815 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts
					    !currentFunctionName), CHAR, _1)
# 4456 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * Cabs.cabsloc) in
    Obj.repr(
# 819 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 4463 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 821 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 4472 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 824 "src/frontc/cparser.mly"
                                            ( [_1] )
# 4479 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 825 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 4487 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 828 "src/frontc/cparser.mly"
                                            ( [] )
# 4493 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 829 "src/frontc/cparser.mly"
                                            ( _1 )
# 4500 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 832 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 4509 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 833 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 4517 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 834 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 4524 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 837 "src/frontc/cparser.mly"
                             ( () )
# 4530 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 839 "src/frontc/cparser.mly"
                                 ( () )
# 4536 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 842 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 4544 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 844 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 4552 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * Cabs.cabsloc) in
    Obj.repr(
# 846 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 4560 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 849 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 4566 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 850 "src/frontc/cparser.mly"
                                        ( _1 )
# 4573 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 854 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 4581 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 858 "src/frontc/cparser.mly"
                                    ( [] )
# 4587 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 859 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 4594 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 864 "src/frontc/cparser.mly"
          (NOTHING)
# 4600 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 866 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 4607 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * Cabs.cabsloc) in
    Obj.repr(
# 870 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 4614 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 871 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 4622 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 872 "src/frontc/cparser.mly"
                                                  ( _3 )
# 4629 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 876 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 4635 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 877 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 4642 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 881 "src/frontc/cparser.mly"
                                                   ( _2 )
# 4651 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 882 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 4659 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 886 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 4666 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 887 "src/frontc/cparser.mly"
                                                       ( [] )
# 4672 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 894 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 4688 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 900 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 4700 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 907 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 4707 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 911 "src/frontc/cparser.mly"
                                                            ( [] )
# 4713 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 913 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 4720 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 918 "src/frontc/cparser.mly"
                                         ( [] )
# 4726 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 919 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 4734 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 920 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 4742 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 922 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1),
                                                    snd _1)] )
# 4751 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 924 "src/frontc/cparser.mly"
                                         ( _2 )
# 4759 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 928 "src/frontc/cparser.mly"
                                                     ( [] )
# 4765 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 929 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 4774 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 932 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 4781 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 933 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 4789 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 937 "src/frontc/cparser.mly"
                                 (NOP ((*handleLoc*) _2) )
# 4797 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_no_null) in
    Obj.repr(
# 938 "src/frontc/cparser.mly"
                     ( _1 )
# 4804 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 942 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), joinLoc (snd _1) _2))
# 4812 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 943 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, joinLoc (snd3 _1) (trd3 _1)))
# 4819 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 945 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _4, NOP _1, joinLoc _1 _5, joinLoc (snd _2) _3))
# 4830 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 947 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _4, _7, joinLoc _1 _8, joinLoc (snd _2) _3))
# 4843 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 949 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _4, joinLoc _1 _5, joinLoc (snd _2) _3))
# 4854 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 951 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _4, joinLoc _1 _5, joinLoc (snd _2) _3))
# 4865 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 953 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, joinLoc _1 _5, joinLoc (snd _4) _5))
# 4876 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 956 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, joinLoc _1 _9, joinLoc _2 _7))
# 4891 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement_no_null) in
    Obj.repr(
# 958 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by RmUnused. *)
                                  LABEL (fst _1, _5, joinLoc (snd _1) _4))
# 4906 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 964 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by RmUnused. *)
                                  LABEL (fst _1, NOP (_5), joinLoc (snd _1) _4))
# 4921 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 970 "src/frontc/cparser.mly"
                          (CASE (fst _2, _4, joinLoc _1 _5, joinLoc _1 _3))
# 4932 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 972 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, _6, joinLoc _1 _7, joinLoc _1 _5))
# 4944 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 974 "src/frontc/cparser.mly"
                          (DEFAULT (_3, joinLoc _1 _4, joinLoc _1 _2))
# 4954 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 975 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, joinLoc _1 _2, cabslu))
# 4962 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 977 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), joinLoc _1 _3, joinLoc (snd _2) _3))
# 4971 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 978 "src/frontc/cparser.mly"
                        (BREAK (joinLoc _1 _2))
# 4979 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 979 "src/frontc/cparser.mly"
                        (CONTINUE (joinLoc _1 _2))
# 4987 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 981 "src/frontc/cparser.mly"
                   (GOTO (fst _2, joinLoc _1 _3))
# 4996 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 983 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), joinLoc _1 _4) )
# 5006 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 985 "src/frontc/cparser.mly"
                        ( ASM (_2, _4, _5, joinLoc _1 _7) )
# 5019 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 986 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 5027 "src/frontc/cparser.ml"
               : 'statement_no_null))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 991 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 5035 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 992 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 5042 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 997 "src/frontc/cparser.mly"
                                       ( doDeclaration (joinLoc (snd _1) _3) (fst _1) _2 )
# 5051 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_spec_list_no_attr_only) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 999 "src/frontc/cparser.mly"
                                       ( doDeclaration (joinLoc (snd _1) _2) (fst _1) [] )
# 5059 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'static_assert_declaration) in
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                                       ( let (e, m, loc) = _1 in STATIC_ASSERT (e, m, loc) )
# 5066 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1006 "src/frontc/cparser.mly"
      (
        (fst _3, "", _1)
      )
# 5078 "src/frontc/cparser.ml"
               : 'static_assert_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'const_raw_string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1010 "src/frontc/cparser.mly"
      (
        (fst _3, fst _5, _1)
      )
# 5091 "src/frontc/cparser.ml"
               : 'static_assert_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 1017 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 5098 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init_declarator_attr_list) in
    Obj.repr(
# 1018 "src/frontc/cparser.mly"
                                                      ( _1 :: _3 )
# 5106 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init_declarator_attr) in
    Obj.repr(
# 1024 "src/frontc/cparser.mly"
                       ( [ _1 ] )
# 5113 "src/frontc/cparser.ml"
               : 'init_declarator_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init_declarator_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'init_declarator_attr_list) in
    Obj.repr(
# 1025 "src/frontc/cparser.mly"
                                                       ( _1 :: _3 )
# 5121 "src/frontc/cparser.ml"
               : 'init_declarator_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 1029 "src/frontc/cparser.mly"
                                      (
    let ((name, decl, attrs, loc), init) = _2 in
    ((name, PARENTYPE (_1,decl,[]), attrs, loc), init)
  )
# 5132 "src/frontc/cparser.ml"
               : 'init_declarator_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1037 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 5139 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1039 "src/frontc/cparser.mly"
                                        ( let (n, d, a, l) = _1 in ((n, d, a, joinLoc l _4), _3) )
# 5148 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1044 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 5156 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1045 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 5164 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1046 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 5172 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1047 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 5180 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1048 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 5188 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 1050 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 5196 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 1051 "src/frontc/cparser.mly"
                                                                    ( (fst _3) @ SpecCV(CV_ATOMIC) :: _5, _1 )
# 5207 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1053 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 5215 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1054 "src/frontc/cparser.mly"
                                        ( SpecNoreturn  :: _2, _1 )
# 5223 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1055 "src/frontc/cparser.mly"
                                                        ( SpecAttr ("aligned", [fst _3]) :: _5, _1 )
# 5234 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1056 "src/frontc/cparser.mly"
                                                       ( let b, d = _3 in SpecAttr ("aligned", [ TYPE_ALIGNOF (b, d) ]) :: _5, _1 )
# 5245 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1058 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 5253 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1060 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 5263 "src/frontc/cparser.ml"
               : 'decl_spec_list_common))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_common) in
    Obj.repr(
# 1063 "src/frontc/cparser.mly"
                                        ( _1 )
# 5270 "src/frontc/cparser.ml"
               : 'decl_spec_list_no_attr_only))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1064 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: (fst _2), snd _1 )
# 5278 "src/frontc/cparser.ml"
               : 'decl_spec_list_no_attr_only))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_common) in
    Obj.repr(
# 1068 "src/frontc/cparser.mly"
                                        ( _1 )
# 5285 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 1069 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 5293 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1074 "src/frontc/cparser.mly"
                                        ( [] )
# 5299 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1075 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 5306 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 1082 "src/frontc/cparser.mly"
                                        ( [] )
# 5312 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1083 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 5319 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1086 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 5326 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1087 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 5333 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1088 "src/frontc/cparser.mly"
                    ( Tbool, _1 )
# 5340 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1089 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 5347 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1090 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 5354 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1091 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 5361 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1092 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 5368 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1093 "src/frontc/cparser.mly"
                    ( Tint128, _1 )
# 5375 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1094 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 5382 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1095 "src/frontc/cparser.mly"
                    ( Tfloat32, _1 )
# 5389 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1096 "src/frontc/cparser.mly"
                    ( Tfloat64, _1 )
# 5396 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1097 "src/frontc/cparser.mly"
                    ( Tfloat128, _1 )
# 5403 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1098 "src/frontc/cparser.mly"
                    ( Tfloat32x, _1 )
# 5410 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1099 "src/frontc/cparser.mly"
                    ( Tfloat64x, _1 )
# 5417 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1100 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 5424 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1101 "src/frontc/cparser.mly"
                    ( Tauto, _1 )
# 5431 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1105 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 5438 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1106 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 5445 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1108 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 5453 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1110 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, None,    _2), _1 )
# 5462 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1112 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 5473 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1114 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 5483 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1116 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 5495 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1118 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 5506 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1120 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 5514 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1122 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 5525 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1124 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 5535 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1126 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 5547 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1128 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 5558 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1130 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 5566 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1132 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 5578 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1134 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 5589 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1136 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 5602 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1138 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 5614 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1139 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 5621 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1140 "src/frontc/cparser.mly"
                                              ( TtypeofE (smooth_expression (fst _3)), _1 )
# 5631 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1141 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 5642 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1147 "src/frontc/cparser.mly"
                                         ( [] )
# 5648 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1149 "src/frontc/cparser.mly"
                                         ( (fst _1,
                                            [(missingFieldDecl, None)]) :: _3 )
# 5658 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1153 "src/frontc/cparser.mly"
                                         ( _2 )
# 5666 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1155 "src/frontc/cparser.mly"
                                          ( (fst _1, _2)
                                            :: _4 )
# 5677 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1158 "src/frontc/cparser.mly"
                                          ( _2 )
# 5685 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1161 "src/frontc/cparser.mly"
                                          ( _3 )
# 5693 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'static_assert_declaration) in
    Obj.repr(
# 1163 "src/frontc/cparser.mly"
                                         (
       []
   )
# 5702 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'static_assert_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1167 "src/frontc/cparser.mly"
                                                              (
       _3
   )
# 5713 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1173 "src/frontc/cparser.mly"
                                         ( [_1] )
# 5720 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1174 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 5728 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1177 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 5735 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1179 "src/frontc/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some (fst _3)) )
# 5747 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * Cabs.cabsloc) in
    Obj.repr(
# 1182 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 5755 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1186 "src/frontc/cparser.mly"
                  ([_1])
# 5762 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1187 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 5770 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 1188 "src/frontc/cparser.mly"
                                        ( _1 )
# 5777 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1191 "src/frontc/cparser.mly"
                       ((fst _1, _2, NOTHING, snd _1))
# 5785 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * Cabs.cabsloc) in
    Obj.repr(
# 1192 "src/frontc/cparser.mly"
                                    ((fst _1, _2, fst _4, snd _1))
# 5794 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1198 "src/frontc/cparser.mly"
                               ( let (n, decl) = _2 in
                                (n, applyPointer (fst _1) decl, _4, joinLoc (snd _1) _3) )
# 5805 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1206 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 5812 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1209 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 5823 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1213 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 5833 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 1216 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 5842 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1219 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 5856 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1226 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 5863 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 1229 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 5869 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1230 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in
                                     (_1 :: params, isva)
                                   )
# 5879 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1235 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 5885 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1236 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 5891 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1237 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in
                                          (_2 :: params, isva)
                                        )
# 5901 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1244 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 5909 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1245 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 5918 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1247 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 5925 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1248 "src/frontc/cparser.mly"
                                          ( _2 )
# 5934 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1253 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl,
                                           a, snd _1)
                                      )
# 5945 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1262 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva), [])
                                   )
# 5959 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1267 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false), [])
                                   )
# 5970 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1282 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 5977 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1283 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 5986 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1288 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 5992 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1290 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 6001 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1292 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva)
                                          )
# 6013 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1298 "src/frontc/cparser.mly"
                                          ( [_1] )
# 6020 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1299 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 6028 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1300 "src/frontc/cparser.mly"
                                          ( [] )
# 6034 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1305 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 6043 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1308 "src/frontc/cparser.mly"
                                 ( let l = currentLoc () in
                                   ([], l) )
# 6050 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1310 "src/frontc/cparser.mly"
                                 ( _1 )
# 6057 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1314 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   parse_error "attributes in type name";
                                   raise Parsing.Parse_error
                                 end;
                                 (fst _1, d)
                               )
# 6071 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1321 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 6078 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1324 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 6087 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1325 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 6094 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1332 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 6106 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1337 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 6114 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1340 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 6122 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1343 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 6135 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1349 "src/frontc/cparser.mly"
                                    ( _1 )
# 6142 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1350 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 6148 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1354 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by
                                      announceFunctionName *)
            doFunctionDef ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2)
          )
# 6161 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1364 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 6171 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1370 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 6181 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1375 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec =
                               (fst _1, PROTO(JUSTBASE, params, isva), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 6198 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1386 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva),
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 6219 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1399 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false),
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 6236 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1412 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 6243 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1413 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 6250 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1414 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 6257 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1415 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_COMPLEX), _1 )
# 6264 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1416 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_ATOMIC), _1 )
# 6271 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1421 "src/frontc/cparser.mly"
                   ( [])
# 6277 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1422 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 6285 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1428 "src/frontc/cparser.mly"
                                        ( [] )
# 6291 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1429 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 6299 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'const_string_or_wstring) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1431 "src/frontc/cparser.mly"
                                        ( ("__asm__", [CONSTANT(fst _3)]) :: _5 )
# 6310 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1437 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 6320 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1442 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 6328 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1444 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 6335 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1445 "src/frontc/cparser.mly"
                                  (("__attribute__",[VARIABLE(fst _1)]),snd _1)
# 6342 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1449 "src/frontc/cparser.mly"
                   ( [])
# 6348 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1450 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 6356 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1455 "src/frontc/cparser.mly"
                                        ( _1 )
# 6363 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1456 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 6370 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1457 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 6377 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1458 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 6384 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1459 "src/frontc/cparser.mly"
                                        ( ("static",[]), _1 )
# 6391 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1467 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 6401 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1468 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 6409 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1474 "src/frontc/cparser.mly"
                                        ( [_1] )
# 6416 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1475 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 6424 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1480 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 6432 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1481 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 6441 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1482 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1),
                                                  snd _1) )
# 6449 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1489 "src/frontc/cparser.mly"
                                     ( VARIABLE (fst _1) )
# 6456 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1491 "src/frontc/cparser.mly"
                                        ( VARIABLE ("__noreturn__") )
# 6463 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1493 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 6470 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1494 "src/frontc/cparser.mly"
                                        ( _2 )
# 6479 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1495 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 6487 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1496 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 6494 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1497 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_FLOAT (fst _1)) )
# 6501 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1498 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_FLOAT (fst _1 ^ fst _2)) )
# 6509 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_string_or_wstring) in
    Obj.repr(
# 1499 "src/frontc/cparser.mly"
                                            ( CONSTANT(fst _1) )
# 6516 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1503 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 6523 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1505 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 6532 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1509 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 6541 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1511 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 6550 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1516 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 6557 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1520 "src/frontc/cparser.mly"
                                         ( _1 )
# 6564 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1523 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 6573 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1524 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), _2) )
# 6581 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1526 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 6589 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1527 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 6597 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1528 "src/frontc/cparser.mly"
                                         (INDEX (_1, _3) )
# 6605 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1535 "src/frontc/cparser.mly"
                                         ( _1 )
# 6612 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1536 "src/frontc/cparser.mly"
                                         ( EXPR_SIZEOF (fst _2) )
# 6620 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1537 "src/frontc/cparser.mly"
                                         ( REAL (fst _2) )
# 6628 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1538 "src/frontc/cparser.mly"
                                         ( IMAG (fst _2) )
# 6636 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1539 "src/frontc/cparser.mly"
                                         ( CLASSIFYTYPE (fst _2) )
# 6644 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1541 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 6654 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1543 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 6662 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1544 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 6672 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1545 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 6680 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1546 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 6688 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1547 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 6696 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1549 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 6704 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1550 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 6712 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1551 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 6720 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1555 "src/frontc/cparser.mly"
                                         ( _1 )
# 6727 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1559 "src/frontc/cparser.mly"
                                        ( _1 )
# 6734 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1560 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 6743 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1561 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 6751 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1562 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 6759 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1567 "src/frontc/cparser.mly"
                                        ( _1 )
# 6766 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1568 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 6775 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1569 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 6784 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1573 "src/frontc/cparser.mly"
                                        ( _1 )
# 6791 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1574 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 6799 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1575 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 6807 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1579 "src/frontc/cparser.mly"
                                        ( _1 )
# 6814 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1580 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 6822 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1581 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 6830 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1582 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 6838 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1583 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 6846 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1587 "src/frontc/cparser.mly"
                                        ( _1 )
# 6853 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1588 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 6861 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1589 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 6869 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1594 "src/frontc/cparser.mly"
                                        ( _1 )
# 6876 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1595 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 6885 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1599 "src/frontc/cparser.mly"
                                           ( _1 )
# 6892 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1600 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 6900 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1604 "src/frontc/cparser.mly"
                                          ( _1 )
# 6907 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1605 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 6915 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1609 "src/frontc/cparser.mly"
                                                ( _1 )
# 6922 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1610 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 6931 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1614 "src/frontc/cparser.mly"
                                               ( _1 )
# 6938 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1615 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 6946 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1619 "src/frontc/cparser.mly"
                                           ( _1 )
# 6953 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1622 "src/frontc/cparser.mly"
                                          ( QUESTION(_1, _3, _5) )
# 6963 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1625 "src/frontc/cparser.mly"
                                  ( _1 )
# 6970 "src/frontc/cparser.ml"
               : 'assignment_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'unary_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_attr) in
    Obj.repr(
# 1626 "src/frontc/cparser.mly"
                                  ( BINARY(ASSIGN, _1, _3) )
# 6978 "src/frontc/cparser.ml"
               : 'assignment_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_attr) in
    Obj.repr(
# 1629 "src/frontc/cparser.mly"
                                         ( _1 )
# 6985 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1633 "src/frontc/cparser.mly"
                                         ( [_1] )
# 6992 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1634 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 7000 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1635 "src/frontc/cparser.mly"
                                         ( _3 )
# 7007 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1638 "src/frontc/cparser.mly"
                                         ( [] )
# 7013 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1639 "src/frontc/cparser.mly"
                                         ( _1 )
# 7020 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1642 "src/frontc/cparser.mly"
                                         ( _2 )
# 7029 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1643 "src/frontc/cparser.mly"
                                         ( [] )
# 7037 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1646 "src/frontc/cparser.mly"
                                         ( _2 )
# 7046 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1647 "src/frontc/cparser.mly"
                                         ( [] )
# 7054 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1651 "src/frontc/cparser.mly"
                                        ( [] )
# 7060 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1652 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 7068 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1653 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 7076 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1654 "src/frontc/cparser.mly"
                                        ( ("inline", []) :: _2 )
# 7084 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1657 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 7091 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1658 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 7099 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1661 "src/frontc/cparser.mly"
                        ( None )
# 7105 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1663 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs} )
# 7115 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1667 "src/frontc/cparser.mly"
                                        ( [] )
# 7121 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1668 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 7128 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1671 "src/frontc/cparser.mly"
                                        ( [_1] )
# 7135 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1672 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 7143 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'const_raw_string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1676 "src/frontc/cparser.mly"
                                                            ( (_1, fst _2, fst _4) )
# 7154 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'const_raw_string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1677 "src/frontc/cparser.mly"
                                                            ( (_1, fst _2, NOTHING ) )
# 7164 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1681 "src/frontc/cparser.mly"
                             ( ([], []) )
# 7170 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1683 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 7179 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1686 "src/frontc/cparser.mly"
                                        ( None )
# 7185 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 1687 "src/frontc/cparser.mly"
                                        ( Some (fst _2) )
# 7192 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1691 "src/frontc/cparser.mly"
                                        ( [] )
# 7198 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobberlst) in
    Obj.repr(
# 1692 "src/frontc/cparser.mly"
                                        ( _2 )
# 7206 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    Obj.repr(
# 1695 "src/frontc/cparser.mly"
                                        ( [] )
# 7212 "src/frontc/cparser.ml"
               : 'asmclobberlst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobberlst_ne) in
    Obj.repr(
# 1696 "src/frontc/cparser.mly"
                                         ( _1 )
# 7219 "src/frontc/cparser.ml"
               : 'asmclobberlst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1699 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 7226 "src/frontc/cparser.ml"
               : 'asmclobberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobberlst_ne) in
    Obj.repr(
# 1700 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 7234 "src/frontc/cparser.ml"
               : 'asmclobberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
let expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Cabs.expression * Cabs.cabsloc)
;;
